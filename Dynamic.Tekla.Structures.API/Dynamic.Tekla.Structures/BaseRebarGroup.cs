//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class BaseRebarGroup 
    {

		public System.String Size
		{
			get => baserebargroup.Size;
			set { baserebargroup.Size = value; }
		}

		public Dynamic.Tekla.Structures.Model.RebarHookData StartHook
		{
			get => new Dynamic.Tekla.Structures.Model.RebarHookData(baserebargroup.StartHook.GetTSObject());
			set { baserebargroup.StartHook = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.RebarHookData EndHook
		{
			get => new Dynamic.Tekla.Structures.Model.RebarHookData(baserebargroup.EndHook.GetTSObject());
			set { baserebargroup.EndHook = value.GetTSObject(); }
		}

		public System.Double FromPlaneOffset
		{
			get => baserebargroup.FromPlaneOffset;
			set { baserebargroup.FromPlaneOffset = value; }
		}

		public System.Double StartFromPlaneOffset
		{
			get => baserebargroup.StartFromPlaneOffset;
			set { baserebargroup.StartFromPlaneOffset = value; }
		}

		public System.Double EndFromPlaneOffset
		{
			get => baserebargroup.EndFromPlaneOffset;
			set { baserebargroup.EndFromPlaneOffset = value; }
		}

		public Dynamic.Tekla.Structures.Model.ExcludeTypeEnum ExcludeType
		{
			get => Dynamic.Tekla.Structures.Model.ExcludeTypeEnum_.FromTSObject(baserebargroup.ExcludeType);
			set { baserebargroup.ExcludeType = Dynamic.Tekla.Structures.Model.ExcludeTypeEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.RebarGroupSpacingTypeEnum SpacingType
		{
			get => Dynamic.Tekla.Structures.Model.RebarGroupSpacingTypeEnum_.FromTSObject(baserebargroup.SpacingType);
			set { baserebargroup.SpacingType = Dynamic.Tekla.Structures.Model.RebarGroupSpacingTypeEnum_.FromTSObject(value); }
		}

		public System.Collections.ArrayList Spacings
		{
			get => baserebargroup.Spacings;
			set { baserebargroup.Spacings = value; }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Point StartPoint
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Point(baserebargroup.StartPoint.GetTSObject());
			set { baserebargroup.StartPoint = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Point EndPoint
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Point(baserebargroup.EndPoint.GetTSObject());
			set { baserebargroup.EndPoint = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.ModelObject Father
		{
			get => new Dynamic.Tekla.Structures.Model.ModelObject(baserebargroup.Father.GetTSObject());
			set { baserebargroup.Father = value.GetTSObject(); }
		}

		public System.String Grade
		{
			get => baserebargroup.Grade;
			set { baserebargroup.Grade = value; }
		}

		public System.String Name
		{
			get => baserebargroup.Name;
			set { baserebargroup.Name = value; }
		}

		public System.Int32 Class
		{
			get => baserebargroup.Class;
			set { baserebargroup.Class = value; }
		}

		public Dynamic.Tekla.Structures.Model.NumberingSeries NumberingSeries
		{
			get => new Dynamic.Tekla.Structures.Model.NumberingSeries(baserebargroup.NumberingSeries.GetTSObject());
			set { baserebargroup.NumberingSeries = value.GetTSObject(); }
		}

		public System.Collections.ArrayList OnPlaneOffsets
		{
			get => baserebargroup.OnPlaneOffsets;
			set { baserebargroup.OnPlaneOffsets = value; }
		}

		public Dynamic.Tekla.Structures.Model.RebarOffsetTypeEnum StartPointOffsetType
		{
			get => Dynamic.Tekla.Structures.Model.RebarOffsetTypeEnum_.FromTSObject(baserebargroup.StartPointOffsetType);
			set { baserebargroup.StartPointOffsetType = Dynamic.Tekla.Structures.Model.RebarOffsetTypeEnum_.FromTSObject(value); }
		}

		public System.Double StartPointOffsetValue
		{
			get => baserebargroup.StartPointOffsetValue;
			set { baserebargroup.StartPointOffsetValue = value; }
		}

		public Dynamic.Tekla.Structures.Model.RebarOffsetTypeEnum EndPointOffsetType
		{
			get => Dynamic.Tekla.Structures.Model.RebarOffsetTypeEnum_.FromTSObject(baserebargroup.EndPointOffsetType);
			set { baserebargroup.EndPointOffsetType = Dynamic.Tekla.Structures.Model.RebarOffsetTypeEnum_.FromTSObject(value); }
		}

		public System.Double EndPointOffsetValue
		{
			get => baserebargroup.EndPointOffsetValue;
			set { baserebargroup.EndPointOffsetValue = value; }
		}

		public System.Collections.ArrayList RadiusValues
		{
			get => baserebargroup.RadiusValues;
			set { baserebargroup.RadiusValues = value; }
		}

		public Dynamic.Tekla.Structures.Forming.DeformingType InputPointDeformingState
		{
			get => Dynamic.Tekla.Structures.Forming.DeformingType_.FromTSObject(baserebargroup.InputPointDeformingState);
			set { baserebargroup.InputPointDeformingState = Dynamic.Tekla.Structures.Forming.DeformingType_.FromTSObject(value); }
		}

		public System.Nullable<System.DateTime> ModificationTime
		{
			get => baserebargroup.ModificationTime;
			set { baserebargroup.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => baserebargroup.IsUpToDate;
			set { baserebargroup.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => new Dynamic.Tekla.Structures.Identifier(baserebargroup.Identifier.GetTSObject());
			set { baserebargroup.Identifier = value.GetTSObject(); }
		}

        

        dynamic baserebargroup;
        
        public BaseRebarGroup()
        {
            this.baserebargroup =  new Tekla.Structures.Model.BaseRebarGroup();
        }

        public BaseRebarGroup(dynamic tsObject)
        {
            this.baserebargroup = tsObject;
			this.Size = baserebargroup.Size;
			this.StartHook = new Dynamic.Tekla.Structures.Model.RebarHookData(baserebargroup.StartHook);
			this.EndHook = new Dynamic.Tekla.Structures.Model.RebarHookData(baserebargroup.EndHook);
			this.FromPlaneOffset = baserebargroup.FromPlaneOffset;
			this.StartFromPlaneOffset = baserebargroup.StartFromPlaneOffset;
			this.EndFromPlaneOffset = baserebargroup.EndFromPlaneOffset;
			this.ExcludeType = Dynamic.Tekla.Structures.Model.ExcludeTypeEnum_.FromTSObject(baserebargroup.ExcludeType);
			this.SpacingType = Dynamic.Tekla.Structures.Model.RebarGroupSpacingTypeEnum_.FromTSObject(baserebargroup.SpacingType);
			this.Spacings = baserebargroup.Spacings;
			this.StartPoint = new Dynamic.Tekla.Structures.Geometry3d.Point(baserebargroup.StartPoint);
			this.EndPoint = new Dynamic.Tekla.Structures.Geometry3d.Point(baserebargroup.EndPoint);
			this.Father = new Dynamic.Tekla.Structures.Model.ModelObject(baserebargroup.Father);
			this.Grade = baserebargroup.Grade;
			this.Name = baserebargroup.Name;
			this.Class = baserebargroup.Class;
			this.NumberingSeries = new Dynamic.Tekla.Structures.Model.NumberingSeries(baserebargroup.NumberingSeries);
			this.OnPlaneOffsets = baserebargroup.OnPlaneOffsets;
			this.StartPointOffsetType = Dynamic.Tekla.Structures.Model.RebarOffsetTypeEnum_.FromTSObject(baserebargroup.StartPointOffsetType);
			this.StartPointOffsetValue = baserebargroup.StartPointOffsetValue;
			this.EndPointOffsetType = Dynamic.Tekla.Structures.Model.RebarOffsetTypeEnum_.FromTSObject(baserebargroup.EndPointOffsetType);
			this.EndPointOffsetValue = baserebargroup.EndPointOffsetValue;
			this.RadiusValues = baserebargroup.RadiusValues;
			this.InputPointDeformingState = Dynamic.Tekla.Structures.Forming.DeformingType_.FromTSObject(baserebargroup.InputPointDeformingState);
			this.ModificationTime = baserebargroup.ModificationTime;
			this.IsUpToDate = baserebargroup.IsUpToDate;
			this.Identifier = new Dynamic.Tekla.Structures.Identifier(baserebargroup.Identifier);

        }


        public dynamic GetTSObject() => baserebargroup;

		public System.Collections.ArrayList GetRebarGeometries(Dynamic.Tekla.Structures.Model.RebarGeometryOptionEnum options)
			 => baserebargroup.GetRebarGeometries(options.GetTSObject());

		public System.Collections.ArrayList GetRebarGeometries(System.Boolean withHooks)
			 => baserebargroup.GetRebarGeometries(withHooks);

		public System.Collections.ArrayList GetRebarGeometriesWithoutClashes(System.Boolean withHooks)
			 => baserebargroup.GetRebarGeometriesWithoutClashes(withHooks);

		public System.Boolean IsGeometryValid()
			 => baserebargroup.IsGeometryValid();

		public System.Int32 GetNumberOfRebars()
			 => baserebargroup.GetNumberOfRebars();

		public Dynamic.Tekla.Structures.Model.RebarGeometry GetSingleRebar(System.Int32 index, System.Boolean withHooks)
			 => new Dynamic.Tekla.Structures.Model.RebarGeometry(baserebargroup.GetSingleRebar(index, withHooks));

		public Dynamic.Tekla.Structures.Model.RebarGeometry GetSingleRebarWithoutClash(System.Int32 index, System.Boolean withHooks)
			 => new Dynamic.Tekla.Structures.Model.RebarGeometry(baserebargroup.GetSingleRebarWithoutClash(index, withHooks));

		public Dynamic.Tekla.Structures.Model.Solid GetSolid()
			 => new Dynamic.Tekla.Structures.Model.Solid(baserebargroup.GetSolid());

		public Dynamic.Tekla.Structures.Model.PourObject GetFatherPour()
			 => new Dynamic.Tekla.Structures.Model.PourObject(baserebargroup.GetFatherPour());

		public Dynamic.Tekla.Structures.Model.PourUnit GetFatherPourUnit()
			 => new Dynamic.Tekla.Structures.Model.PourUnit(baserebargroup.GetFatherPourUnit());

		public System.Boolean Insert()
			 => baserebargroup.Insert();

		public System.Boolean Select()
			 => baserebargroup.Select();

		public System.Boolean Modify()
			 => baserebargroup.Modify();

		public System.Boolean Delete()
			 => baserebargroup.Delete();

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(baserebargroup.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => new Dynamic.Tekla.Structures.Model.BaseComponent(baserebargroup.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(baserebargroup.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(ref System.Collections.Hashtable values)
			 => baserebargroup.GetAllUserProperties(ref values);

		public System.Boolean GetIntegerUserProperties(ref System.Collections.Hashtable values)
			 => baserebargroup.GetIntegerUserProperties(ref values);

		public System.Boolean GetDoubleUserProperties(ref System.Collections.Hashtable values)
			 => baserebargroup.GetDoubleUserProperties(ref values);

		public System.Boolean GetStringUserProperties(ref System.Collections.Hashtable values)
			 => baserebargroup.GetStringUserProperties(ref values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, ref System.Collections.Hashtable values)
			 => baserebargroup.GetAllReportProperties(stringNames, doubleNames, integerNames, ref values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => baserebargroup.GetIntegerReportProperties(names, ref values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => baserebargroup.GetDoubleReportProperties(names, ref values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => baserebargroup.GetStringReportProperties(names, ref values);

		public System.Boolean GetUserProperty(System.String name, ref System.String value)
			 => baserebargroup.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.String value)
			 => baserebargroup.GetReportProperty(name, ref value);

		public System.Boolean GetUserProperty(System.String name, ref System.Double value)
			 => baserebargroup.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.Double value)
			 => baserebargroup.GetReportProperty(name, ref value);

		public System.Boolean GetUserProperty(System.String name, ref System.Int32 value)
			 => baserebargroup.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.Int32 value)
			 => baserebargroup.GetReportProperty(name, ref value);

		public System.Boolean GetDynamicStringProperty(System.String name, ref System.String value)
			 => baserebargroup.GetDynamicStringProperty(name, ref value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => baserebargroup.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => baserebargroup.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => baserebargroup.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => baserebargroup.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(baserebargroup.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => baserebargroup.SetPhase(phase.GetTSObject());

		public System.Boolean GetPhase(ref Dynamic.Tekla.Structures.Model.Phase phase)
			 => baserebargroup.GetPhase(ref phase.GetTSObject());

		public System.Boolean SetLabel(System.String label)
			 => baserebargroup.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => baserebargroup.CompareTo(obj);

		public System.Boolean Equals(Dynamic.Tekla.Structures.Model.ModelObject other)
			 => baserebargroup.Equals(other.GetTSObject());

		public System.Boolean Equals(System.Object obj)
			 => baserebargroup.Equals(obj);

		public System.Int32 GetHashCode()
			 => baserebargroup.GetHashCode();

		public System.Type GetType()
			 => baserebargroup.GetType();

		public System.String ToString()
			 => baserebargroup.ToString();




    public enum ExcludeTypeEnum
    {
			EXCLUDE_TYPE_NONE,
			EXCLUDE_TYPE_FIRST,
			EXCLUDE_TYPE_LAST,
			EXCLUDE_TYPE_BOTH        
    }

    public static class ExcludeTypeEnum_
    {
        public static dynamic GetTSObject(ExcludeTypeEnum dynEnum)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.ExcludeTypeEnum");

            switch (dynEnum)
            {
				case ExcludeTypeEnum.EXCLUDE_TYPE_NONE:
					return System.Enum.Parse(tsType, "EXCLUDE_TYPE_NONE");
				case ExcludeTypeEnum.EXCLUDE_TYPE_FIRST:
					return System.Enum.Parse(tsType, "EXCLUDE_TYPE_FIRST");
				case ExcludeTypeEnum.EXCLUDE_TYPE_LAST:
					return System.Enum.Parse(tsType, "EXCLUDE_TYPE_LAST");
				case ExcludeTypeEnum.EXCLUDE_TYPE_BOTH:
					return System.Enum.Parse(tsType, "EXCLUDE_TYPE_BOTH");

                default:
                    throw new System.NotImplementedException(dynEnum.ToString() + "- enum value is not implemented");
            }
        }
    
        public static ExcludeTypeEnum FromTSObject(dynamic tsEnum)
        {
            string tsEnumValue = tsEnum.ToString("G", System.Globalization.CultureInfo.InvariantCulture);
            
			if (tsEnumValue.Equals("EXCLUDE_TYPE_NONE", System.StringComparison.InvariantCulture))
				return ExcludeTypeEnum.EXCLUDE_TYPE_NONE;
			else if (tsEnumValue.Equals("EXCLUDE_TYPE_FIRST", System.StringComparison.InvariantCulture))
				return ExcludeTypeEnum.EXCLUDE_TYPE_FIRST;
			else if (tsEnumValue.Equals("EXCLUDE_TYPE_LAST", System.StringComparison.InvariantCulture))
				return ExcludeTypeEnum.EXCLUDE_TYPE_LAST;
			else if (tsEnumValue.Equals("EXCLUDE_TYPE_BOTH", System.StringComparison.InvariantCulture))
				return ExcludeTypeEnum.EXCLUDE_TYPE_BOTH;

            else 
                throw new System.NotImplementedException(tsEnumValue + "- enum value is not implemented");
            
        }
    }


    public enum RebarGroupSpacingTypeEnum
    {
			SPACING_TYPE_UNDEFINED,
			SPACING_TYPE_EXACT_SPACINGS,
			SPACING_TYPE_EXACT_NUMBER,
			SPACING_TYPE_TARGET_SPACE,
			SPACING_TYPE_EXACT_SPACE_FLEX_AT_START,
			SPACING_TYPE_EXACT_SPACE_FLEX_AT_END,
			SPACING_TYPE_EXACT_SPACE_FLEX_AT_BOTH,
			SPACING_TYPE_EXACT_SPACE_FLEX_AT_MIDDLE        
    }

    public static class RebarGroupSpacingTypeEnum_
    {
        public static dynamic GetTSObject(RebarGroupSpacingTypeEnum dynEnum)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.RebarGroupSpacingTypeEnum");

            switch (dynEnum)
            {
				case RebarGroupSpacingTypeEnum.SPACING_TYPE_UNDEFINED:
					return System.Enum.Parse(tsType, "SPACING_TYPE_UNDEFINED");
				case RebarGroupSpacingTypeEnum.SPACING_TYPE_EXACT_SPACINGS:
					return System.Enum.Parse(tsType, "SPACING_TYPE_EXACT_SPACINGS");
				case RebarGroupSpacingTypeEnum.SPACING_TYPE_EXACT_NUMBER:
					return System.Enum.Parse(tsType, "SPACING_TYPE_EXACT_NUMBER");
				case RebarGroupSpacingTypeEnum.SPACING_TYPE_TARGET_SPACE:
					return System.Enum.Parse(tsType, "SPACING_TYPE_TARGET_SPACE");
				case RebarGroupSpacingTypeEnum.SPACING_TYPE_EXACT_SPACE_FLEX_AT_START:
					return System.Enum.Parse(tsType, "SPACING_TYPE_EXACT_SPACE_FLEX_AT_START");
				case RebarGroupSpacingTypeEnum.SPACING_TYPE_EXACT_SPACE_FLEX_AT_END:
					return System.Enum.Parse(tsType, "SPACING_TYPE_EXACT_SPACE_FLEX_AT_END");
				case RebarGroupSpacingTypeEnum.SPACING_TYPE_EXACT_SPACE_FLEX_AT_BOTH:
					return System.Enum.Parse(tsType, "SPACING_TYPE_EXACT_SPACE_FLEX_AT_BOTH");
				case RebarGroupSpacingTypeEnum.SPACING_TYPE_EXACT_SPACE_FLEX_AT_MIDDLE:
					return System.Enum.Parse(tsType, "SPACING_TYPE_EXACT_SPACE_FLEX_AT_MIDDLE");

                default:
                    throw new System.NotImplementedException(dynEnum.ToString() + "- enum value is not implemented");
            }
        }
    
        public static RebarGroupSpacingTypeEnum FromTSObject(dynamic tsEnum)
        {
            string tsEnumValue = tsEnum.ToString("G", System.Globalization.CultureInfo.InvariantCulture);
            
			if (tsEnumValue.Equals("SPACING_TYPE_UNDEFINED", System.StringComparison.InvariantCulture))
				return RebarGroupSpacingTypeEnum.SPACING_TYPE_UNDEFINED;
			else if (tsEnumValue.Equals("SPACING_TYPE_EXACT_SPACINGS", System.StringComparison.InvariantCulture))
				return RebarGroupSpacingTypeEnum.SPACING_TYPE_EXACT_SPACINGS;
			else if (tsEnumValue.Equals("SPACING_TYPE_EXACT_NUMBER", System.StringComparison.InvariantCulture))
				return RebarGroupSpacingTypeEnum.SPACING_TYPE_EXACT_NUMBER;
			else if (tsEnumValue.Equals("SPACING_TYPE_TARGET_SPACE", System.StringComparison.InvariantCulture))
				return RebarGroupSpacingTypeEnum.SPACING_TYPE_TARGET_SPACE;
			else if (tsEnumValue.Equals("SPACING_TYPE_EXACT_SPACE_FLEX_AT_START", System.StringComparison.InvariantCulture))
				return RebarGroupSpacingTypeEnum.SPACING_TYPE_EXACT_SPACE_FLEX_AT_START;
			else if (tsEnumValue.Equals("SPACING_TYPE_EXACT_SPACE_FLEX_AT_END", System.StringComparison.InvariantCulture))
				return RebarGroupSpacingTypeEnum.SPACING_TYPE_EXACT_SPACE_FLEX_AT_END;
			else if (tsEnumValue.Equals("SPACING_TYPE_EXACT_SPACE_FLEX_AT_BOTH", System.StringComparison.InvariantCulture))
				return RebarGroupSpacingTypeEnum.SPACING_TYPE_EXACT_SPACE_FLEX_AT_BOTH;
			else if (tsEnumValue.Equals("SPACING_TYPE_EXACT_SPACE_FLEX_AT_MIDDLE", System.StringComparison.InvariantCulture))
				return RebarGroupSpacingTypeEnum.SPACING_TYPE_EXACT_SPACE_FLEX_AT_MIDDLE;

            else 
                throw new System.NotImplementedException(tsEnumValue + "- enum value is not implemented");
            
        }
    }



    }

}
    
