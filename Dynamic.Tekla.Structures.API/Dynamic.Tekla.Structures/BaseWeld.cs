//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class BaseWeld 
    {

		public Dynamic.Tekla.Structures.Model.ModelObject MainObject
		{
			get => new Dynamic.Tekla.Structures.Model.ModelObject(baseweld.MainObject.GetTSObject());
			set { baseweld.MainObject = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.ModelObject SecondaryObject
		{
			get => new Dynamic.Tekla.Structures.Model.ModelObject(baseweld.SecondaryObject.GetTSObject());
			set { baseweld.SecondaryObject = value.GetTSObject(); }
		}

		public System.Double SizeAbove
		{
			get => baseweld.SizeAbove;
			set { baseweld.SizeAbove = value; }
		}

		public System.Double AdditionalSizeAbove
		{
			get => baseweld.AdditionalSizeAbove;
			set { baseweld.AdditionalSizeAbove = value; }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldTypeEnum TypeAbove
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldTypeEnum_.FromTSObject(baseweld.TypeAbove);
			set { baseweld.TypeAbove = Dynamic.Tekla.Structures.Model.BaseWeld.WeldTypeEnum_.FromTSObject(value); }
		}

		public System.Double AngleAbove
		{
			get => baseweld.AngleAbove;
			set { baseweld.AngleAbove = value; }
		}

		public System.Double LengthAbove
		{
			get => baseweld.LengthAbove;
			set { baseweld.LengthAbove = value; }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldContourEnum ContourAbove
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldContourEnum_.FromTSObject(baseweld.ContourAbove);
			set { baseweld.ContourAbove = Dynamic.Tekla.Structures.Model.BaseWeld.WeldContourEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldFinishEnum FinishAbove
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldFinishEnum_.FromTSObject(baseweld.FinishAbove);
			set { baseweld.FinishAbove = Dynamic.Tekla.Structures.Model.BaseWeld.WeldFinishEnum_.FromTSObject(value); }
		}

		public System.Double PitchAbove
		{
			get => baseweld.PitchAbove;
			set { baseweld.PitchAbove = value; }
		}

		public System.Double SizeBelow
		{
			get => baseweld.SizeBelow;
			set { baseweld.SizeBelow = value; }
		}

		public System.Double AdditionalSizeBelow
		{
			get => baseweld.AdditionalSizeBelow;
			set { baseweld.AdditionalSizeBelow = value; }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldTypeEnum TypeBelow
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldTypeEnum_.FromTSObject(baseweld.TypeBelow);
			set { baseweld.TypeBelow = Dynamic.Tekla.Structures.Model.BaseWeld.WeldTypeEnum_.FromTSObject(value); }
		}

		public System.Double AngleBelow
		{
			get => baseweld.AngleBelow;
			set { baseweld.AngleBelow = value; }
		}

		public System.Double LengthBelow
		{
			get => baseweld.LengthBelow;
			set { baseweld.LengthBelow = value; }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldContourEnum ContourBelow
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldContourEnum_.FromTSObject(baseweld.ContourBelow);
			set { baseweld.ContourBelow = Dynamic.Tekla.Structures.Model.BaseWeld.WeldContourEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldFinishEnum FinishBelow
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldFinishEnum_.FromTSObject(baseweld.FinishBelow);
			set { baseweld.FinishBelow = Dynamic.Tekla.Structures.Model.BaseWeld.WeldFinishEnum_.FromTSObject(value); }
		}

		public System.Double PitchBelow
		{
			get => baseweld.PitchBelow;
			set { baseweld.PitchBelow = value; }
		}

		public System.Boolean ShopWeld
		{
			get => baseweld.ShopWeld;
			set { baseweld.ShopWeld = value; }
		}

		public System.Boolean AroundWeld
		{
			get => baseweld.AroundWeld;
			set { baseweld.AroundWeld = value; }
		}

		public System.Boolean StitchWeld
		{
			get => baseweld.StitchWeld;
			set { baseweld.StitchWeld = value; }
		}

		public System.Double RootOpeningAbove
		{
			get => baseweld.RootOpeningAbove;
			set { baseweld.RootOpeningAbove = value; }
		}

		public System.Double RootFaceAbove
		{
			get => baseweld.RootFaceAbove;
			set { baseweld.RootFaceAbove = value; }
		}

		public System.Double EffectiveThroatAbove
		{
			get => baseweld.EffectiveThroatAbove;
			set { baseweld.EffectiveThroatAbove = value; }
		}

		public System.Int32 IncrementAmountAbove
		{
			get => baseweld.IncrementAmountAbove;
			set { baseweld.IncrementAmountAbove = value; }
		}

		public System.Double RootOpeningBelow
		{
			get => baseweld.RootOpeningBelow;
			set { baseweld.RootOpeningBelow = value; }
		}

		public System.Double RootFaceBelow
		{
			get => baseweld.RootFaceBelow;
			set { baseweld.RootFaceBelow = value; }
		}

		public System.Double EffectiveThroatBelow
		{
			get => baseweld.EffectiveThroatBelow;
			set { baseweld.EffectiveThroatBelow = value; }
		}

		public System.Int32 IncrementAmountBelow
		{
			get => baseweld.IncrementAmountBelow;
			set { baseweld.IncrementAmountBelow = value; }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldElectrodeClassificationEnum ElectrodeClassification
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldElectrodeClassificationEnum_.FromTSObject(baseweld.ElectrodeClassification);
			set { baseweld.ElectrodeClassification = Dynamic.Tekla.Structures.Model.BaseWeld.WeldElectrodeClassificationEnum_.FromTSObject(value); }
		}

		public System.Double ElectrodeStrength
		{
			get => baseweld.ElectrodeStrength;
			set { baseweld.ElectrodeStrength = value; }
		}

		public System.Double ElectrodeCoefficient
		{
			get => baseweld.ElectrodeCoefficient;
			set { baseweld.ElectrodeCoefficient = value; }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldProcessTypeEnum ProcessType
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldProcessTypeEnum_.FromTSObject(baseweld.ProcessType);
			set { baseweld.ProcessType = Dynamic.Tekla.Structures.Model.BaseWeld.WeldProcessTypeEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldNDTInspectionEnum NDTInspection
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldNDTInspectionEnum_.FromTSObject(baseweld.NDTInspection);
			set { baseweld.NDTInspection = Dynamic.Tekla.Structures.Model.BaseWeld.WeldNDTInspectionEnum_.FromTSObject(value); }
		}

		public System.Boolean ConnectAssemblies
		{
			get => baseweld.ConnectAssemblies;
			set { baseweld.ConnectAssemblies = value; }
		}

		public System.String ReferenceText
		{
			get => baseweld.ReferenceText;
			set { baseweld.ReferenceText = value; }
		}

		public System.String PrefixAboveLine
		{
			get => baseweld.PrefixAboveLine;
			set { baseweld.PrefixAboveLine = value; }
		}

		public System.String PrefixBelowLine
		{
			get => baseweld.PrefixBelowLine;
			set { baseweld.PrefixBelowLine = value; }
		}

		public System.String Standard
		{
			get => baseweld.Standard;
			set { baseweld.Standard = value; }
		}

		public System.Int32 WeldNumber
		{
			get => baseweld.WeldNumber;
			set { baseweld.WeldNumber = value; }
		}

		public System.String WeldNumberPrefix
		{
			get => baseweld.WeldNumberPrefix;
			set { baseweld.WeldNumberPrefix = value; }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldIntermittentTypeEnum IntermittentType
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldIntermittentTypeEnum_.FromTSObject(baseweld.IntermittentType);
			set { baseweld.IntermittentType = Dynamic.Tekla.Structures.Model.BaseWeld.WeldIntermittentTypeEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldPlacementTypeEnum Placement
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldPlacementTypeEnum_.FromTSObject(baseweld.Placement);
			set { baseweld.Placement = Dynamic.Tekla.Structures.Model.BaseWeld.WeldPlacementTypeEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldPreparationTypeEnum Preparation
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldPreparationTypeEnum_.FromTSObject(baseweld.Preparation);
			set { baseweld.Preparation = Dynamic.Tekla.Structures.Model.BaseWeld.WeldPreparationTypeEnum_.FromTSObject(value); }
		}

		public System.DateTime ModificationTime
		{
			get => baseweld.ModificationTime;
			set { baseweld.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => baseweld.IsUpToDate;
			set { baseweld.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => new Dynamic.Tekla.Structures.Identifier(baseweld.Identifier.GetTSObject());
			set { baseweld.Identifier = value.GetTSObject(); }
		}

        

        dynamic baseweld;
        
        public BaseWeld()
        {
            this.baseweld =  new Tekla.Structures.Model.BaseWeld();
        }

        public BaseWeld(dynamic tsObject)
        {
            this.baseweld = tsObject;
			this.MainObject = new Dynamic.Tekla.Structures.Model.ModelObject(baseweld.MainObject);
			this.SecondaryObject = new Dynamic.Tekla.Structures.Model.ModelObject(baseweld.SecondaryObject);
			this.SizeAbove = baseweld.SizeAbove;
			this.AdditionalSizeAbove = baseweld.AdditionalSizeAbove;
			this.TypeAbove = Dynamic.Tekla.Structures.Model.BaseWeld.WeldTypeEnum_.FromTSObject(baseweld.TypeAbove);
			this.AngleAbove = baseweld.AngleAbove;
			this.LengthAbove = baseweld.LengthAbove;
			this.ContourAbove = Dynamic.Tekla.Structures.Model.BaseWeld.WeldContourEnum_.FromTSObject(baseweld.ContourAbove);
			this.FinishAbove = Dynamic.Tekla.Structures.Model.BaseWeld.WeldFinishEnum_.FromTSObject(baseweld.FinishAbove);
			this.PitchAbove = baseweld.PitchAbove;
			this.SizeBelow = baseweld.SizeBelow;
			this.AdditionalSizeBelow = baseweld.AdditionalSizeBelow;
			this.TypeBelow = Dynamic.Tekla.Structures.Model.BaseWeld.WeldTypeEnum_.FromTSObject(baseweld.TypeBelow);
			this.AngleBelow = baseweld.AngleBelow;
			this.LengthBelow = baseweld.LengthBelow;
			this.ContourBelow = Dynamic.Tekla.Structures.Model.BaseWeld.WeldContourEnum_.FromTSObject(baseweld.ContourBelow);
			this.FinishBelow = Dynamic.Tekla.Structures.Model.BaseWeld.WeldFinishEnum_.FromTSObject(baseweld.FinishBelow);
			this.PitchBelow = baseweld.PitchBelow;
			this.ShopWeld = baseweld.ShopWeld;
			this.AroundWeld = baseweld.AroundWeld;
			this.StitchWeld = baseweld.StitchWeld;
			this.RootOpeningAbove = baseweld.RootOpeningAbove;
			this.RootFaceAbove = baseweld.RootFaceAbove;
			this.EffectiveThroatAbove = baseweld.EffectiveThroatAbove;
			this.IncrementAmountAbove = baseweld.IncrementAmountAbove;
			this.RootOpeningBelow = baseweld.RootOpeningBelow;
			this.RootFaceBelow = baseweld.RootFaceBelow;
			this.EffectiveThroatBelow = baseweld.EffectiveThroatBelow;
			this.IncrementAmountBelow = baseweld.IncrementAmountBelow;
			this.ElectrodeClassification = Dynamic.Tekla.Structures.Model.BaseWeld.WeldElectrodeClassificationEnum_.FromTSObject(baseweld.ElectrodeClassification);
			this.ElectrodeStrength = baseweld.ElectrodeStrength;
			this.ElectrodeCoefficient = baseweld.ElectrodeCoefficient;
			this.ProcessType = Dynamic.Tekla.Structures.Model.BaseWeld.WeldProcessTypeEnum_.FromTSObject(baseweld.ProcessType);
			this.NDTInspection = Dynamic.Tekla.Structures.Model.BaseWeld.WeldNDTInspectionEnum_.FromTSObject(baseweld.NDTInspection);
			this.ConnectAssemblies = baseweld.ConnectAssemblies;
			this.ReferenceText = baseweld.ReferenceText;
			this.PrefixAboveLine = baseweld.PrefixAboveLine;
			this.PrefixBelowLine = baseweld.PrefixBelowLine;
			this.Standard = baseweld.Standard;
			this.WeldNumber = baseweld.WeldNumber;
			this.WeldNumberPrefix = baseweld.WeldNumberPrefix;
			this.IntermittentType = Dynamic.Tekla.Structures.Model.BaseWeld.WeldIntermittentTypeEnum_.FromTSObject(baseweld.IntermittentType);
			this.Placement = Dynamic.Tekla.Structures.Model.BaseWeld.WeldPlacementTypeEnum_.FromTSObject(baseweld.Placement);
			this.Preparation = Dynamic.Tekla.Structures.Model.BaseWeld.WeldPreparationTypeEnum_.FromTSObject(baseweld.Preparation);
			this.ModificationTime = baseweld.ModificationTime;
			this.IsUpToDate = baseweld.IsUpToDate;
			this.Identifier = new Dynamic.Tekla.Structures.Identifier(baseweld.Identifier);

        }


        public dynamic GetTSObject() => baseweld;

		public System.Collections.ArrayList GetWeldGeometries()
			 => baseweld.GetWeldGeometries();

		public Dynamic.Tekla.Structures.Model.Solid GetSolid()
			 => new Dynamic.Tekla.Structures.Model.Solid(baseweld.GetSolid());

		public System.Boolean Insert()
			 => baseweld.Insert();

		public System.Boolean Select()
			 => baseweld.Select();

		public System.Boolean Modify()
			 => baseweld.Modify();

		public System.Boolean Delete()
			 => baseweld.Delete();

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(baseweld.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => new Dynamic.Tekla.Structures.Model.BaseComponent(baseweld.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(baseweld.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(ref System.Collections.Hashtable values)
			 => baseweld.GetAllUserProperties(ref values);

		public System.Boolean GetIntegerUserProperties(ref System.Collections.Hashtable values)
			 => baseweld.GetIntegerUserProperties(ref values);

		public System.Boolean GetDoubleUserProperties(ref System.Collections.Hashtable values)
			 => baseweld.GetDoubleUserProperties(ref values);

		public System.Boolean GetStringUserProperties(ref System.Collections.Hashtable values)
			 => baseweld.GetStringUserProperties(ref values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, ref System.Collections.Hashtable values)
			 => baseweld.GetAllReportProperties(stringNames, doubleNames, integerNames, ref values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => baseweld.GetIntegerReportProperties(names, ref values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => baseweld.GetDoubleReportProperties(names, ref values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => baseweld.GetStringReportProperties(names, ref values);

		public System.Boolean GetUserProperty(System.String name, ref System.String value)
			 => baseweld.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.String value)
			 => baseweld.GetReportProperty(name, ref value);

		public System.Boolean GetUserProperty(System.String name, ref System.Double value)
			 => baseweld.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.Double value)
			 => baseweld.GetReportProperty(name, ref value);

		public System.Boolean GetUserProperty(System.String name, ref System.Int32 value)
			 => baseweld.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.Int32 value)
			 => baseweld.GetReportProperty(name, ref value);

		public System.Boolean GetDynamicStringProperty(System.String name, ref System.String value)
			 => baseweld.GetDynamicStringProperty(name, ref value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => baseweld.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => baseweld.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => baseweld.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => baseweld.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(baseweld.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => baseweld.SetPhase(phase.GetTSObject());

		public System.Boolean GetPhase(ref Dynamic.Tekla.Structures.Model.Phase phase)
			 => baseweld.GetPhase(ref phase.GetTSObject());

		public System.Boolean SetLabel(System.String label)
			 => baseweld.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => baseweld.CompareTo(obj);

		public System.Boolean Equals(Dynamic.Tekla.Structures.Model.ModelObject other)
			 => baseweld.Equals(other.GetTSObject());

		public System.Boolean Equals(System.Object obj)
			 => baseweld.Equals(obj);

		public System.Int32 GetHashCode()
			 => baseweld.GetHashCode();

		public System.Type GetType()
			 => baseweld.GetType();

		public System.String ToString()
			 => baseweld.ToString();




    public enum WeldTypeEnum
    {
			WELD_TYPE_NONE,
			WELD_TYPE_EDGE_FLANGE,
			WELD_TYPE_SQUARE_GROOVE_SQUARE_BUTT,
			WELD_TYPE_BEVEL_GROOVE_SINGLE_V_BUTT,
			WELD_TYPE_BEVEL_GROOVE_SINGLE_BEVEL_BUTT,
			WELD_TYPE_SINGLE_V_BUTT_WITH_BROAD_ROOT_FACE,
			WELD_TYPE_SINGLE_BEVEL_BUTT_WITH_BROAD_ROOT_FACE,
			WELD_TYPE_U_GROOVE_SINGLE_U_BUTT,
			WELD_TYPE_J_GROOVE_J_BUTT,
			WELD_TYPE_BEVEL_BACKING,
			WELD_TYPE_FILLET,
			WELD_TYPE_PLUG,
			WELD_TYPE_SPOT,
			WELD_TYPE_SEAM,
			WELD_TYPE_SLOT,
			WELD_TYPE_FLARE_BEVEL_GROOVE,
			WELD_TYPE_FLARE_V_GROOVE,
			WELD_TYPE_CORNER_FLANGE,
			WELD_TYPE_PARTIAL_PENETRATION_SINGLE_BEVEL_BUTT_PLUS_FILLET,
			WELD_TYPE_PARTIAL_PENETRATION_SQUARE_GROOVE_PLUS_FILLET,
			WELD_TYPE_MELT_THROUGH,
			STEEP_FLANKED_BEVEL_GROOVE_SINGLE_V_BUTT,
			STEEP_FLANKED_BEVEL_GROOVE_SINGLE_BEVEL_BUTT,
			WELD_TYPE_EDGE,
			WELD_TYPE_ISO_SURFACING,
			WELD_TYPE_FOLD,
			WELD_TYPE_INCLINED        
    }

    public static class WeldTypeEnum_
    {
        public static dynamic GetTSObject(WeldTypeEnum dynEnum)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.WeldTypeEnum");

            switch (dynEnum)
            {
				case WeldTypeEnum.WELD_TYPE_NONE:
					return System.Enum.Parse(tsType, "WELD_TYPE_NONE");
				case WeldTypeEnum.WELD_TYPE_EDGE_FLANGE:
					return System.Enum.Parse(tsType, "WELD_TYPE_EDGE_FLANGE");
				case WeldTypeEnum.WELD_TYPE_SQUARE_GROOVE_SQUARE_BUTT:
					return System.Enum.Parse(tsType, "WELD_TYPE_SQUARE_GROOVE_SQUARE_BUTT");
				case WeldTypeEnum.WELD_TYPE_BEVEL_GROOVE_SINGLE_V_BUTT:
					return System.Enum.Parse(tsType, "WELD_TYPE_BEVEL_GROOVE_SINGLE_V_BUTT");
				case WeldTypeEnum.WELD_TYPE_BEVEL_GROOVE_SINGLE_BEVEL_BUTT:
					return System.Enum.Parse(tsType, "WELD_TYPE_BEVEL_GROOVE_SINGLE_BEVEL_BUTT");
				case WeldTypeEnum.WELD_TYPE_SINGLE_V_BUTT_WITH_BROAD_ROOT_FACE:
					return System.Enum.Parse(tsType, "WELD_TYPE_SINGLE_V_BUTT_WITH_BROAD_ROOT_FACE");
				case WeldTypeEnum.WELD_TYPE_SINGLE_BEVEL_BUTT_WITH_BROAD_ROOT_FACE:
					return System.Enum.Parse(tsType, "WELD_TYPE_SINGLE_BEVEL_BUTT_WITH_BROAD_ROOT_FACE");
				case WeldTypeEnum.WELD_TYPE_U_GROOVE_SINGLE_U_BUTT:
					return System.Enum.Parse(tsType, "WELD_TYPE_U_GROOVE_SINGLE_U_BUTT");
				case WeldTypeEnum.WELD_TYPE_J_GROOVE_J_BUTT:
					return System.Enum.Parse(tsType, "WELD_TYPE_J_GROOVE_J_BUTT");
				case WeldTypeEnum.WELD_TYPE_BEVEL_BACKING:
					return System.Enum.Parse(tsType, "WELD_TYPE_BEVEL_BACKING");
				case WeldTypeEnum.WELD_TYPE_FILLET:
					return System.Enum.Parse(tsType, "WELD_TYPE_FILLET");
				case WeldTypeEnum.WELD_TYPE_PLUG:
					return System.Enum.Parse(tsType, "WELD_TYPE_PLUG");
				case WeldTypeEnum.WELD_TYPE_SPOT:
					return System.Enum.Parse(tsType, "WELD_TYPE_SPOT");
				case WeldTypeEnum.WELD_TYPE_SEAM:
					return System.Enum.Parse(tsType, "WELD_TYPE_SEAM");
				case WeldTypeEnum.WELD_TYPE_SLOT:
					return System.Enum.Parse(tsType, "WELD_TYPE_SLOT");
				case WeldTypeEnum.WELD_TYPE_FLARE_BEVEL_GROOVE:
					return System.Enum.Parse(tsType, "WELD_TYPE_FLARE_BEVEL_GROOVE");
				case WeldTypeEnum.WELD_TYPE_FLARE_V_GROOVE:
					return System.Enum.Parse(tsType, "WELD_TYPE_FLARE_V_GROOVE");
				case WeldTypeEnum.WELD_TYPE_CORNER_FLANGE:
					return System.Enum.Parse(tsType, "WELD_TYPE_CORNER_FLANGE");
				case WeldTypeEnum.WELD_TYPE_PARTIAL_PENETRATION_SINGLE_BEVEL_BUTT_PLUS_FILLET:
					return System.Enum.Parse(tsType, "WELD_TYPE_PARTIAL_PENETRATION_SINGLE_BEVEL_BUTT_PLUS_FILLET");
				case WeldTypeEnum.WELD_TYPE_PARTIAL_PENETRATION_SQUARE_GROOVE_PLUS_FILLET:
					return System.Enum.Parse(tsType, "WELD_TYPE_PARTIAL_PENETRATION_SQUARE_GROOVE_PLUS_FILLET");
				case WeldTypeEnum.WELD_TYPE_MELT_THROUGH:
					return System.Enum.Parse(tsType, "WELD_TYPE_MELT_THROUGH");
				case WeldTypeEnum.STEEP_FLANKED_BEVEL_GROOVE_SINGLE_V_BUTT:
					return System.Enum.Parse(tsType, "STEEP_FLANKED_BEVEL_GROOVE_SINGLE_V_BUTT");
				case WeldTypeEnum.STEEP_FLANKED_BEVEL_GROOVE_SINGLE_BEVEL_BUTT:
					return System.Enum.Parse(tsType, "STEEP_FLANKED_BEVEL_GROOVE_SINGLE_BEVEL_BUTT");
				case WeldTypeEnum.WELD_TYPE_EDGE:
					return System.Enum.Parse(tsType, "WELD_TYPE_EDGE");
				case WeldTypeEnum.WELD_TYPE_ISO_SURFACING:
					return System.Enum.Parse(tsType, "WELD_TYPE_ISO_SURFACING");
				case WeldTypeEnum.WELD_TYPE_FOLD:
					return System.Enum.Parse(tsType, "WELD_TYPE_FOLD");
				case WeldTypeEnum.WELD_TYPE_INCLINED:
					return System.Enum.Parse(tsType, "WELD_TYPE_INCLINED");

                default:
                    throw new System.NotImplementedException(dynEnum.ToString() + "- enum value is not implemented");
            }
        }
    
        public static WeldTypeEnum FromTSObject(dynamic tsEnum)
        {
            string tsEnumValue = tsEnum.ToString("G", System.Globalization.CultureInfo.InvariantCulture);
            
			if (tsEnumValue.Equals("WELD_TYPE_NONE", System.StringComparison.InvariantCulture))
				return WeldTypeEnum.WELD_TYPE_NONE;
			else if (tsEnumValue.Equals("WELD_TYPE_EDGE_FLANGE", System.StringComparison.InvariantCulture))
				return WeldTypeEnum.WELD_TYPE_EDGE_FLANGE;
			else if (tsEnumValue.Equals("WELD_TYPE_SQUARE_GROOVE_SQUARE_BUTT", System.StringComparison.InvariantCulture))
				return WeldTypeEnum.WELD_TYPE_SQUARE_GROOVE_SQUARE_BUTT;
			else if (tsEnumValue.Equals("WELD_TYPE_BEVEL_GROOVE_SINGLE_V_BUTT", System.StringComparison.InvariantCulture))
				return WeldTypeEnum.WELD_TYPE_BEVEL_GROOVE_SINGLE_V_BUTT;
			else if (tsEnumValue.Equals("WELD_TYPE_BEVEL_GROOVE_SINGLE_BEVEL_BUTT", System.StringComparison.InvariantCulture))
				return WeldTypeEnum.WELD_TYPE_BEVEL_GROOVE_SINGLE_BEVEL_BUTT;
			else if (tsEnumValue.Equals("WELD_TYPE_SINGLE_V_BUTT_WITH_BROAD_ROOT_FACE", System.StringComparison.InvariantCulture))
				return WeldTypeEnum.WELD_TYPE_SINGLE_V_BUTT_WITH_BROAD_ROOT_FACE;
			else if (tsEnumValue.Equals("WELD_TYPE_SINGLE_BEVEL_BUTT_WITH_BROAD_ROOT_FACE", System.StringComparison.InvariantCulture))
				return WeldTypeEnum.WELD_TYPE_SINGLE_BEVEL_BUTT_WITH_BROAD_ROOT_FACE;
			else if (tsEnumValue.Equals("WELD_TYPE_U_GROOVE_SINGLE_U_BUTT", System.StringComparison.InvariantCulture))
				return WeldTypeEnum.WELD_TYPE_U_GROOVE_SINGLE_U_BUTT;
			else if (tsEnumValue.Equals("WELD_TYPE_J_GROOVE_J_BUTT", System.StringComparison.InvariantCulture))
				return WeldTypeEnum.WELD_TYPE_J_GROOVE_J_BUTT;
			else if (tsEnumValue.Equals("WELD_TYPE_BEVEL_BACKING", System.StringComparison.InvariantCulture))
				return WeldTypeEnum.WELD_TYPE_BEVEL_BACKING;
			else if (tsEnumValue.Equals("WELD_TYPE_FILLET", System.StringComparison.InvariantCulture))
				return WeldTypeEnum.WELD_TYPE_FILLET;
			else if (tsEnumValue.Equals("WELD_TYPE_PLUG", System.StringComparison.InvariantCulture))
				return WeldTypeEnum.WELD_TYPE_PLUG;
			else if (tsEnumValue.Equals("WELD_TYPE_SPOT", System.StringComparison.InvariantCulture))
				return WeldTypeEnum.WELD_TYPE_SPOT;
			else if (tsEnumValue.Equals("WELD_TYPE_SEAM", System.StringComparison.InvariantCulture))
				return WeldTypeEnum.WELD_TYPE_SEAM;
			else if (tsEnumValue.Equals("WELD_TYPE_SLOT", System.StringComparison.InvariantCulture))
				return WeldTypeEnum.WELD_TYPE_SLOT;
			else if (tsEnumValue.Equals("WELD_TYPE_FLARE_BEVEL_GROOVE", System.StringComparison.InvariantCulture))
				return WeldTypeEnum.WELD_TYPE_FLARE_BEVEL_GROOVE;
			else if (tsEnumValue.Equals("WELD_TYPE_FLARE_V_GROOVE", System.StringComparison.InvariantCulture))
				return WeldTypeEnum.WELD_TYPE_FLARE_V_GROOVE;
			else if (tsEnumValue.Equals("WELD_TYPE_CORNER_FLANGE", System.StringComparison.InvariantCulture))
				return WeldTypeEnum.WELD_TYPE_CORNER_FLANGE;
			else if (tsEnumValue.Equals("WELD_TYPE_PARTIAL_PENETRATION_SINGLE_BEVEL_BUTT_PLUS_FILLET", System.StringComparison.InvariantCulture))
				return WeldTypeEnum.WELD_TYPE_PARTIAL_PENETRATION_SINGLE_BEVEL_BUTT_PLUS_FILLET;
			else if (tsEnumValue.Equals("WELD_TYPE_PARTIAL_PENETRATION_SQUARE_GROOVE_PLUS_FILLET", System.StringComparison.InvariantCulture))
				return WeldTypeEnum.WELD_TYPE_PARTIAL_PENETRATION_SQUARE_GROOVE_PLUS_FILLET;
			else if (tsEnumValue.Equals("WELD_TYPE_MELT_THROUGH", System.StringComparison.InvariantCulture))
				return WeldTypeEnum.WELD_TYPE_MELT_THROUGH;
			else if (tsEnumValue.Equals("STEEP_FLANKED_BEVEL_GROOVE_SINGLE_V_BUTT", System.StringComparison.InvariantCulture))
				return WeldTypeEnum.STEEP_FLANKED_BEVEL_GROOVE_SINGLE_V_BUTT;
			else if (tsEnumValue.Equals("STEEP_FLANKED_BEVEL_GROOVE_SINGLE_BEVEL_BUTT", System.StringComparison.InvariantCulture))
				return WeldTypeEnum.STEEP_FLANKED_BEVEL_GROOVE_SINGLE_BEVEL_BUTT;
			else if (tsEnumValue.Equals("WELD_TYPE_EDGE", System.StringComparison.InvariantCulture))
				return WeldTypeEnum.WELD_TYPE_EDGE;
			else if (tsEnumValue.Equals("WELD_TYPE_ISO_SURFACING", System.StringComparison.InvariantCulture))
				return WeldTypeEnum.WELD_TYPE_ISO_SURFACING;
			else if (tsEnumValue.Equals("WELD_TYPE_FOLD", System.StringComparison.InvariantCulture))
				return WeldTypeEnum.WELD_TYPE_FOLD;
			else if (tsEnumValue.Equals("WELD_TYPE_INCLINED", System.StringComparison.InvariantCulture))
				return WeldTypeEnum.WELD_TYPE_INCLINED;

            else 
                throw new System.NotImplementedException(tsEnumValue + "- enum value is not implemented");
            
        }
    }


    public enum WeldContourEnum
    {
			WELD_CONTOUR_NONE,
			WELD_CONTOUR_FLUSH,
			WELD_CONTOUR_CONVEX,
			WELD_CONTOUR_CONCAVE        
    }

    public static class WeldContourEnum_
    {
        public static dynamic GetTSObject(WeldContourEnum dynEnum)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.WeldContourEnum");

            switch (dynEnum)
            {
				case WeldContourEnum.WELD_CONTOUR_NONE:
					return System.Enum.Parse(tsType, "WELD_CONTOUR_NONE");
				case WeldContourEnum.WELD_CONTOUR_FLUSH:
					return System.Enum.Parse(tsType, "WELD_CONTOUR_FLUSH");
				case WeldContourEnum.WELD_CONTOUR_CONVEX:
					return System.Enum.Parse(tsType, "WELD_CONTOUR_CONVEX");
				case WeldContourEnum.WELD_CONTOUR_CONCAVE:
					return System.Enum.Parse(tsType, "WELD_CONTOUR_CONCAVE");

                default:
                    throw new System.NotImplementedException(dynEnum.ToString() + "- enum value is not implemented");
            }
        }
    
        public static WeldContourEnum FromTSObject(dynamic tsEnum)
        {
            string tsEnumValue = tsEnum.ToString("G", System.Globalization.CultureInfo.InvariantCulture);
            
			if (tsEnumValue.Equals("WELD_CONTOUR_NONE", System.StringComparison.InvariantCulture))
				return WeldContourEnum.WELD_CONTOUR_NONE;
			else if (tsEnumValue.Equals("WELD_CONTOUR_FLUSH", System.StringComparison.InvariantCulture))
				return WeldContourEnum.WELD_CONTOUR_FLUSH;
			else if (tsEnumValue.Equals("WELD_CONTOUR_CONVEX", System.StringComparison.InvariantCulture))
				return WeldContourEnum.WELD_CONTOUR_CONVEX;
			else if (tsEnumValue.Equals("WELD_CONTOUR_CONCAVE", System.StringComparison.InvariantCulture))
				return WeldContourEnum.WELD_CONTOUR_CONCAVE;

            else 
                throw new System.NotImplementedException(tsEnumValue + "- enum value is not implemented");
            
        }
    }


    public enum WeldFinishEnum
    {
			WELD_FINISH_NONE,
			WELD_FINISH_GRIND,
			WELD_FINISH_MACHINE,
			WELD_FINISH_CHIP,
			WELD_FINISH_FINISHED_WELD,
			WELS_FINISH_SMOOTH_TRANSITION        
    }

    public static class WeldFinishEnum_
    {
        public static dynamic GetTSObject(WeldFinishEnum dynEnum)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.WeldFinishEnum");

            switch (dynEnum)
            {
				case WeldFinishEnum.WELD_FINISH_NONE:
					return System.Enum.Parse(tsType, "WELD_FINISH_NONE");
				case WeldFinishEnum.WELD_FINISH_GRIND:
					return System.Enum.Parse(tsType, "WELD_FINISH_GRIND");
				case WeldFinishEnum.WELD_FINISH_MACHINE:
					return System.Enum.Parse(tsType, "WELD_FINISH_MACHINE");
				case WeldFinishEnum.WELD_FINISH_CHIP:
					return System.Enum.Parse(tsType, "WELD_FINISH_CHIP");
				case WeldFinishEnum.WELD_FINISH_FINISHED_WELD:
					return System.Enum.Parse(tsType, "WELD_FINISH_FINISHED_WELD");
				case WeldFinishEnum.WELS_FINISH_SMOOTH_TRANSITION:
					return System.Enum.Parse(tsType, "WELS_FINISH_SMOOTH_TRANSITION");

                default:
                    throw new System.NotImplementedException(dynEnum.ToString() + "- enum value is not implemented");
            }
        }
    
        public static WeldFinishEnum FromTSObject(dynamic tsEnum)
        {
            string tsEnumValue = tsEnum.ToString("G", System.Globalization.CultureInfo.InvariantCulture);
            
			if (tsEnumValue.Equals("WELD_FINISH_NONE", System.StringComparison.InvariantCulture))
				return WeldFinishEnum.WELD_FINISH_NONE;
			else if (tsEnumValue.Equals("WELD_FINISH_GRIND", System.StringComparison.InvariantCulture))
				return WeldFinishEnum.WELD_FINISH_GRIND;
			else if (tsEnumValue.Equals("WELD_FINISH_MACHINE", System.StringComparison.InvariantCulture))
				return WeldFinishEnum.WELD_FINISH_MACHINE;
			else if (tsEnumValue.Equals("WELD_FINISH_CHIP", System.StringComparison.InvariantCulture))
				return WeldFinishEnum.WELD_FINISH_CHIP;
			else if (tsEnumValue.Equals("WELD_FINISH_FINISHED_WELD", System.StringComparison.InvariantCulture))
				return WeldFinishEnum.WELD_FINISH_FINISHED_WELD;
			else if (tsEnumValue.Equals("WELS_FINISH_SMOOTH_TRANSITION", System.StringComparison.InvariantCulture))
				return WeldFinishEnum.WELS_FINISH_SMOOTH_TRANSITION;

            else 
                throw new System.NotImplementedException(tsEnumValue + "- enum value is not implemented");
            
        }
    }


    public enum WeldElectrodeClassificationEnum
    {
			WELD_ELECTRODE_CLASSIFICATION_NONE,
			WELD_ELECTRODE_CLASSIFICATION_35,
			WELD_ELECTRODE_CLASSIFICATION_42,
			WELD_ELECTRODE_CLASSIFICATION_50,
			WELD_ELECTRODE_CLASSIFICATION_E60XX,
			WELD_ELECTRODE_CLASSIFICATION_E70XX,
			WELD_ELECTRODE_CLASSIFICATION_E80XX,
			WELD_ELECTRODE_CLASSIFICATION_E90XX        
    }

    public static class WeldElectrodeClassificationEnum_
    {
        public static dynamic GetTSObject(WeldElectrodeClassificationEnum dynEnum)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.WeldElectrodeClassificationEnum");

            switch (dynEnum)
            {
				case WeldElectrodeClassificationEnum.WELD_ELECTRODE_CLASSIFICATION_NONE:
					return System.Enum.Parse(tsType, "WELD_ELECTRODE_CLASSIFICATION_NONE");
				case WeldElectrodeClassificationEnum.WELD_ELECTRODE_CLASSIFICATION_35:
					return System.Enum.Parse(tsType, "WELD_ELECTRODE_CLASSIFICATION_35");
				case WeldElectrodeClassificationEnum.WELD_ELECTRODE_CLASSIFICATION_42:
					return System.Enum.Parse(tsType, "WELD_ELECTRODE_CLASSIFICATION_42");
				case WeldElectrodeClassificationEnum.WELD_ELECTRODE_CLASSIFICATION_50:
					return System.Enum.Parse(tsType, "WELD_ELECTRODE_CLASSIFICATION_50");
				case WeldElectrodeClassificationEnum.WELD_ELECTRODE_CLASSIFICATION_E60XX:
					return System.Enum.Parse(tsType, "WELD_ELECTRODE_CLASSIFICATION_E60XX");
				case WeldElectrodeClassificationEnum.WELD_ELECTRODE_CLASSIFICATION_E70XX:
					return System.Enum.Parse(tsType, "WELD_ELECTRODE_CLASSIFICATION_E70XX");
				case WeldElectrodeClassificationEnum.WELD_ELECTRODE_CLASSIFICATION_E80XX:
					return System.Enum.Parse(tsType, "WELD_ELECTRODE_CLASSIFICATION_E80XX");
				case WeldElectrodeClassificationEnum.WELD_ELECTRODE_CLASSIFICATION_E90XX:
					return System.Enum.Parse(tsType, "WELD_ELECTRODE_CLASSIFICATION_E90XX");

                default:
                    throw new System.NotImplementedException(dynEnum.ToString() + "- enum value is not implemented");
            }
        }
    
        public static WeldElectrodeClassificationEnum FromTSObject(dynamic tsEnum)
        {
            string tsEnumValue = tsEnum.ToString("G", System.Globalization.CultureInfo.InvariantCulture);
            
			if (tsEnumValue.Equals("WELD_ELECTRODE_CLASSIFICATION_NONE", System.StringComparison.InvariantCulture))
				return WeldElectrodeClassificationEnum.WELD_ELECTRODE_CLASSIFICATION_NONE;
			else if (tsEnumValue.Equals("WELD_ELECTRODE_CLASSIFICATION_35", System.StringComparison.InvariantCulture))
				return WeldElectrodeClassificationEnum.WELD_ELECTRODE_CLASSIFICATION_35;
			else if (tsEnumValue.Equals("WELD_ELECTRODE_CLASSIFICATION_42", System.StringComparison.InvariantCulture))
				return WeldElectrodeClassificationEnum.WELD_ELECTRODE_CLASSIFICATION_42;
			else if (tsEnumValue.Equals("WELD_ELECTRODE_CLASSIFICATION_50", System.StringComparison.InvariantCulture))
				return WeldElectrodeClassificationEnum.WELD_ELECTRODE_CLASSIFICATION_50;
			else if (tsEnumValue.Equals("WELD_ELECTRODE_CLASSIFICATION_E60XX", System.StringComparison.InvariantCulture))
				return WeldElectrodeClassificationEnum.WELD_ELECTRODE_CLASSIFICATION_E60XX;
			else if (tsEnumValue.Equals("WELD_ELECTRODE_CLASSIFICATION_E70XX", System.StringComparison.InvariantCulture))
				return WeldElectrodeClassificationEnum.WELD_ELECTRODE_CLASSIFICATION_E70XX;
			else if (tsEnumValue.Equals("WELD_ELECTRODE_CLASSIFICATION_E80XX", System.StringComparison.InvariantCulture))
				return WeldElectrodeClassificationEnum.WELD_ELECTRODE_CLASSIFICATION_E80XX;
			else if (tsEnumValue.Equals("WELD_ELECTRODE_CLASSIFICATION_E90XX", System.StringComparison.InvariantCulture))
				return WeldElectrodeClassificationEnum.WELD_ELECTRODE_CLASSIFICATION_E90XX;

            else 
                throw new System.NotImplementedException(tsEnumValue + "- enum value is not implemented");
            
        }
    }


    public enum WeldProcessTypeEnum
    {
			WELD_PROCESS_NONE,
			WELD_PROCESS_SMAW,
			WELD_PROCESS_SAW,
			WELD_PROCESS_GMAW,
			WELD_PROCESS_FCAW,
			WELD_PROCESS_ESW,
			WELD_PROCESS_EGW        
    }

    public static class WeldProcessTypeEnum_
    {
        public static dynamic GetTSObject(WeldProcessTypeEnum dynEnum)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.WeldProcessTypeEnum");

            switch (dynEnum)
            {
				case WeldProcessTypeEnum.WELD_PROCESS_NONE:
					return System.Enum.Parse(tsType, "WELD_PROCESS_NONE");
				case WeldProcessTypeEnum.WELD_PROCESS_SMAW:
					return System.Enum.Parse(tsType, "WELD_PROCESS_SMAW");
				case WeldProcessTypeEnum.WELD_PROCESS_SAW:
					return System.Enum.Parse(tsType, "WELD_PROCESS_SAW");
				case WeldProcessTypeEnum.WELD_PROCESS_GMAW:
					return System.Enum.Parse(tsType, "WELD_PROCESS_GMAW");
				case WeldProcessTypeEnum.WELD_PROCESS_FCAW:
					return System.Enum.Parse(tsType, "WELD_PROCESS_FCAW");
				case WeldProcessTypeEnum.WELD_PROCESS_ESW:
					return System.Enum.Parse(tsType, "WELD_PROCESS_ESW");
				case WeldProcessTypeEnum.WELD_PROCESS_EGW:
					return System.Enum.Parse(tsType, "WELD_PROCESS_EGW");

                default:
                    throw new System.NotImplementedException(dynEnum.ToString() + "- enum value is not implemented");
            }
        }
    
        public static WeldProcessTypeEnum FromTSObject(dynamic tsEnum)
        {
            string tsEnumValue = tsEnum.ToString("G", System.Globalization.CultureInfo.InvariantCulture);
            
			if (tsEnumValue.Equals("WELD_PROCESS_NONE", System.StringComparison.InvariantCulture))
				return WeldProcessTypeEnum.WELD_PROCESS_NONE;
			else if (tsEnumValue.Equals("WELD_PROCESS_SMAW", System.StringComparison.InvariantCulture))
				return WeldProcessTypeEnum.WELD_PROCESS_SMAW;
			else if (tsEnumValue.Equals("WELD_PROCESS_SAW", System.StringComparison.InvariantCulture))
				return WeldProcessTypeEnum.WELD_PROCESS_SAW;
			else if (tsEnumValue.Equals("WELD_PROCESS_GMAW", System.StringComparison.InvariantCulture))
				return WeldProcessTypeEnum.WELD_PROCESS_GMAW;
			else if (tsEnumValue.Equals("WELD_PROCESS_FCAW", System.StringComparison.InvariantCulture))
				return WeldProcessTypeEnum.WELD_PROCESS_FCAW;
			else if (tsEnumValue.Equals("WELD_PROCESS_ESW", System.StringComparison.InvariantCulture))
				return WeldProcessTypeEnum.WELD_PROCESS_ESW;
			else if (tsEnumValue.Equals("WELD_PROCESS_EGW", System.StringComparison.InvariantCulture))
				return WeldProcessTypeEnum.WELD_PROCESS_EGW;

            else 
                throw new System.NotImplementedException(tsEnumValue + "- enum value is not implemented");
            
        }
    }


    public enum WeldNDTInspectionEnum
    {
			WELD_NDT_INSPECTION_NONE,
			WELD_NDT_INSPECTION_A,
			WELD_NDT_INSPECTION_B,
			WELD_NDT_INSPECTION_C,
			WELD_NDT_INSPECTION_D,
			WELD_NDT_INSPECTION_E        
    }

    public static class WeldNDTInspectionEnum_
    {
        public static dynamic GetTSObject(WeldNDTInspectionEnum dynEnum)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.WeldNDTInspectionEnum");

            switch (dynEnum)
            {
				case WeldNDTInspectionEnum.WELD_NDT_INSPECTION_NONE:
					return System.Enum.Parse(tsType, "WELD_NDT_INSPECTION_NONE");
				case WeldNDTInspectionEnum.WELD_NDT_INSPECTION_A:
					return System.Enum.Parse(tsType, "WELD_NDT_INSPECTION_A");
				case WeldNDTInspectionEnum.WELD_NDT_INSPECTION_B:
					return System.Enum.Parse(tsType, "WELD_NDT_INSPECTION_B");
				case WeldNDTInspectionEnum.WELD_NDT_INSPECTION_C:
					return System.Enum.Parse(tsType, "WELD_NDT_INSPECTION_C");
				case WeldNDTInspectionEnum.WELD_NDT_INSPECTION_D:
					return System.Enum.Parse(tsType, "WELD_NDT_INSPECTION_D");
				case WeldNDTInspectionEnum.WELD_NDT_INSPECTION_E:
					return System.Enum.Parse(tsType, "WELD_NDT_INSPECTION_E");

                default:
                    throw new System.NotImplementedException(dynEnum.ToString() + "- enum value is not implemented");
            }
        }
    
        public static WeldNDTInspectionEnum FromTSObject(dynamic tsEnum)
        {
            string tsEnumValue = tsEnum.ToString("G", System.Globalization.CultureInfo.InvariantCulture);
            
			if (tsEnumValue.Equals("WELD_NDT_INSPECTION_NONE", System.StringComparison.InvariantCulture))
				return WeldNDTInspectionEnum.WELD_NDT_INSPECTION_NONE;
			else if (tsEnumValue.Equals("WELD_NDT_INSPECTION_A", System.StringComparison.InvariantCulture))
				return WeldNDTInspectionEnum.WELD_NDT_INSPECTION_A;
			else if (tsEnumValue.Equals("WELD_NDT_INSPECTION_B", System.StringComparison.InvariantCulture))
				return WeldNDTInspectionEnum.WELD_NDT_INSPECTION_B;
			else if (tsEnumValue.Equals("WELD_NDT_INSPECTION_C", System.StringComparison.InvariantCulture))
				return WeldNDTInspectionEnum.WELD_NDT_INSPECTION_C;
			else if (tsEnumValue.Equals("WELD_NDT_INSPECTION_D", System.StringComparison.InvariantCulture))
				return WeldNDTInspectionEnum.WELD_NDT_INSPECTION_D;
			else if (tsEnumValue.Equals("WELD_NDT_INSPECTION_E", System.StringComparison.InvariantCulture))
				return WeldNDTInspectionEnum.WELD_NDT_INSPECTION_E;

            else 
                throw new System.NotImplementedException(tsEnumValue + "- enum value is not implemented");
            
        }
    }


    public enum WeldIntermittentTypeEnum
    {
			CONTINUOUS,
			CHAIN_INTERMITTENT,
			STAGGERED_INTERMITTENT        
    }

    public static class WeldIntermittentTypeEnum_
    {
        public static dynamic GetTSObject(WeldIntermittentTypeEnum dynEnum)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.WeldIntermittentTypeEnum");

            switch (dynEnum)
            {
				case WeldIntermittentTypeEnum.CONTINUOUS:
					return System.Enum.Parse(tsType, "CONTINUOUS");
				case WeldIntermittentTypeEnum.CHAIN_INTERMITTENT:
					return System.Enum.Parse(tsType, "CHAIN_INTERMITTENT");
				case WeldIntermittentTypeEnum.STAGGERED_INTERMITTENT:
					return System.Enum.Parse(tsType, "STAGGERED_INTERMITTENT");

                default:
                    throw new System.NotImplementedException(dynEnum.ToString() + "- enum value is not implemented");
            }
        }
    
        public static WeldIntermittentTypeEnum FromTSObject(dynamic tsEnum)
        {
            string tsEnumValue = tsEnum.ToString("G", System.Globalization.CultureInfo.InvariantCulture);
            
			if (tsEnumValue.Equals("CONTINUOUS", System.StringComparison.InvariantCulture))
				return WeldIntermittentTypeEnum.CONTINUOUS;
			else if (tsEnumValue.Equals("CHAIN_INTERMITTENT", System.StringComparison.InvariantCulture))
				return WeldIntermittentTypeEnum.CHAIN_INTERMITTENT;
			else if (tsEnumValue.Equals("STAGGERED_INTERMITTENT", System.StringComparison.InvariantCulture))
				return WeldIntermittentTypeEnum.STAGGERED_INTERMITTENT;

            else 
                throw new System.NotImplementedException(tsEnumValue + "- enum value is not implemented");
            
        }
    }


    public enum WeldPlacementTypeEnum
    {
			PLACEMENT_AUTO,
			PLACEMENT_MAIN,
			PLACEMENT_SECONDARY        
    }

    public static class WeldPlacementTypeEnum_
    {
        public static dynamic GetTSObject(WeldPlacementTypeEnum dynEnum)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.WeldPlacementTypeEnum");

            switch (dynEnum)
            {
				case WeldPlacementTypeEnum.PLACEMENT_AUTO:
					return System.Enum.Parse(tsType, "PLACEMENT_AUTO");
				case WeldPlacementTypeEnum.PLACEMENT_MAIN:
					return System.Enum.Parse(tsType, "PLACEMENT_MAIN");
				case WeldPlacementTypeEnum.PLACEMENT_SECONDARY:
					return System.Enum.Parse(tsType, "PLACEMENT_SECONDARY");

                default:
                    throw new System.NotImplementedException(dynEnum.ToString() + "- enum value is not implemented");
            }
        }
    
        public static WeldPlacementTypeEnum FromTSObject(dynamic tsEnum)
        {
            string tsEnumValue = tsEnum.ToString("G", System.Globalization.CultureInfo.InvariantCulture);
            
			if (tsEnumValue.Equals("PLACEMENT_AUTO", System.StringComparison.InvariantCulture))
				return WeldPlacementTypeEnum.PLACEMENT_AUTO;
			else if (tsEnumValue.Equals("PLACEMENT_MAIN", System.StringComparison.InvariantCulture))
				return WeldPlacementTypeEnum.PLACEMENT_MAIN;
			else if (tsEnumValue.Equals("PLACEMENT_SECONDARY", System.StringComparison.InvariantCulture))
				return WeldPlacementTypeEnum.PLACEMENT_SECONDARY;

            else 
                throw new System.NotImplementedException(tsEnumValue + "- enum value is not implemented");
            
        }
    }


    public enum WeldPreparationTypeEnum
    {
			PREPARATION_NONE,
			PREPARATION_AUTO,
			PREPARATION_MAIN,
			PREPARATION_SECONDARY        
    }

    public static class WeldPreparationTypeEnum_
    {
        public static dynamic GetTSObject(WeldPreparationTypeEnum dynEnum)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.WeldPreparationTypeEnum");

            switch (dynEnum)
            {
				case WeldPreparationTypeEnum.PREPARATION_NONE:
					return System.Enum.Parse(tsType, "PREPARATION_NONE");
				case WeldPreparationTypeEnum.PREPARATION_AUTO:
					return System.Enum.Parse(tsType, "PREPARATION_AUTO");
				case WeldPreparationTypeEnum.PREPARATION_MAIN:
					return System.Enum.Parse(tsType, "PREPARATION_MAIN");
				case WeldPreparationTypeEnum.PREPARATION_SECONDARY:
					return System.Enum.Parse(tsType, "PREPARATION_SECONDARY");

                default:
                    throw new System.NotImplementedException(dynEnum.ToString() + "- enum value is not implemented");
            }
        }
    
        public static WeldPreparationTypeEnum FromTSObject(dynamic tsEnum)
        {
            string tsEnumValue = tsEnum.ToString("G", System.Globalization.CultureInfo.InvariantCulture);
            
			if (tsEnumValue.Equals("PREPARATION_NONE", System.StringComparison.InvariantCulture))
				return WeldPreparationTypeEnum.PREPARATION_NONE;
			else if (tsEnumValue.Equals("PREPARATION_AUTO", System.StringComparison.InvariantCulture))
				return WeldPreparationTypeEnum.PREPARATION_AUTO;
			else if (tsEnumValue.Equals("PREPARATION_MAIN", System.StringComparison.InvariantCulture))
				return WeldPreparationTypeEnum.PREPARATION_MAIN;
			else if (tsEnumValue.Equals("PREPARATION_SECONDARY", System.StringComparison.InvariantCulture))
				return WeldPreparationTypeEnum.PREPARATION_SECONDARY;

            else 
                throw new System.NotImplementedException(tsEnumValue + "- enum value is not implemented");
            
        }
    }



    }

}
    
