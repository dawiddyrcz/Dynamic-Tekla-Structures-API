//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model.ClashChecker
{

    public sealed class ClashChekerEvent 
    {

        

        dynamic clashchekerevent;
        
        public ClashChekerEvent()
        {
            this.clashchekerevent =  TSActivator.CreateInstance("Tekla.Structures.Model.ClashChecker.ClashChekerEvent");
        }

        public ClashChekerEvent(dynamic tsObject)
        {
            this.clashchekerevent = tsObject;

        }


        public dynamic GetTSObject() => clashchekerevent;

		public Dynamic.Tekla.Structures.Model.ClashCheckHandler GetClashCheckHandler()
			 => new Dynamic.Tekla.Structures.Model.ClashCheckHandler(clashchekerevent.GetClashCheckHandler());




    public sealed class ClashCheckDoneDelegate 
    {

		public System.Reflection.MethodInfo Method
		{
			get => clashcheckdonedelegate.Method;
			set { clashcheckdonedelegate.Method = value; }
		}

		public System.Object Target
		{
			get => clashcheckdonedelegate.Target;
			set { clashcheckdonedelegate.Target = value; }
		}

        

        dynamic clashcheckdonedelegate;
        
        public ClashCheckDoneDelegate()
        {
            this.clashcheckdonedelegate =  TSActivator.CreateInstance("Tekla.Structures.Model.ClashChecker.ClashCheckDoneDelegate");
        }

        public ClashCheckDoneDelegate(dynamic tsObject)
        {
            this.clashcheckdonedelegate = tsObject;
			this.Method = clashcheckdonedelegate.Method;
			this.Target = clashcheckdonedelegate.Target;

        }


        public dynamic GetTSObject() => clashcheckdonedelegate;

		public void Invoke(System.Int32 nClashes)
			 => clashcheckdonedelegate.Invoke(nClashes);

		public void EndInvoke(System.IAsyncResult result)
			 => clashcheckdonedelegate.EndInvoke(result);

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => clashcheckdonedelegate.GetObjectData(info, context);

		public System.Delegate GetInvocationList()
			 => clashcheckdonedelegate.GetInvocationList();

		public System.Object DynamicInvoke(System.Object args)
			 => clashcheckdonedelegate.DynamicInvoke(args);

		public System.Object Clone()
			 => clashcheckdonedelegate.Clone();





    }


    public sealed class ClashDetectedDelegate 
    {

		public System.Reflection.MethodInfo Method
		{
			get => clashdetecteddelegate.Method;
			set { clashdetecteddelegate.Method = value; }
		}

		public System.Object Target
		{
			get => clashdetecteddelegate.Target;
			set { clashdetecteddelegate.Target = value; }
		}

        

        dynamic clashdetecteddelegate;
        
        public ClashDetectedDelegate()
        {
            this.clashdetecteddelegate =  TSActivator.CreateInstance("Tekla.Structures.Model.ClashChecker.ClashDetectedDelegate");
        }

        public ClashDetectedDelegate(dynamic tsObject)
        {
            this.clashdetecteddelegate = tsObject;
			this.Method = clashdetecteddelegate.Method;
			this.Target = clashdetecteddelegate.Target;

        }


        public dynamic GetTSObject() => clashdetecteddelegate;

		public void Invoke(Dynamic.Tekla.Structures.Model.ClashCheckData ClashData)
			 => clashdetecteddelegate.Invoke(ClashData.GetTSObject());

		public void EndInvoke(System.IAsyncResult result)
			 => clashdetecteddelegate.EndInvoke(result);

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => clashdetecteddelegate.GetObjectData(info, context);

		public System.Delegate GetInvocationList()
			 => clashdetecteddelegate.GetInvocationList();

		public System.Object DynamicInvoke(System.Object args)
			 => clashdetecteddelegate.DynamicInvoke(args);

		public System.Object Clone()
			 => clashdetecteddelegate.Clone();





    }



    }

}
    
