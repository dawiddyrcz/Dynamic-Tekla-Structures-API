//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class Connection 
    {

		public System.Int32 Class
		{
			get => connection.Class;
			set { connection.Class = value; }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Vector UpVector
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Vector(connection.UpVector.GetTSObject());
			set { connection.UpVector = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.AutoDirectionTypeEnum AutoDirectionType
		{
			get => Dynamic.Tekla.Structures.AutoDirectionTypeEnum_.FromTSObject(connection.AutoDirectionType);
			set { connection.AutoDirectionType = Dynamic.Tekla.Structures.AutoDirectionTypeEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.PositionTypeEnum PositionType
		{
			get => Dynamic.Tekla.Structures.PositionTypeEnum_.FromTSObject(connection.PositionType);
			set { connection.PositionType = Dynamic.Tekla.Structures.PositionTypeEnum_.FromTSObject(value); }
		}

		public System.String Code
		{
			get => connection.Code;
			set { connection.Code = value; }
		}

		public Dynamic.Tekla.Structures.ConnectionStatusEnum Status
		{
			get => Dynamic.Tekla.Structures.ConnectionStatusEnum_.FromTSObject(connection.Status);
			set { connection.Status = Dynamic.Tekla.Structures.ConnectionStatusEnum_.FromTSObject(value); }
		}

		public System.String Name
		{
			get => connection.Name;
			set { connection.Name = value; }
		}

		public System.Int32 Number
		{
			get => connection.Number;
			set { connection.Number = value; }
		}

		public System.DateTime ModificationTime
		{
			get => connection.ModificationTime;
			set { connection.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => connection.IsUpToDate;
			set { connection.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => new Dynamic.Tekla.Structures.Identifier(connection.Identifier.GetTSObject());
			set { connection.Identifier = value.GetTSObject(); }
		}

        

        dynamic connection;
        
        public Connection()
        {
            this.connection =  TSActivator.CreateInstance("Tekla.Structures.Model.Connection");
        }

        public Connection(dynamic tsObject)
        {
            this.connection = tsObject;
			this.Class = connection.Class;
			this.UpVector = new Dynamic.Tekla.Structures.Geometry3d.Vector(connection.UpVector);
			this.AutoDirectionType = Dynamic.Tekla.Structures.AutoDirectionTypeEnum_.FromTSObject(connection.AutoDirectionType);
			this.PositionType = Dynamic.Tekla.Structures.PositionTypeEnum_.FromTSObject(connection.PositionType);
			this.Code = connection.Code;
			this.Status = Dynamic.Tekla.Structures.ConnectionStatusEnum_.FromTSObject(connection.Status);
			this.Name = connection.Name;
			this.Number = connection.Number;
			this.ModificationTime = connection.ModificationTime;
			this.IsUpToDate = connection.IsUpToDate;
			this.Identifier = new Dynamic.Tekla.Structures.Identifier(connection.Identifier);

        }


        public dynamic GetTSObject() => connection;

		public System.Boolean SetPrimaryObject(Dynamic.Tekla.Structures.Model.ModelObject M)
			 => connection.SetPrimaryObject(M.GetTSObject());

		public Dynamic.Tekla.Structures.Model.ModelObject GetPrimaryObject()
			 => new Dynamic.Tekla.Structures.Model.ModelObject(connection.GetPrimaryObject());

		public System.Boolean SetSecondaryObject(Dynamic.Tekla.Structures.Model.ModelObject M)
			 => connection.SetSecondaryObject(M.GetTSObject());

		public System.Boolean SetSecondaryObjects(System.Collections.ArrayList Secondaries)
			 => connection.SetSecondaryObjects(Secondaries);

		public System.Collections.ArrayList GetSecondaryObjects()
			 => connection.GetSecondaryObjects();

		public System.Boolean Insert()
			 => connection.Insert();

		public System.Boolean Select()
			 => connection.Select();

		public System.Boolean Modify()
			 => connection.Modify();

		public System.Boolean Delete()
			 => connection.Delete();

		public void SetAttribute(System.String AttrName, System.String StrValue)
			 => connection.SetAttribute(AttrName, StrValue);

		public void SetAttribute(System.String AttrName, System.Int32 Value)
			 => connection.SetAttribute(AttrName, Value);

		public void SetAttribute(System.String AttrName, System.Double DValue)
			 => connection.SetAttribute(AttrName, DValue);

		public System.Boolean GetAttribute(System.String AttrName, System.String StrValue)
			 => connection.GetAttribute(AttrName, StrValue);

		public System.Boolean GetAttribute(System.String AttrName, System.Int32 Value)
			 => connection.GetAttribute(AttrName, Value);

		public System.Boolean GetAttribute(System.String AttrName, System.Double DValue)
			 => connection.GetAttribute(AttrName, DValue);

		public System.Boolean LoadAttributesFromFile(System.String Filename)
			 => connection.LoadAttributesFromFile(Filename);

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(connection.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => new Dynamic.Tekla.Structures.Model.BaseComponent(connection.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(connection.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(System.Collections.Hashtable values)
			 => connection.GetAllUserProperties(values);

		public System.Boolean GetIntegerUserProperties(System.Collections.Hashtable values)
			 => connection.GetIntegerUserProperties(values);

		public System.Boolean GetDoubleUserProperties(System.Collections.Hashtable values)
			 => connection.GetDoubleUserProperties(values);

		public System.Boolean GetStringUserProperties(System.Collections.Hashtable values)
			 => connection.GetStringUserProperties(values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, System.Collections.Hashtable values)
			 => connection.GetAllReportProperties(stringNames, doubleNames, integerNames, values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => connection.GetIntegerReportProperties(names, values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => connection.GetDoubleReportProperties(names, values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => connection.GetStringReportProperties(names, values);

		public System.Boolean GetUserProperty(System.String name, System.String value)
			 => connection.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.String value)
			 => connection.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Double value)
			 => connection.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Double value)
			 => connection.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Int32 value)
			 => connection.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Int32 value)
			 => connection.GetReportProperty(name, value);

		public System.Boolean GetDynamicStringProperty(System.String name, System.String value)
			 => connection.GetDynamicStringProperty(name, value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => connection.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => connection.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => connection.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => connection.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(connection.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => connection.SetPhase(phase.GetTSObject());

		public System.Boolean GetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => connection.GetPhase(phase.GetTSObject());

		public System.Boolean SetLabel(System.String label)
			 => connection.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => connection.CompareTo(obj);





    }

}
    
