//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class ConnectiveGeometryException 
    {

		public System.String Message
		{
			get => connectivegeometryexception.Message;
			set { connectivegeometryexception.Message = value; }
		}

		public System.Collections.IDictionary Data
		{
			get => connectivegeometryexception.Data;
			set { connectivegeometryexception.Data = value; }
		}

		public System.Exception InnerException
		{
			get => connectivegeometryexception.InnerException;
			set { connectivegeometryexception.InnerException = value; }
		}

		public System.Reflection.MethodBase TargetSite
		{
			get => connectivegeometryexception.TargetSite;
			set { connectivegeometryexception.TargetSite = value; }
		}

		public System.String StackTrace
		{
			get => connectivegeometryexception.StackTrace;
			set { connectivegeometryexception.StackTrace = value; }
		}

		public System.String HelpLink
		{
			get => connectivegeometryexception.HelpLink;
			set { connectivegeometryexception.HelpLink = value; }
		}

		public System.String Source
		{
			get => connectivegeometryexception.Source;
			set { connectivegeometryexception.Source = value; }
		}

		public System.Int32 HResult
		{
			get => connectivegeometryexception.HResult;
			set { connectivegeometryexception.HResult = value; }
		}

        

        dynamic connectivegeometryexception;
        
        public ConnectiveGeometryException()
        {
            this.connectivegeometryexception =  new Tekla.Structures.Model.ConnectiveGeometryException();
        }

        public ConnectiveGeometryException(dynamic tsObject)
        {
            this.connectivegeometryexception = tsObject;
			this.Message = connectivegeometryexception.Message;
			this.Data = connectivegeometryexception.Data;
			this.InnerException = connectivegeometryexception.InnerException;
			this.TargetSite = connectivegeometryexception.TargetSite;
			this.StackTrace = connectivegeometryexception.StackTrace;
			this.HelpLink = connectivegeometryexception.HelpLink;
			this.Source = connectivegeometryexception.Source;
			this.HResult = connectivegeometryexception.HResult;

        }


        public dynamic GetTSObject() => connectivegeometryexception;

		public System.Exception GetBaseException()
			 => connectivegeometryexception.GetBaseException();

		public System.String ToString()
			 => connectivegeometryexception.ToString();

		public System.Type GetType()
			 => connectivegeometryexception.GetType();

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => connectivegeometryexception.GetObjectData(info, context);

		public System.Boolean Equals(System.Object obj)
			 => connectivegeometryexception.Equals(obj);

		public System.Int32 GetHashCode()
			 => connectivegeometryexception.GetHashCode();

		public System.Type GetType()
			 => connectivegeometryexception.GetType();





    }

}
    
