//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class ContourPlate 
    {

		public Dynamic.Tekla.Structures.Model.ContourPlate.ContourPlateTypeEnum Type
		{
			get => Dynamic.Tekla.Structures.Model.ContourPlate.ContourPlateTypeEnum_.FromTSObject(contourplate.Type);
			set { contourplate.Type = Dynamic.Tekla.Structures.Model.ContourPlate.ContourPlateTypeEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.Contour Contour
		{
			get => new Dynamic.Tekla.Structures.Model.Contour(contourplate.Contour.GetTSObject());
			set { contourplate.Contour = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.Profile Profile
		{
			get => new Dynamic.Tekla.Structures.Model.Profile(contourplate.Profile.GetTSObject());
			set { contourplate.Profile = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.Material Material
		{
			get => new Dynamic.Tekla.Structures.Model.Material(contourplate.Material.GetTSObject());
			set { contourplate.Material = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.DeformingData DeformingData
		{
			get => new Dynamic.Tekla.Structures.Model.DeformingData(contourplate.DeformingData.GetTSObject());
			set { contourplate.DeformingData = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.NumberingSeries PartNumber
		{
			get => new Dynamic.Tekla.Structures.Model.NumberingSeries(contourplate.PartNumber.GetTSObject());
			set { contourplate.PartNumber = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.NumberingSeries AssemblyNumber
		{
			get => new Dynamic.Tekla.Structures.Model.NumberingSeries(contourplate.AssemblyNumber.GetTSObject());
			set { contourplate.AssemblyNumber = value.GetTSObject(); }
		}

		public System.String Name
		{
			get => contourplate.Name;
			set { contourplate.Name = value; }
		}

		public System.String Class
		{
			get => contourplate.Class;
			set { contourplate.Class = value; }
		}

		public System.String Finish
		{
			get => contourplate.Finish;
			set { contourplate.Finish = value; }
		}

		public Dynamic.Tekla.Structures.Model.Part.CastUnitTypeEnum CastUnitType
		{
			get => Dynamic.Tekla.Structures.Model.Part.CastUnitTypeEnum_.FromTSObject(contourplate.CastUnitType);
			set { contourplate.CastUnitType = Dynamic.Tekla.Structures.Model.Part.CastUnitTypeEnum_.FromTSObject(value); }
		}

		public System.Int32 PourPhase
		{
			get => contourplate.PourPhase;
			set { contourplate.PourPhase = value; }
		}

		public Dynamic.Tekla.Structures.Model.Position Position
		{
			get => new Dynamic.Tekla.Structures.Model.Position(contourplate.Position.GetTSObject());
			set { contourplate.Position = value.GetTSObject(); }
		}

		public System.DateTime ModificationTime
		{
			get => contourplate.ModificationTime;
			set { contourplate.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => contourplate.IsUpToDate;
			set { contourplate.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => new Dynamic.Tekla.Structures.Identifier(contourplate.Identifier.GetTSObject());
			set { contourplate.Identifier = value.GetTSObject(); }
		}

        

        dynamic contourplate;
        
        public ContourPlate()
        {
            this.contourplate =  new Tekla.Structures.Model.ContourPlate();
        }

        public ContourPlate(dynamic tsObject)
        {
            this.contourplate = tsObject;
			this.Type = Dynamic.Tekla.Structures.Model.ContourPlate.ContourPlateTypeEnum_.FromTSObject(contourplate.Type);
			this.Contour = new Dynamic.Tekla.Structures.Model.Contour(contourplate.Contour);
			this.Profile = new Dynamic.Tekla.Structures.Model.Profile(contourplate.Profile);
			this.Material = new Dynamic.Tekla.Structures.Model.Material(contourplate.Material);
			this.DeformingData = new Dynamic.Tekla.Structures.Model.DeformingData(contourplate.DeformingData);
			this.PartNumber = new Dynamic.Tekla.Structures.Model.NumberingSeries(contourplate.PartNumber);
			this.AssemblyNumber = new Dynamic.Tekla.Structures.Model.NumberingSeries(contourplate.AssemblyNumber);
			this.Name = contourplate.Name;
			this.Class = contourplate.Class;
			this.Finish = contourplate.Finish;
			this.CastUnitType = Dynamic.Tekla.Structures.Model.Part.CastUnitTypeEnum_.FromTSObject(contourplate.CastUnitType);
			this.PourPhase = contourplate.PourPhase;
			this.Position = new Dynamic.Tekla.Structures.Model.Position(contourplate.Position);
			this.ModificationTime = contourplate.ModificationTime;
			this.IsUpToDate = contourplate.IsUpToDate;
			this.Identifier = new Dynamic.Tekla.Structures.Identifier(contourplate.Identifier);

        }


        public dynamic GetTSObject() => contourplate;

		public System.Boolean AddContourPoint(Dynamic.Tekla.Structures.Model.ContourPoint contourPoint)
			 => contourplate.AddContourPoint(contourPoint.GetTSObject());

		public System.Boolean Insert()
			 => contourplate.Insert();

		public System.Boolean Select()
			 => contourplate.Select();

		public System.Boolean Modify()
			 => contourplate.Modify();

		public System.Boolean Delete()
			 => contourplate.Delete();

		public Dynamic.Tekla.Structures.Model.Solid GetSolid()
			 => new Dynamic.Tekla.Structures.Model.Solid(contourplate.GetSolid());

		public Dynamic.Tekla.Structures.Model.Solid GetSolid(Dynamic.Tekla.Structures.Model.Solid.SolidCreationTypeEnum solidCreationType)
			 => new Dynamic.Tekla.Structures.Model.Solid(contourplate.GetSolid(solidCreationType.GetTSObject()));

		public Dynamic.Tekla.Structures.Model.Solid GetSolid(Dynamic.Tekla.Structures.Forming.FormingStates formingStates)
			 => new Dynamic.Tekla.Structures.Model.Solid(contourplate.GetSolid(formingStates.GetTSObject()));

		public Dynamic.Tekla.Structures.Model.Assembly GetAssembly()
			 => new Dynamic.Tekla.Structures.Model.Assembly(contourplate.GetAssembly());

		public System.String GetPartMark()
			 => contourplate.GetPartMark();

		public System.Collections.ArrayList GetCenterLine(System.Boolean withCutsFittings)
			 => contourplate.GetCenterLine(withCutsFittings);

		public System.Collections.ArrayList GetReferenceLine(System.Boolean withCutsFittings)
			 => contourplate.GetReferenceLine(withCutsFittings);

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetComponents()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(contourplate.GetComponents());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetBooleans()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(contourplate.GetBooleans());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetBolts()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(contourplate.GetBolts());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetWelds()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(contourplate.GetWelds());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetReinforcements()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(contourplate.GetReinforcements());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetSurfaceTreatments()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(contourplate.GetSurfaceTreatments());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetSurfaceObjects()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(contourplate.GetSurfaceObjects());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetPours()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(contourplate.GetPours());

		public System.Boolean CompareTo(Dynamic.Tekla.Structures.Model.Part partToCompare)
			 => contourplate.CompareTo(partToCompare.GetTSObject());

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetDSTVCoordinateSystem()
			 => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(contourplate.GetDSTVCoordinateSystem());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(contourplate.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => new Dynamic.Tekla.Structures.Model.BaseComponent(contourplate.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(contourplate.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(ref System.Collections.Hashtable values)
			 => contourplate.GetAllUserProperties(ref values);

		public System.Boolean GetIntegerUserProperties(ref System.Collections.Hashtable values)
			 => contourplate.GetIntegerUserProperties(ref values);

		public System.Boolean GetDoubleUserProperties(ref System.Collections.Hashtable values)
			 => contourplate.GetDoubleUserProperties(ref values);

		public System.Boolean GetStringUserProperties(ref System.Collections.Hashtable values)
			 => contourplate.GetStringUserProperties(ref values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, ref System.Collections.Hashtable values)
			 => contourplate.GetAllReportProperties(stringNames, doubleNames, integerNames, ref values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => contourplate.GetIntegerReportProperties(names, ref values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => contourplate.GetDoubleReportProperties(names, ref values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => contourplate.GetStringReportProperties(names, ref values);

		public System.Boolean GetUserProperty(System.String name, ref System.String value)
			 => contourplate.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.String value)
			 => contourplate.GetReportProperty(name, ref value);

		public System.Boolean GetUserProperty(System.String name, ref System.Double value)
			 => contourplate.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.Double value)
			 => contourplate.GetReportProperty(name, ref value);

		public System.Boolean GetUserProperty(System.String name, ref System.Int32 value)
			 => contourplate.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.Int32 value)
			 => contourplate.GetReportProperty(name, ref value);

		public System.Boolean GetDynamicStringProperty(System.String name, ref System.String value)
			 => contourplate.GetDynamicStringProperty(name, ref value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => contourplate.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => contourplate.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => contourplate.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => contourplate.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(contourplate.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => contourplate.SetPhase(phase.GetTSObject());

		public System.Boolean GetPhase(ref Dynamic.Tekla.Structures.Model.Phase phase)
			 => contourplate.GetPhase(ref phase.GetTSObject());

		public System.Boolean SetLabel(System.String label)
			 => contourplate.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => contourplate.CompareTo(obj);




    public enum ContourPlateTypeEnum
    {
			UNKNOWN,
			PLATE,
			SLAB        
    }

    public static class ContourPlateTypeEnum_
    {
        public static dynamic GetTSObject(ContourPlateTypeEnum dynEnum)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.ContourPlateTypeEnum");

            switch (dynEnum)
            {
				case ContourPlateTypeEnum.UNKNOWN:
					return System.Enum.Parse(tsType, "UNKNOWN");
				case ContourPlateTypeEnum.PLATE:
					return System.Enum.Parse(tsType, "PLATE");
				case ContourPlateTypeEnum.SLAB:
					return System.Enum.Parse(tsType, "SLAB");

                default:
                    throw new System.NotImplementedException(dynEnum.ToString() + "- enum value is not implemented");
            }
        }
    
        public static ContourPlateTypeEnum FromTSObject(dynamic tsEnum)
        {
            string tsEnumValue = tsEnum.ToString("G", System.Globalization.CultureInfo.InvariantCulture);
            
			if (tsEnumValue.Equals("UNKNOWN", System.StringComparison.InvariantCulture))
				return ContourPlateTypeEnum.UNKNOWN;
			else if (tsEnumValue.Equals("PLATE", System.StringComparison.InvariantCulture))
				return ContourPlateTypeEnum.PLATE;
			else if (tsEnumValue.Equals("SLAB", System.StringComparison.InvariantCulture))
				return ContourPlateTypeEnum.SLAB;

            else 
                throw new System.NotImplementedException(tsEnumValue + "- enum value is not implemented");
            
        }
    }



    }

}
    
