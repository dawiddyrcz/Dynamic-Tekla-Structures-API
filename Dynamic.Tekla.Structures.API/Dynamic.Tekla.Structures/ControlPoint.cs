//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class ControlPoint 
    {

		public Dynamic.Tekla.Structures.Geometry3d.Point Point
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Point(controlpoint.Point.GetTSObject());
			set { controlpoint.Point = value.GetTSObject(); }
		}

		public System.Nullable<System.DateTime> ModificationTime
		{
			get => controlpoint.ModificationTime;
			set { controlpoint.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => controlpoint.IsUpToDate;
			set { controlpoint.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => new Dynamic.Tekla.Structures.Identifier(controlpoint.Identifier.GetTSObject());
			set { controlpoint.Identifier = value.GetTSObject(); }
		}

        

        dynamic controlpoint;
        
        public ControlPoint()
        {
            this.controlpoint =  new Tekla.Structures.Model.ControlPoint();
        }

        public ControlPoint(dynamic tsObject)
        {
            this.controlpoint = tsObject;
			this.Point = new Dynamic.Tekla.Structures.Geometry3d.Point(controlpoint.Point);
			this.ModificationTime = controlpoint.ModificationTime;
			this.IsUpToDate = controlpoint.IsUpToDate;
			this.Identifier = new Dynamic.Tekla.Structures.Identifier(controlpoint.Identifier);

        }


        public dynamic GetTSObject() => controlpoint;

		public System.Boolean Insert()
			 => controlpoint.Insert();

		public System.Boolean Select()
			 => controlpoint.Select();

		public System.Boolean Modify()
			 => controlpoint.Modify();

		public System.Boolean Delete()
			 => controlpoint.Delete();

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(controlpoint.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => new Dynamic.Tekla.Structures.Model.BaseComponent(controlpoint.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(controlpoint.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(ref System.Collections.Hashtable values)
			 => controlpoint.GetAllUserProperties(ref values);

		public System.Boolean GetIntegerUserProperties(ref System.Collections.Hashtable values)
			 => controlpoint.GetIntegerUserProperties(ref values);

		public System.Boolean GetDoubleUserProperties(ref System.Collections.Hashtable values)
			 => controlpoint.GetDoubleUserProperties(ref values);

		public System.Boolean GetStringUserProperties(ref System.Collections.Hashtable values)
			 => controlpoint.GetStringUserProperties(ref values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, ref System.Collections.Hashtable values)
			 => controlpoint.GetAllReportProperties(stringNames, doubleNames, integerNames, ref values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => controlpoint.GetIntegerReportProperties(names, ref values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => controlpoint.GetDoubleReportProperties(names, ref values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => controlpoint.GetStringReportProperties(names, ref values);

		public System.Boolean GetUserProperty(System.String name, ref System.String value)
			 => controlpoint.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.String value)
			 => controlpoint.GetReportProperty(name, ref value);

		public System.Boolean GetUserProperty(System.String name, ref System.Double value)
			 => controlpoint.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.Double value)
			 => controlpoint.GetReportProperty(name, ref value);

		public System.Boolean GetUserProperty(System.String name, ref System.Int32 value)
			 => controlpoint.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.Int32 value)
			 => controlpoint.GetReportProperty(name, ref value);

		public System.Boolean GetDynamicStringProperty(System.String name, ref System.String value)
			 => controlpoint.GetDynamicStringProperty(name, ref value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => controlpoint.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => controlpoint.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => controlpoint.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => controlpoint.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(controlpoint.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => controlpoint.SetPhase(phase.GetTSObject());

		public System.Boolean GetPhase(ref Dynamic.Tekla.Structures.Model.Phase phase)
			 => controlpoint.GetPhase(ref phase.GetTSObject());

		public System.Boolean SetLabel(System.String label)
			 => controlpoint.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => controlpoint.CompareTo(obj);

		public System.Boolean Equals(Dynamic.Tekla.Structures.Model.ModelObject other)
			 => controlpoint.Equals(other.GetTSObject());

		public System.Boolean Equals(System.Object obj)
			 => controlpoint.Equals(obj);

		public System.Int32 GetHashCode()
			 => controlpoint.GetHashCode();

		public System.Type GetType()
			 => controlpoint.GetType();

		public System.String ToString()
			 => controlpoint.ToString();





    }

}
    
