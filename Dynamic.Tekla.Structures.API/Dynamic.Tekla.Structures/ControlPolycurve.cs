//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class ControlPolycurve 
    {

		public Dynamic.Tekla.Structures.Model.ControlObjectColorEnum Color
		{
			get => Dynamic.Tekla.Structures.Model.ControlObjectColorEnum_.FromTSObject(controlpolycurve.Color);
			set { controlpolycurve.Color = Dynamic.Tekla.Structures.Model.ControlObjectColorEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.ControlObjectLineType LineType
		{
			get => Dynamic.Tekla.Structures.Model.ControlObjectLineType_.FromTSObject(controlpolycurve.LineType);
			set { controlpolycurve.LineType = Dynamic.Tekla.Structures.Model.ControlObjectLineType_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Polycurve Geometry
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Polycurve(controlpolycurve.Geometry.GetTSObject());
			set { controlpolycurve.Geometry = value.GetTSObject(); }
		}

		public System.Nullable<System.DateTime> ModificationTime
		{
			get => controlpolycurve.ModificationTime;
			set { controlpolycurve.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => controlpolycurve.IsUpToDate;
			set { controlpolycurve.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => new Dynamic.Tekla.Structures.Identifier(controlpolycurve.Identifier.GetTSObject());
			set { controlpolycurve.Identifier = value.GetTSObject(); }
		}

        

        dynamic controlpolycurve;
        
        public ControlPolycurve()
        {
            this.controlpolycurve =  new Tekla.Structures.Model.ControlPolycurve();
        }

        public ControlPolycurve(dynamic tsObject)
        {
            this.controlpolycurve = tsObject;
			this.Color = Dynamic.Tekla.Structures.Model.ControlObjectColorEnum_.FromTSObject(controlpolycurve.Color);
			this.LineType = Dynamic.Tekla.Structures.Model.ControlObjectLineType_.FromTSObject(controlpolycurve.LineType);
			this.Geometry = new Dynamic.Tekla.Structures.Geometry3d.Polycurve(controlpolycurve.Geometry);
			this.ModificationTime = controlpolycurve.ModificationTime;
			this.IsUpToDate = controlpolycurve.IsUpToDate;
			this.Identifier = new Dynamic.Tekla.Structures.Identifier(controlpolycurve.Identifier);

        }


        public dynamic GetTSObject() => controlpolycurve;

		public System.Boolean Delete()
			 => controlpolycurve.Delete();

		public System.Boolean Insert()
			 => controlpolycurve.Insert();

		public System.Boolean Modify()
			 => controlpolycurve.Modify();

		public System.Boolean Select()
			 => controlpolycurve.Select();

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(controlpolycurve.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => new Dynamic.Tekla.Structures.Model.BaseComponent(controlpolycurve.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(controlpolycurve.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(ref System.Collections.Hashtable values)
			 => controlpolycurve.GetAllUserProperties(ref values);

		public System.Boolean GetIntegerUserProperties(ref System.Collections.Hashtable values)
			 => controlpolycurve.GetIntegerUserProperties(ref values);

		public System.Boolean GetDoubleUserProperties(ref System.Collections.Hashtable values)
			 => controlpolycurve.GetDoubleUserProperties(ref values);

		public System.Boolean GetStringUserProperties(ref System.Collections.Hashtable values)
			 => controlpolycurve.GetStringUserProperties(ref values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, ref System.Collections.Hashtable values)
			 => controlpolycurve.GetAllReportProperties(stringNames, doubleNames, integerNames, ref values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => controlpolycurve.GetIntegerReportProperties(names, ref values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => controlpolycurve.GetDoubleReportProperties(names, ref values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => controlpolycurve.GetStringReportProperties(names, ref values);

		public System.Boolean GetUserProperty(System.String name, ref System.String value)
			 => controlpolycurve.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.String value)
			 => controlpolycurve.GetReportProperty(name, ref value);

		public System.Boolean GetUserProperty(System.String name, ref System.Double value)
			 => controlpolycurve.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.Double value)
			 => controlpolycurve.GetReportProperty(name, ref value);

		public System.Boolean GetUserProperty(System.String name, ref System.Int32 value)
			 => controlpolycurve.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.Int32 value)
			 => controlpolycurve.GetReportProperty(name, ref value);

		public System.Boolean GetDynamicStringProperty(System.String name, ref System.String value)
			 => controlpolycurve.GetDynamicStringProperty(name, ref value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => controlpolycurve.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => controlpolycurve.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => controlpolycurve.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => controlpolycurve.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(controlpolycurve.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => controlpolycurve.SetPhase(phase.GetTSObject());

		public System.Boolean GetPhase(ref Dynamic.Tekla.Structures.Model.Phase phase)
			 => controlpolycurve.GetPhase(ref phase.GetTSObject());

		public System.Boolean SetLabel(System.String label)
			 => controlpolycurve.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => controlpolycurve.CompareTo(obj);

		public System.Boolean Equals(Dynamic.Tekla.Structures.Model.ModelObject other)
			 => controlpolycurve.Equals(other.GetTSObject());

		public System.Boolean Equals(System.Object obj)
			 => controlpolycurve.Equals(obj);

		public System.Int32 GetHashCode()
			 => controlpolycurve.GetHashCode();

		public System.Type GetType()
			 => controlpolycurve.GetType();

		public System.String ToString()
			 => controlpolycurve.ToString();





    }

}
    
