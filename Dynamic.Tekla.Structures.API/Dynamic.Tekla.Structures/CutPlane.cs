//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class CutPlane 
    {

		public Dynamic.Tekla.Structures.Model.Plane Plane
		{
			get => new Dynamic.Tekla.Structures.Model.Plane(cutplane.Plane.GetTSObject());
			set { cutplane.Plane = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.ModelObject Father
		{
			get => new Dynamic.Tekla.Structures.Model.ModelObject(cutplane.Father.GetTSObject());
			set { cutplane.Father = value.GetTSObject(); }
		}

		public System.DateTime ModificationTime
		{
			get => cutplane.ModificationTime;
			set { cutplane.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => cutplane.IsUpToDate;
			set { cutplane.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => new Dynamic.Tekla.Structures.Identifier(cutplane.Identifier.GetTSObject());
			set { cutplane.Identifier = value.GetTSObject(); }
		}

        

        dynamic cutplane;
        
        public CutPlane()
        {
            this.cutplane =  TSActivator.CreateInstance("Tekla.Structures.Model.CutPlane");
        }

        public CutPlane(dynamic tsObject)
        {
            this.cutplane = tsObject;
			this.Plane = new Dynamic.Tekla.Structures.Model.Plane(cutplane.Plane);
			this.Father = new Dynamic.Tekla.Structures.Model.ModelObject(cutplane.Father);
			this.ModificationTime = cutplane.ModificationTime;
			this.IsUpToDate = cutplane.IsUpToDate;
			this.Identifier = new Dynamic.Tekla.Structures.Identifier(cutplane.Identifier);

        }


        public dynamic GetTSObject() => cutplane;

		public System.Boolean Insert()
			 => cutplane.Insert();

		public System.Boolean Select()
			 => cutplane.Select();

		public System.Boolean Modify()
			 => cutplane.Modify();

		public System.Boolean Delete()
			 => cutplane.Delete();

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(cutplane.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => new Dynamic.Tekla.Structures.Model.BaseComponent(cutplane.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(cutplane.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(System.Collections.Hashtable values)
			 => cutplane.GetAllUserProperties(values);

		public System.Boolean GetIntegerUserProperties(System.Collections.Hashtable values)
			 => cutplane.GetIntegerUserProperties(values);

		public System.Boolean GetDoubleUserProperties(System.Collections.Hashtable values)
			 => cutplane.GetDoubleUserProperties(values);

		public System.Boolean GetStringUserProperties(System.Collections.Hashtable values)
			 => cutplane.GetStringUserProperties(values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, System.Collections.Hashtable values)
			 => cutplane.GetAllReportProperties(stringNames, doubleNames, integerNames, values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => cutplane.GetIntegerReportProperties(names, values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => cutplane.GetDoubleReportProperties(names, values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => cutplane.GetStringReportProperties(names, values);

		public System.Boolean GetUserProperty(System.String name, System.String value)
			 => cutplane.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.String value)
			 => cutplane.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Double value)
			 => cutplane.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Double value)
			 => cutplane.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Int32 value)
			 => cutplane.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Int32 value)
			 => cutplane.GetReportProperty(name, value);

		public System.Boolean GetDynamicStringProperty(System.String name, System.String value)
			 => cutplane.GetDynamicStringProperty(name, value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => cutplane.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => cutplane.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => cutplane.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => cutplane.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(cutplane.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => cutplane.SetPhase(phase.GetTSObject());

		public System.Boolean GetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => cutplane.GetPhase(phase.GetTSObject());

		public System.Boolean SetLabel(System.String label)
			 => cutplane.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => cutplane.CompareTo(obj);





    }

}
    
