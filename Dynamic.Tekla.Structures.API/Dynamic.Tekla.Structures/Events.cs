//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class Events 
    {

        

        dynamic events;
        
        public Events()
        {
            this.events =  new Tekla.Structures.Model.Events();
        }

        public Events(dynamic tsObject)
        {
            this.events = tsObject;

        }


        public dynamic GetTSObject() => events;

		public void add_SelectionChange(Dynamic.Tekla.Structures.Model.SelectionChangeDelegate value)
			 => events.add_SelectionChange(value.GetTSObject());

		public void remove_SelectionChange(Dynamic.Tekla.Structures.Model.SelectionChangeDelegate value)
			 => events.remove_SelectionChange(value.GetTSObject());

		public void add_CommandStatusChange(Dynamic.Tekla.Structures.Model.CommandStatusChangeDelegate value)
			 => events.add_CommandStatusChange(value.GetTSObject());

		public void remove_CommandStatusChange(Dynamic.Tekla.Structures.Model.CommandStatusChangeDelegate value)
			 => events.remove_CommandStatusChange(value.GetTSObject());

		public void add_TrackEvent(Dynamic.Tekla.Structures.Model.TrackEventDelegate value)
			 => events.add_TrackEvent(value.GetTSObject());

		public void remove_TrackEvent(Dynamic.Tekla.Structures.Model.TrackEventDelegate value)
			 => events.remove_TrackEvent(value.GetTSObject());

		public void add_PointInputChanged(Dynamic.Tekla.Structures.Model.PointInputChangedDelegate value)
			 => events.add_PointInputChanged(value.GetTSObject());

		public void remove_PointInputChanged(Dynamic.Tekla.Structures.Model.PointInputChangedDelegate value)
			 => events.remove_PointInputChanged(value.GetTSObject());

		public void add_ModelSave(Dynamic.Tekla.Structures.Model.ModelSaveDelegate value)
			 => events.add_ModelSave(value.GetTSObject());

		public void remove_ModelSave(Dynamic.Tekla.Structures.Model.ModelSaveDelegate value)
			 => events.remove_ModelSave(value.GetTSObject());

		public void add_ModelSaveAs(Dynamic.Tekla.Structures.Model.ModelSaveAsDelegate value)
			 => events.add_ModelSaveAs(value.GetTSObject());

		public void remove_ModelSaveAs(Dynamic.Tekla.Structures.Model.ModelSaveAsDelegate value)
			 => events.remove_ModelSaveAs(value.GetTSObject());

		public void add_ModelLoad(Dynamic.Tekla.Structures.Model.ModelLoadDelegate value)
			 => events.add_ModelLoad(value.GetTSObject());

		public void remove_ModelLoad(Dynamic.Tekla.Structures.Model.ModelLoadDelegate value)
			 => events.remove_ModelLoad(value.GetTSObject());

		public void add_ModelUnloading(Dynamic.Tekla.Structures.Model.ModelLoadDelegate value)
			 => events.add_ModelUnloading(value.GetTSObject());

		public void remove_ModelUnloading(Dynamic.Tekla.Structures.Model.ModelLoadDelegate value)
			 => events.remove_ModelUnloading(value.GetTSObject());

		public void add_Numbering(Dynamic.Tekla.Structures.Model.NumberingDelegate value)
			 => events.add_Numbering(value.GetTSObject());

		public void remove_Numbering(Dynamic.Tekla.Structures.Model.NumberingDelegate value)
			 => events.remove_Numbering(value.GetTSObject());

		public void add_ModelChanged(Dynamic.Tekla.Structures.Model.ModelChangedDelegate value)
			 => events.add_ModelChanged(value.GetTSObject());

		public void remove_ModelChanged(Dynamic.Tekla.Structures.Model.ModelChangedDelegate value)
			 => events.remove_ModelChanged(value.GetTSObject());

		public void add_ModelObjectNumbered(Dynamic.Tekla.Structures.Model.ModelObjectNumberedDelegate value)
			 => events.add_ModelObjectNumbered(value.GetTSObject());

		public void remove_ModelObjectNumbered(Dynamic.Tekla.Structures.Model.ModelObjectNumberedDelegate value)
			 => events.remove_ModelObjectNumbered(value.GetTSObject());

		public void add_ModelObjectChanged(Dynamic.Tekla.Structures.Model.ModelObjectChangedDelegate value)
			 => events.add_ModelObjectChanged(value.GetTSObject());

		public void remove_ModelObjectChanged(Dynamic.Tekla.Structures.Model.ModelObjectChangedDelegate value)
			 => events.remove_ModelObjectChanged(value.GetTSObject());

		public void add_TeklaStructuresExit(Dynamic.Tekla.Structures.Model.TeklaStructuresExitDelegate value)
			 => events.add_TeklaStructuresExit(value.GetTSObject());

		public void remove_TeklaStructuresExit(Dynamic.Tekla.Structures.Model.TeklaStructuresExitDelegate value)
			 => events.remove_TeklaStructuresExit(value.GetTSObject());

		public void add_ClashCheckDone(Dynamic.Tekla.Structures.Model.ClashCheckDoneDelegate value)
			 => events.add_ClashCheckDone(value.GetTSObject());

		public void remove_ClashCheckDone(Dynamic.Tekla.Structures.Model.ClashCheckDoneDelegate value)
			 => events.remove_ClashCheckDone(value.GetTSObject());

		public void add_ClashDetected(Dynamic.Tekla.Structures.Model.ClashDetectedDelegate value)
			 => events.add_ClashDetected(value.GetTSObject());

		public void remove_ClashDetected(Dynamic.Tekla.Structures.Model.ClashDetectedDelegate value)
			 => events.remove_ClashDetected(value.GetTSObject());

		public void add_Interrupted(Dynamic.Tekla.Structures.Model.InterruptedDelegate value)
			 => events.add_Interrupted(value.GetTSObject());

		public void remove_Interrupted(Dynamic.Tekla.Structures.Model.InterruptedDelegate value)
			 => events.remove_Interrupted(value.GetTSObject());

		public void OnSelectionChange(System.String eventName, System.Object parameters)
			 => events.OnSelectionChange(eventName, parameters);

		public void OnAnnotationSelectionChange(System.String eventName, System.Object parameters)
			 => events.OnAnnotationSelectionChange(eventName, parameters);

		public void OnCommandStatusChange(System.String eventName, System.Object parameters)
			 => events.OnCommandStatusChange(eventName, parameters);

		public void OnTrackEvent(System.String eventName, System.Object parameters)
			 => events.OnTrackEvent(eventName, parameters);

		public void OnPointInputChangedEvent(System.String eventName, System.Object parameters)
			 => events.OnPointInputChangedEvent(eventName, parameters);

		public void OnModelSave(System.String eventName, System.Object parameters)
			 => events.OnModelSave(eventName, parameters);

		public void OnModelSaveAs(System.String eventName, System.Object parameters)
			 => events.OnModelSaveAs(eventName, parameters);

		public void OnModelLoad(System.String eventName, System.Object parameters)
			 => events.OnModelLoad(eventName, parameters);

		public void OnModelUnloading(System.String eventName, System.Object parameters)
			 => events.OnModelUnloading(eventName, parameters);

		public void OnNumbering(System.String eventName, System.Object parameters)
			 => events.OnNumbering(eventName, parameters);

		public void OnModelObjectNumbered(System.String eventName, System.Object parameters)
			 => events.OnModelObjectNumbered(eventName, parameters);

		public void OnModelObjectChanged(System.String eventName, System.Object parameters)
			 => events.OnModelObjectChanged(eventName, parameters);

		public void OnDbCommit(System.String eventName, System.Object parameters)
			 => events.OnDbCommit(eventName, parameters);

		public void OnTeklaStructuresExit(System.String eventName, System.Object parameters)
			 => events.OnTeklaStructuresExit(eventName, parameters);

		public void OnClashCheckDone(System.String eventName, System.Object parameters)
			 => events.OnClashCheckDone(eventName, parameters);

		public void OnClashDetected(System.String eventName, System.Object parameters)
			 => events.OnClashDetected(eventName, parameters);

		public void OnInterrupted()
			 => events.OnInterrupted();

		public System.Object InitializeLifetimeService()
			 => events.InitializeLifetimeService();

		public void Register()
			 => events.Register();

		public void UnRegister()
			 => events.UnRegister();

		public System.Object GetLifetimeService()
			 => events.GetLifetimeService();

		public System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType)
			 => events.CreateObjRef(requestedType);

		public System.Boolean Equals(System.Object obj)
			 => events.Equals(obj);

		public System.Int32 GetHashCode()
			 => events.GetHashCode();

		public System.Type GetType()
			 => events.GetType();

		public System.String ToString()
			 => events.ToString();




    public sealed class SelectionChangeDelegate 
    {

		public System.Reflection.MethodInfo Method
		{
			get => selectionchangedelegate.Method;
			set { selectionchangedelegate.Method = value; }
		}

		public System.Object Target
		{
			get => selectionchangedelegate.Target;
			set { selectionchangedelegate.Target = value; }
		}

        

        dynamic selectionchangedelegate;
        
        public SelectionChangeDelegate()
        {
            this.selectionchangedelegate =  new Tekla.Structures.Model.SelectionChangeDelegate();
        }

        public SelectionChangeDelegate(dynamic tsObject)
        {
            this.selectionchangedelegate = tsObject;
			this.Method = selectionchangedelegate.Method;
			this.Target = selectionchangedelegate.Target;

        }


        public dynamic GetTSObject() => selectionchangedelegate;

		public void Invoke()
			 => selectionchangedelegate.Invoke();

		public System.IAsyncResult BeginInvoke(System.AsyncCallback callback, System.Object object)
			 => selectionchangedelegate.BeginInvoke(callback, object);

		public void EndInvoke(System.IAsyncResult result)
			 => selectionchangedelegate.EndInvoke(result);

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => selectionchangedelegate.GetObjectData(info, context);

		public System.Boolean Equals(System.Object obj)
			 => selectionchangedelegate.Equals(obj);

		public System.Delegate GetInvocationList()
			 => selectionchangedelegate.GetInvocationList();

		public System.Int32 GetHashCode()
			 => selectionchangedelegate.GetHashCode();

		public System.Object DynamicInvoke(System.Object args)
			 => selectionchangedelegate.DynamicInvoke(args);

		public System.Object Clone()
			 => selectionchangedelegate.Clone();

		public System.Type GetType()
			 => selectionchangedelegate.GetType();

		public System.String ToString()
			 => selectionchangedelegate.ToString();





    }


    public sealed class CommandStatusChangeDelegate 
    {

		public System.Reflection.MethodInfo Method
		{
			get => commandstatuschangedelegate.Method;
			set { commandstatuschangedelegate.Method = value; }
		}

		public System.Object Target
		{
			get => commandstatuschangedelegate.Target;
			set { commandstatuschangedelegate.Target = value; }
		}

        

        dynamic commandstatuschangedelegate;
        
        public CommandStatusChangeDelegate()
        {
            this.commandstatuschangedelegate =  new Tekla.Structures.Model.CommandStatusChangeDelegate();
        }

        public CommandStatusChangeDelegate(dynamic tsObject)
        {
            this.commandstatuschangedelegate = tsObject;
			this.Method = commandstatuschangedelegate.Method;
			this.Target = commandstatuschangedelegate.Target;

        }


        public dynamic GetTSObject() => commandstatuschangedelegate;

		public void Invoke(System.String TSCommand, System.String TSCommandParam, System.Boolean Status)
			 => commandstatuschangedelegate.Invoke(TSCommand, TSCommandParam, Status);

		public System.IAsyncResult BeginInvoke(System.String TSCommand, System.String TSCommandParam, System.Boolean Status, System.AsyncCallback callback, System.Object object)
			 => commandstatuschangedelegate.BeginInvoke(TSCommand, TSCommandParam, Status, callback, object);

		public void EndInvoke(System.IAsyncResult result)
			 => commandstatuschangedelegate.EndInvoke(result);

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => commandstatuschangedelegate.GetObjectData(info, context);

		public System.Boolean Equals(System.Object obj)
			 => commandstatuschangedelegate.Equals(obj);

		public System.Delegate GetInvocationList()
			 => commandstatuschangedelegate.GetInvocationList();

		public System.Int32 GetHashCode()
			 => commandstatuschangedelegate.GetHashCode();

		public System.Object DynamicInvoke(System.Object args)
			 => commandstatuschangedelegate.DynamicInvoke(args);

		public System.Object Clone()
			 => commandstatuschangedelegate.Clone();

		public System.Type GetType()
			 => commandstatuschangedelegate.GetType();

		public System.String ToString()
			 => commandstatuschangedelegate.ToString();





    }


    public sealed class TrackEventDelegate 
    {

		public System.Reflection.MethodInfo Method
		{
			get => trackeventdelegate.Method;
			set { trackeventdelegate.Method = value; }
		}

		public System.Object Target
		{
			get => trackeventdelegate.Target;
			set { trackeventdelegate.Target = value; }
		}

        

        dynamic trackeventdelegate;
        
        public TrackEventDelegate()
        {
            this.trackeventdelegate =  new Tekla.Structures.Model.TrackEventDelegate();
        }

        public TrackEventDelegate(dynamic tsObject)
        {
            this.trackeventdelegate = tsObject;
			this.Method = trackeventdelegate.Method;
			this.Target = trackeventdelegate.Target;

        }


        public dynamic GetTSObject() => trackeventdelegate;

		public void Invoke(System.String Category, System.String Name, System.String Content)
			 => trackeventdelegate.Invoke(Category, Name, Content);

		public System.IAsyncResult BeginInvoke(System.String Category, System.String Name, System.String Content, System.AsyncCallback callback, System.Object object)
			 => trackeventdelegate.BeginInvoke(Category, Name, Content, callback, object);

		public void EndInvoke(System.IAsyncResult result)
			 => trackeventdelegate.EndInvoke(result);

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => trackeventdelegate.GetObjectData(info, context);

		public System.Boolean Equals(System.Object obj)
			 => trackeventdelegate.Equals(obj);

		public System.Delegate GetInvocationList()
			 => trackeventdelegate.GetInvocationList();

		public System.Int32 GetHashCode()
			 => trackeventdelegate.GetHashCode();

		public System.Object DynamicInvoke(System.Object args)
			 => trackeventdelegate.DynamicInvoke(args);

		public System.Object Clone()
			 => trackeventdelegate.Clone();

		public System.Type GetType()
			 => trackeventdelegate.GetType();

		public System.String ToString()
			 => trackeventdelegate.ToString();





    }


    public sealed class ModelSaveDelegate 
    {

		public System.Reflection.MethodInfo Method
		{
			get => modelsavedelegate.Method;
			set { modelsavedelegate.Method = value; }
		}

		public System.Object Target
		{
			get => modelsavedelegate.Target;
			set { modelsavedelegate.Target = value; }
		}

        

        dynamic modelsavedelegate;
        
        public ModelSaveDelegate()
        {
            this.modelsavedelegate =  new Tekla.Structures.Model.ModelSaveDelegate();
        }

        public ModelSaveDelegate(dynamic tsObject)
        {
            this.modelsavedelegate = tsObject;
			this.Method = modelsavedelegate.Method;
			this.Target = modelsavedelegate.Target;

        }


        public dynamic GetTSObject() => modelsavedelegate;

		public void Invoke()
			 => modelsavedelegate.Invoke();

		public System.IAsyncResult BeginInvoke(System.AsyncCallback callback, System.Object object)
			 => modelsavedelegate.BeginInvoke(callback, object);

		public void EndInvoke(System.IAsyncResult result)
			 => modelsavedelegate.EndInvoke(result);

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => modelsavedelegate.GetObjectData(info, context);

		public System.Boolean Equals(System.Object obj)
			 => modelsavedelegate.Equals(obj);

		public System.Delegate GetInvocationList()
			 => modelsavedelegate.GetInvocationList();

		public System.Int32 GetHashCode()
			 => modelsavedelegate.GetHashCode();

		public System.Object DynamicInvoke(System.Object args)
			 => modelsavedelegate.DynamicInvoke(args);

		public System.Object Clone()
			 => modelsavedelegate.Clone();

		public System.Type GetType()
			 => modelsavedelegate.GetType();

		public System.String ToString()
			 => modelsavedelegate.ToString();





    }


    public sealed class ModelSaveAsDelegate 
    {

		public System.Reflection.MethodInfo Method
		{
			get => modelsaveasdelegate.Method;
			set { modelsaveasdelegate.Method = value; }
		}

		public System.Object Target
		{
			get => modelsaveasdelegate.Target;
			set { modelsaveasdelegate.Target = value; }
		}

        

        dynamic modelsaveasdelegate;
        
        public ModelSaveAsDelegate()
        {
            this.modelsaveasdelegate =  new Tekla.Structures.Model.ModelSaveAsDelegate();
        }

        public ModelSaveAsDelegate(dynamic tsObject)
        {
            this.modelsaveasdelegate = tsObject;
			this.Method = modelsaveasdelegate.Method;
			this.Target = modelsaveasdelegate.Target;

        }


        public dynamic GetTSObject() => modelsaveasdelegate;

		public void Invoke()
			 => modelsaveasdelegate.Invoke();

		public System.IAsyncResult BeginInvoke(System.AsyncCallback callback, System.Object object)
			 => modelsaveasdelegate.BeginInvoke(callback, object);

		public void EndInvoke(System.IAsyncResult result)
			 => modelsaveasdelegate.EndInvoke(result);

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => modelsaveasdelegate.GetObjectData(info, context);

		public System.Boolean Equals(System.Object obj)
			 => modelsaveasdelegate.Equals(obj);

		public System.Delegate GetInvocationList()
			 => modelsaveasdelegate.GetInvocationList();

		public System.Int32 GetHashCode()
			 => modelsaveasdelegate.GetHashCode();

		public System.Object DynamicInvoke(System.Object args)
			 => modelsaveasdelegate.DynamicInvoke(args);

		public System.Object Clone()
			 => modelsaveasdelegate.Clone();

		public System.Type GetType()
			 => modelsaveasdelegate.GetType();

		public System.String ToString()
			 => modelsaveasdelegate.ToString();





    }


    public sealed class ModelLoadDelegate 
    {

		public System.Reflection.MethodInfo Method
		{
			get => modelloaddelegate.Method;
			set { modelloaddelegate.Method = value; }
		}

		public System.Object Target
		{
			get => modelloaddelegate.Target;
			set { modelloaddelegate.Target = value; }
		}

        

        dynamic modelloaddelegate;
        
        public ModelLoadDelegate()
        {
            this.modelloaddelegate =  new Tekla.Structures.Model.ModelLoadDelegate();
        }

        public ModelLoadDelegate(dynamic tsObject)
        {
            this.modelloaddelegate = tsObject;
			this.Method = modelloaddelegate.Method;
			this.Target = modelloaddelegate.Target;

        }


        public dynamic GetTSObject() => modelloaddelegate;

		public void Invoke()
			 => modelloaddelegate.Invoke();

		public System.IAsyncResult BeginInvoke(System.AsyncCallback callback, System.Object object)
			 => modelloaddelegate.BeginInvoke(callback, object);

		public void EndInvoke(System.IAsyncResult result)
			 => modelloaddelegate.EndInvoke(result);

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => modelloaddelegate.GetObjectData(info, context);

		public System.Boolean Equals(System.Object obj)
			 => modelloaddelegate.Equals(obj);

		public System.Delegate GetInvocationList()
			 => modelloaddelegate.GetInvocationList();

		public System.Int32 GetHashCode()
			 => modelloaddelegate.GetHashCode();

		public System.Object DynamicInvoke(System.Object args)
			 => modelloaddelegate.DynamicInvoke(args);

		public System.Object Clone()
			 => modelloaddelegate.Clone();

		public System.Type GetType()
			 => modelloaddelegate.GetType();

		public System.String ToString()
			 => modelloaddelegate.ToString();





    }


    public sealed class NumberingDelegate 
    {

		public System.Reflection.MethodInfo Method
		{
			get => numberingdelegate.Method;
			set { numberingdelegate.Method = value; }
		}

		public System.Object Target
		{
			get => numberingdelegate.Target;
			set { numberingdelegate.Target = value; }
		}

        

        dynamic numberingdelegate;
        
        public NumberingDelegate()
        {
            this.numberingdelegate =  new Tekla.Structures.Model.NumberingDelegate();
        }

        public NumberingDelegate(dynamic tsObject)
        {
            this.numberingdelegate = tsObject;
			this.Method = numberingdelegate.Method;
			this.Target = numberingdelegate.Target;

        }


        public dynamic GetTSObject() => numberingdelegate;

		public void Invoke()
			 => numberingdelegate.Invoke();

		public System.IAsyncResult BeginInvoke(System.AsyncCallback callback, System.Object object)
			 => numberingdelegate.BeginInvoke(callback, object);

		public void EndInvoke(System.IAsyncResult result)
			 => numberingdelegate.EndInvoke(result);

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => numberingdelegate.GetObjectData(info, context);

		public System.Boolean Equals(System.Object obj)
			 => numberingdelegate.Equals(obj);

		public System.Delegate GetInvocationList()
			 => numberingdelegate.GetInvocationList();

		public System.Int32 GetHashCode()
			 => numberingdelegate.GetHashCode();

		public System.Object DynamicInvoke(System.Object args)
			 => numberingdelegate.DynamicInvoke(args);

		public System.Object Clone()
			 => numberingdelegate.Clone();

		public System.Type GetType()
			 => numberingdelegate.GetType();

		public System.String ToString()
			 => numberingdelegate.ToString();





    }


    public sealed class ModelChangedDelegate 
    {

		public System.Reflection.MethodInfo Method
		{
			get => modelchangeddelegate.Method;
			set { modelchangeddelegate.Method = value; }
		}

		public System.Object Target
		{
			get => modelchangeddelegate.Target;
			set { modelchangeddelegate.Target = value; }
		}

        

        dynamic modelchangeddelegate;
        
        public ModelChangedDelegate()
        {
            this.modelchangeddelegate =  new Tekla.Structures.Model.ModelChangedDelegate();
        }

        public ModelChangedDelegate(dynamic tsObject)
        {
            this.modelchangeddelegate = tsObject;
			this.Method = modelchangeddelegate.Method;
			this.Target = modelchangeddelegate.Target;

        }


        public dynamic GetTSObject() => modelchangeddelegate;

		public void Invoke()
			 => modelchangeddelegate.Invoke();

		public System.IAsyncResult BeginInvoke(System.AsyncCallback callback, System.Object object)
			 => modelchangeddelegate.BeginInvoke(callback, object);

		public void EndInvoke(System.IAsyncResult result)
			 => modelchangeddelegate.EndInvoke(result);

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => modelchangeddelegate.GetObjectData(info, context);

		public System.Boolean Equals(System.Object obj)
			 => modelchangeddelegate.Equals(obj);

		public System.Delegate GetInvocationList()
			 => modelchangeddelegate.GetInvocationList();

		public System.Int32 GetHashCode()
			 => modelchangeddelegate.GetHashCode();

		public System.Object DynamicInvoke(System.Object args)
			 => modelchangeddelegate.DynamicInvoke(args);

		public System.Object Clone()
			 => modelchangeddelegate.Clone();

		public System.Type GetType()
			 => modelchangeddelegate.GetType();

		public System.String ToString()
			 => modelchangeddelegate.ToString();





    }


    public sealed class ModelObjectNumberedDelegate 
    {

		public System.Reflection.MethodInfo Method
		{
			get => modelobjectnumbereddelegate.Method;
			set { modelobjectnumbereddelegate.Method = value; }
		}

		public System.Object Target
		{
			get => modelobjectnumbereddelegate.Target;
			set { modelobjectnumbereddelegate.Target = value; }
		}

        

        dynamic modelobjectnumbereddelegate;
        
        public ModelObjectNumberedDelegate()
        {
            this.modelobjectnumbereddelegate =  new Tekla.Structures.Model.ModelObjectNumberedDelegate();
        }

        public ModelObjectNumberedDelegate(dynamic tsObject)
        {
            this.modelobjectnumbereddelegate = tsObject;
			this.Method = modelobjectnumbereddelegate.Method;
			this.Target = modelobjectnumbereddelegate.Target;

        }


        public dynamic GetTSObject() => modelobjectnumbereddelegate;

		public void Invoke(System.Collections.Generic.List<Dynamic.Tekla.Structures.Model.ModelObject> Objects)
			 => modelobjectnumbereddelegate.Invoke(Objects);

		public System.IAsyncResult BeginInvoke(System.Collections.Generic.List<Dynamic.Tekla.Structures.Model.ModelObject> Objects, System.AsyncCallback callback, System.Object object)
			 => modelobjectnumbereddelegate.BeginInvoke(Objects, callback, object);

		public void EndInvoke(System.IAsyncResult result)
			 => modelobjectnumbereddelegate.EndInvoke(result);

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => modelobjectnumbereddelegate.GetObjectData(info, context);

		public System.Boolean Equals(System.Object obj)
			 => modelobjectnumbereddelegate.Equals(obj);

		public System.Delegate GetInvocationList()
			 => modelobjectnumbereddelegate.GetInvocationList();

		public System.Int32 GetHashCode()
			 => modelobjectnumbereddelegate.GetHashCode();

		public System.Object DynamicInvoke(System.Object args)
			 => modelobjectnumbereddelegate.DynamicInvoke(args);

		public System.Object Clone()
			 => modelobjectnumbereddelegate.Clone();

		public System.Type GetType()
			 => modelobjectnumbereddelegate.GetType();

		public System.String ToString()
			 => modelobjectnumbereddelegate.ToString();





    }


    public sealed class ModelObjectChangedDelegate 
    {

		public System.Reflection.MethodInfo Method
		{
			get => modelobjectchangeddelegate.Method;
			set { modelobjectchangeddelegate.Method = value; }
		}

		public System.Object Target
		{
			get => modelobjectchangeddelegate.Target;
			set { modelobjectchangeddelegate.Target = value; }
		}

        

        dynamic modelobjectchangeddelegate;
        
        public ModelObjectChangedDelegate()
        {
            this.modelobjectchangeddelegate =  new Tekla.Structures.Model.ModelObjectChangedDelegate();
        }

        public ModelObjectChangedDelegate(dynamic tsObject)
        {
            this.modelobjectchangeddelegate = tsObject;
			this.Method = modelobjectchangeddelegate.Method;
			this.Target = modelobjectchangeddelegate.Target;

        }


        public dynamic GetTSObject() => modelobjectchangeddelegate;

		public void Invoke(System.Collections.Generic.List<Dynamic.Tekla.Structures.Model.ChangeData> Changes)
			 => modelobjectchangeddelegate.Invoke(Changes);

		public System.IAsyncResult BeginInvoke(System.Collections.Generic.List<Dynamic.Tekla.Structures.Model.ChangeData> Changes, System.AsyncCallback callback, System.Object object)
			 => modelobjectchangeddelegate.BeginInvoke(Changes, callback, object);

		public void EndInvoke(System.IAsyncResult result)
			 => modelobjectchangeddelegate.EndInvoke(result);

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => modelobjectchangeddelegate.GetObjectData(info, context);

		public System.Boolean Equals(System.Object obj)
			 => modelobjectchangeddelegate.Equals(obj);

		public System.Delegate GetInvocationList()
			 => modelobjectchangeddelegate.GetInvocationList();

		public System.Int32 GetHashCode()
			 => modelobjectchangeddelegate.GetHashCode();

		public System.Object DynamicInvoke(System.Object args)
			 => modelobjectchangeddelegate.DynamicInvoke(args);

		public System.Object Clone()
			 => modelobjectchangeddelegate.Clone();

		public System.Type GetType()
			 => modelobjectchangeddelegate.GetType();

		public System.String ToString()
			 => modelobjectchangeddelegate.ToString();





    }


    public sealed class TeklaStructuresExitDelegate 
    {

		public System.Reflection.MethodInfo Method
		{
			get => teklastructuresexitdelegate.Method;
			set { teklastructuresexitdelegate.Method = value; }
		}

		public System.Object Target
		{
			get => teklastructuresexitdelegate.Target;
			set { teklastructuresexitdelegate.Target = value; }
		}

        

        dynamic teklastructuresexitdelegate;
        
        public TeklaStructuresExitDelegate()
        {
            this.teklastructuresexitdelegate =  new Tekla.Structures.Model.TeklaStructuresExitDelegate();
        }

        public TeklaStructuresExitDelegate(dynamic tsObject)
        {
            this.teklastructuresexitdelegate = tsObject;
			this.Method = teklastructuresexitdelegate.Method;
			this.Target = teklastructuresexitdelegate.Target;

        }


        public dynamic GetTSObject() => teklastructuresexitdelegate;

		public void Invoke()
			 => teklastructuresexitdelegate.Invoke();

		public System.IAsyncResult BeginInvoke(System.AsyncCallback callback, System.Object object)
			 => teklastructuresexitdelegate.BeginInvoke(callback, object);

		public void EndInvoke(System.IAsyncResult result)
			 => teklastructuresexitdelegate.EndInvoke(result);

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => teklastructuresexitdelegate.GetObjectData(info, context);

		public System.Boolean Equals(System.Object obj)
			 => teklastructuresexitdelegate.Equals(obj);

		public System.Delegate GetInvocationList()
			 => teklastructuresexitdelegate.GetInvocationList();

		public System.Int32 GetHashCode()
			 => teklastructuresexitdelegate.GetHashCode();

		public System.Object DynamicInvoke(System.Object args)
			 => teklastructuresexitdelegate.DynamicInvoke(args);

		public System.Object Clone()
			 => teklastructuresexitdelegate.Clone();

		public System.Type GetType()
			 => teklastructuresexitdelegate.GetType();

		public System.String ToString()
			 => teklastructuresexitdelegate.ToString();





    }


    public sealed class ClashCheckDoneDelegate 
    {

		public System.Reflection.MethodInfo Method
		{
			get => clashcheckdonedelegate.Method;
			set { clashcheckdonedelegate.Method = value; }
		}

		public System.Object Target
		{
			get => clashcheckdonedelegate.Target;
			set { clashcheckdonedelegate.Target = value; }
		}

        

        dynamic clashcheckdonedelegate;
        
        public ClashCheckDoneDelegate()
        {
            this.clashcheckdonedelegate =  new Tekla.Structures.Model.ClashCheckDoneDelegate();
        }

        public ClashCheckDoneDelegate(dynamic tsObject)
        {
            this.clashcheckdonedelegate = tsObject;
			this.Method = clashcheckdonedelegate.Method;
			this.Target = clashcheckdonedelegate.Target;

        }


        public dynamic GetTSObject() => clashcheckdonedelegate;

		public void Invoke(System.Int32 NumbersOfClashes)
			 => clashcheckdonedelegate.Invoke(NumbersOfClashes);

		public System.IAsyncResult BeginInvoke(System.Int32 NumbersOfClashes, System.AsyncCallback callback, System.Object object)
			 => clashcheckdonedelegate.BeginInvoke(NumbersOfClashes, callback, object);

		public void EndInvoke(System.IAsyncResult result)
			 => clashcheckdonedelegate.EndInvoke(result);

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => clashcheckdonedelegate.GetObjectData(info, context);

		public System.Boolean Equals(System.Object obj)
			 => clashcheckdonedelegate.Equals(obj);

		public System.Delegate GetInvocationList()
			 => clashcheckdonedelegate.GetInvocationList();

		public System.Int32 GetHashCode()
			 => clashcheckdonedelegate.GetHashCode();

		public System.Object DynamicInvoke(System.Object args)
			 => clashcheckdonedelegate.DynamicInvoke(args);

		public System.Object Clone()
			 => clashcheckdonedelegate.Clone();

		public System.Type GetType()
			 => clashcheckdonedelegate.GetType();

		public System.String ToString()
			 => clashcheckdonedelegate.ToString();





    }


    public sealed class ClashDetectedDelegate 
    {

		public System.Reflection.MethodInfo Method
		{
			get => clashdetecteddelegate.Method;
			set { clashdetecteddelegate.Method = value; }
		}

		public System.Object Target
		{
			get => clashdetecteddelegate.Target;
			set { clashdetecteddelegate.Target = value; }
		}

        

        dynamic clashdetecteddelegate;
        
        public ClashDetectedDelegate()
        {
            this.clashdetecteddelegate =  new Tekla.Structures.Model.ClashDetectedDelegate();
        }

        public ClashDetectedDelegate(dynamic tsObject)
        {
            this.clashdetecteddelegate = tsObject;
			this.Method = clashdetecteddelegate.Method;
			this.Target = clashdetecteddelegate.Target;

        }


        public dynamic GetTSObject() => clashdetecteddelegate;

		public void Invoke(Dynamic.Tekla.Structures.Model.ClashCheckData ClashData)
			 => clashdetecteddelegate.Invoke(ClashData.GetTSObject());

		public System.IAsyncResult BeginInvoke(Dynamic.Tekla.Structures.Model.ClashCheckData ClashData, System.AsyncCallback callback, System.Object object)
			 => clashdetecteddelegate.BeginInvoke(ClashData.GetTSObject(), callback, object);

		public void EndInvoke(System.IAsyncResult result)
			 => clashdetecteddelegate.EndInvoke(result);

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => clashdetecteddelegate.GetObjectData(info, context);

		public System.Boolean Equals(System.Object obj)
			 => clashdetecteddelegate.Equals(obj);

		public System.Delegate GetInvocationList()
			 => clashdetecteddelegate.GetInvocationList();

		public System.Int32 GetHashCode()
			 => clashdetecteddelegate.GetHashCode();

		public System.Object DynamicInvoke(System.Object args)
			 => clashdetecteddelegate.DynamicInvoke(args);

		public System.Object Clone()
			 => clashdetecteddelegate.Clone();

		public System.Type GetType()
			 => clashdetecteddelegate.GetType();

		public System.String ToString()
			 => clashdetecteddelegate.ToString();





    }


    public sealed class PointInputChangedDelegate 
    {

		public System.Reflection.MethodInfo Method
		{
			get => pointinputchangeddelegate.Method;
			set { pointinputchangeddelegate.Method = value; }
		}

		public System.Object Target
		{
			get => pointinputchangeddelegate.Target;
			set { pointinputchangeddelegate.Target = value; }
		}

        

        dynamic pointinputchangeddelegate;
        
        public PointInputChangedDelegate()
        {
            this.pointinputchangeddelegate =  new Tekla.Structures.Model.PointInputChangedDelegate();
        }

        public PointInputChangedDelegate(dynamic tsObject)
        {
            this.pointinputchangeddelegate = tsObject;
			this.Method = pointinputchangeddelegate.Method;
			this.Target = pointinputchangeddelegate.Target;

        }


        public dynamic GetTSObject() => pointinputchangeddelegate;

		public void Invoke(System.Collections.Generic.List<Dynamic.Tekla.Structures.Geometry3d.Point> Changes)
			 => pointinputchangeddelegate.Invoke(Changes);

		public System.IAsyncResult BeginInvoke(System.Collections.Generic.List<Dynamic.Tekla.Structures.Geometry3d.Point> Changes, System.AsyncCallback callback, System.Object object)
			 => pointinputchangeddelegate.BeginInvoke(Changes, callback, object);

		public void EndInvoke(System.IAsyncResult result)
			 => pointinputchangeddelegate.EndInvoke(result);

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => pointinputchangeddelegate.GetObjectData(info, context);

		public System.Boolean Equals(System.Object obj)
			 => pointinputchangeddelegate.Equals(obj);

		public System.Delegate GetInvocationList()
			 => pointinputchangeddelegate.GetInvocationList();

		public System.Int32 GetHashCode()
			 => pointinputchangeddelegate.GetHashCode();

		public System.Object DynamicInvoke(System.Object args)
			 => pointinputchangeddelegate.DynamicInvoke(args);

		public System.Object Clone()
			 => pointinputchangeddelegate.Clone();

		public System.Type GetType()
			 => pointinputchangeddelegate.GetType();

		public System.String ToString()
			 => pointinputchangeddelegate.ToString();





    }


    public sealed class InterruptedDelegate 
    {

		public System.Reflection.MethodInfo Method
		{
			get => interrupteddelegate.Method;
			set { interrupteddelegate.Method = value; }
		}

		public System.Object Target
		{
			get => interrupteddelegate.Target;
			set { interrupteddelegate.Target = value; }
		}

        

        dynamic interrupteddelegate;
        
        public InterruptedDelegate()
        {
            this.interrupteddelegate =  new Tekla.Structures.Model.InterruptedDelegate();
        }

        public InterruptedDelegate(dynamic tsObject)
        {
            this.interrupteddelegate = tsObject;
			this.Method = interrupteddelegate.Method;
			this.Target = interrupteddelegate.Target;

        }


        public dynamic GetTSObject() => interrupteddelegate;

		public void Invoke()
			 => interrupteddelegate.Invoke();

		public System.IAsyncResult BeginInvoke(System.AsyncCallback callback, System.Object object)
			 => interrupteddelegate.BeginInvoke(callback, object);

		public void EndInvoke(System.IAsyncResult result)
			 => interrupteddelegate.EndInvoke(result);

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => interrupteddelegate.GetObjectData(info, context);

		public System.Boolean Equals(System.Object obj)
			 => interrupteddelegate.Equals(obj);

		public System.Delegate GetInvocationList()
			 => interrupteddelegate.GetInvocationList();

		public System.Int32 GetHashCode()
			 => interrupteddelegate.GetHashCode();

		public System.Object DynamicInvoke(System.Object args)
			 => interrupteddelegate.DynamicInvoke(args);

		public System.Object Clone()
			 => interrupteddelegate.Clone();

		public System.Type GetType()
			 => interrupteddelegate.GetType();

		public System.String ToString()
			 => interrupteddelegate.ToString();





    }



    }

}
    
