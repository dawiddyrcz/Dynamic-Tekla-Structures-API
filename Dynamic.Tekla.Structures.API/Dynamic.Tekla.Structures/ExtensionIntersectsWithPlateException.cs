//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class ExtensionIntersectsWithPlateException 
    {

		public System.String Message
		{
			get => extensionintersectswithplateexception.Message;
			set { extensionintersectswithplateexception.Message = value; }
		}

		public System.Collections.IDictionary Data
		{
			get => extensionintersectswithplateexception.Data;
			set { extensionintersectswithplateexception.Data = value; }
		}

		public System.Exception InnerException
		{
			get => extensionintersectswithplateexception.InnerException;
			set { extensionintersectswithplateexception.InnerException = value; }
		}

		public System.Reflection.MethodBase TargetSite
		{
			get => extensionintersectswithplateexception.TargetSite;
			set { extensionintersectswithplateexception.TargetSite = value; }
		}

		public System.String StackTrace
		{
			get => extensionintersectswithplateexception.StackTrace;
			set { extensionintersectswithplateexception.StackTrace = value; }
		}

		public System.String HelpLink
		{
			get => extensionintersectswithplateexception.HelpLink;
			set { extensionintersectswithplateexception.HelpLink = value; }
		}

		public System.String Source
		{
			get => extensionintersectswithplateexception.Source;
			set { extensionintersectswithplateexception.Source = value; }
		}

		public System.Int32 HResult
		{
			get => extensionintersectswithplateexception.HResult;
			set { extensionintersectswithplateexception.HResult = value; }
		}

        

        dynamic extensionintersectswithplateexception;
        
        public ExtensionIntersectsWithPlateException()
        {
            this.extensionintersectswithplateexception =  TSActivator.CreateInstance("Tekla.Structures.Model.ExtensionIntersectsWithPlateException");
        }

        public ExtensionIntersectsWithPlateException(dynamic tsObject)
        {
            this.extensionintersectswithplateexception = tsObject;
			this.Message = extensionintersectswithplateexception.Message;
			this.Data = extensionintersectswithplateexception.Data;
			this.InnerException = extensionintersectswithplateexception.InnerException;
			this.TargetSite = extensionintersectswithplateexception.TargetSite;
			this.StackTrace = extensionintersectswithplateexception.StackTrace;
			this.HelpLink = extensionintersectswithplateexception.HelpLink;
			this.Source = extensionintersectswithplateexception.Source;
			this.HResult = extensionintersectswithplateexception.HResult;

        }


        public dynamic GetTSObject() => extensionintersectswithplateexception;

		public System.Exception GetBaseException()
			 => extensionintersectswithplateexception.GetBaseException();

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => extensionintersectswithplateexception.GetObjectData(info, context);





    }

}
    
