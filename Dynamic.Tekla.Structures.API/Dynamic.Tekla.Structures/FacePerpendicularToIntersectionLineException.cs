//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class FacePerpendicularToIntersectionLineException 
    {

		public System.String Message
		{
			get => faceperpendiculartointersectionlineexception.Message;
			set { faceperpendiculartointersectionlineexception.Message = value; }
		}

		public System.Collections.IDictionary Data
		{
			get => faceperpendiculartointersectionlineexception.Data;
			set { faceperpendiculartointersectionlineexception.Data = value; }
		}

		public System.Exception InnerException
		{
			get => faceperpendiculartointersectionlineexception.InnerException;
			set { faceperpendiculartointersectionlineexception.InnerException = value; }
		}

		public System.Reflection.MethodBase TargetSite
		{
			get => faceperpendiculartointersectionlineexception.TargetSite;
			set { faceperpendiculartointersectionlineexception.TargetSite = value; }
		}

		public System.String StackTrace
		{
			get => faceperpendiculartointersectionlineexception.StackTrace;
			set { faceperpendiculartointersectionlineexception.StackTrace = value; }
		}

		public System.String HelpLink
		{
			get => faceperpendiculartointersectionlineexception.HelpLink;
			set { faceperpendiculartointersectionlineexception.HelpLink = value; }
		}

		public System.String Source
		{
			get => faceperpendiculartointersectionlineexception.Source;
			set { faceperpendiculartointersectionlineexception.Source = value; }
		}

		public System.Int32 HResult
		{
			get => faceperpendiculartointersectionlineexception.HResult;
			set { faceperpendiculartointersectionlineexception.HResult = value; }
		}

        

        dynamic faceperpendiculartointersectionlineexception;
        
        public FacePerpendicularToIntersectionLineException()
        {
            this.faceperpendiculartointersectionlineexception =  new Tekla.Structures.Model.FacePerpendicularToIntersectionLineException();
        }

        public FacePerpendicularToIntersectionLineException(dynamic tsObject)
        {
            this.faceperpendiculartointersectionlineexception = tsObject;
			this.Message = faceperpendiculartointersectionlineexception.Message;
			this.Data = faceperpendiculartointersectionlineexception.Data;
			this.InnerException = faceperpendiculartointersectionlineexception.InnerException;
			this.TargetSite = faceperpendiculartointersectionlineexception.TargetSite;
			this.StackTrace = faceperpendiculartointersectionlineexception.StackTrace;
			this.HelpLink = faceperpendiculartointersectionlineexception.HelpLink;
			this.Source = faceperpendiculartointersectionlineexception.Source;
			this.HResult = faceperpendiculartointersectionlineexception.HResult;

        }


        public dynamic GetTSObject() => faceperpendiculartointersectionlineexception;

		public System.Exception GetBaseException()
			 => faceperpendiculartointersectionlineexception.GetBaseException();

		public System.String ToString()
			 => faceperpendiculartointersectionlineexception.ToString();

		public System.Type GetType()
			 => faceperpendiculartointersectionlineexception.GetType();

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => faceperpendiculartointersectionlineexception.GetObjectData(info, context);

		public System.Boolean Equals(System.Object obj)
			 => faceperpendiculartointersectionlineexception.Equals(obj);

		public System.Int32 GetHashCode()
			 => faceperpendiculartointersectionlineexception.GetHashCode();

		public System.Type GetType()
			 => faceperpendiculartointersectionlineexception.GetType();





    }

}
    
