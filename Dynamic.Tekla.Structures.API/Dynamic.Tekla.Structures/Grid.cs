//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class Grid 
    {

		public System.String CoordinateX
		{
			get => grid.CoordinateX;
			set { grid.CoordinateX = value; }
		}

		public System.String CoordinateY
		{
			get => grid.CoordinateY;
			set { grid.CoordinateY = value; }
		}

		public System.String CoordinateZ
		{
			get => grid.CoordinateZ;
			set { grid.CoordinateZ = value; }
		}

		public System.String LabelX
		{
			get => grid.LabelX;
			set { grid.LabelX = value; }
		}

		public System.String LabelY
		{
			get => grid.LabelY;
			set { grid.LabelY = value; }
		}

		public System.String LabelZ
		{
			get => grid.LabelZ;
			set { grid.LabelZ = value; }
		}

		public System.Double ExtensionLeftX
		{
			get => grid.ExtensionLeftX;
			set { grid.ExtensionLeftX = value; }
		}

		public System.Double ExtensionLeftY
		{
			get => grid.ExtensionLeftY;
			set { grid.ExtensionLeftY = value; }
		}

		public System.Double ExtensionLeftZ
		{
			get => grid.ExtensionLeftZ;
			set { grid.ExtensionLeftZ = value; }
		}

		public System.Double ExtensionRightX
		{
			get => grid.ExtensionRightX;
			set { grid.ExtensionRightX = value; }
		}

		public System.Double ExtensionRightY
		{
			get => grid.ExtensionRightY;
			set { grid.ExtensionRightY = value; }
		}

		public System.Double ExtensionRightZ
		{
			get => grid.ExtensionRightZ;
			set { grid.ExtensionRightZ = value; }
		}

		public System.Double ExtensionForMagneticArea
		{
			get => grid.ExtensionForMagneticArea;
			set { grid.ExtensionForMagneticArea = value; }
		}

		public System.Int32 Color
		{
			get => grid.Color;
			set { grid.Color = value; }
		}

		public System.Boolean IsMagnetic
		{
			get => grid.IsMagnetic;
			set { grid.IsMagnetic = value; }
		}

		public System.String Name
		{
			get => grid.Name;
			set { grid.Name = value; }
		}

		public System.Int32 FontSize
		{
			get => grid.FontSize;
			set { grid.FontSize = value; }
		}

		public System.Drawing.Color FontColor
		{
			get => grid.FontColor;
			set { grid.FontColor = value; }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Point Origin
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Point(grid.Origin.GetTSObject());
			set { grid.Origin = value.GetTSObject(); }
		}

		public System.DateTime ModificationTime
		{
			get => grid.ModificationTime;
			set { grid.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => grid.IsUpToDate;
			set { grid.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => new Dynamic.Tekla.Structures.Identifier(grid.Identifier.GetTSObject());
			set { grid.Identifier = value.GetTSObject(); }
		}

        

        dynamic grid;
        
        public Grid()
        {
            this.grid =  TSActivator.CreateInstance("Tekla.Structures.Model.Grid");
        }

        public Grid(dynamic tsObject)
        {
            this.grid = tsObject;
			this.CoordinateX = grid.CoordinateX;
			this.CoordinateY = grid.CoordinateY;
			this.CoordinateZ = grid.CoordinateZ;
			this.LabelX = grid.LabelX;
			this.LabelY = grid.LabelY;
			this.LabelZ = grid.LabelZ;
			this.ExtensionLeftX = grid.ExtensionLeftX;
			this.ExtensionLeftY = grid.ExtensionLeftY;
			this.ExtensionLeftZ = grid.ExtensionLeftZ;
			this.ExtensionRightX = grid.ExtensionRightX;
			this.ExtensionRightY = grid.ExtensionRightY;
			this.ExtensionRightZ = grid.ExtensionRightZ;
			this.ExtensionForMagneticArea = grid.ExtensionForMagneticArea;
			this.Color = grid.Color;
			this.IsMagnetic = grid.IsMagnetic;
			this.Name = grid.Name;
			this.FontSize = grid.FontSize;
			this.FontColor = grid.FontColor;
			this.Origin = new Dynamic.Tekla.Structures.Geometry3d.Point(grid.Origin);
			this.ModificationTime = grid.ModificationTime;
			this.IsUpToDate = grid.IsUpToDate;
			this.Identifier = new Dynamic.Tekla.Structures.Identifier(grid.Identifier);

        }


        public dynamic GetTSObject() => grid;

		public System.Boolean Insert()
			 => grid.Insert();

		public System.Boolean Select()
			 => grid.Select();

		public System.Boolean Modify()
			 => grid.Modify();

		public System.Boolean Delete()
			 => grid.Delete();

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(grid.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => new Dynamic.Tekla.Structures.Model.BaseComponent(grid.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(grid.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(System.Collections.Hashtable values)
			 => grid.GetAllUserProperties(values);

		public System.Boolean GetIntegerUserProperties(System.Collections.Hashtable values)
			 => grid.GetIntegerUserProperties(values);

		public System.Boolean GetDoubleUserProperties(System.Collections.Hashtable values)
			 => grid.GetDoubleUserProperties(values);

		public System.Boolean GetStringUserProperties(System.Collections.Hashtable values)
			 => grid.GetStringUserProperties(values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, System.Collections.Hashtable values)
			 => grid.GetAllReportProperties(stringNames, doubleNames, integerNames, values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => grid.GetIntegerReportProperties(names, values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => grid.GetDoubleReportProperties(names, values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => grid.GetStringReportProperties(names, values);

		public System.Boolean GetUserProperty(System.String name, System.String value)
			 => grid.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.String value)
			 => grid.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Double value)
			 => grid.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Double value)
			 => grid.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Int32 value)
			 => grid.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Int32 value)
			 => grid.GetReportProperty(name, value);

		public System.Boolean GetDynamicStringProperty(System.String name, System.String value)
			 => grid.GetDynamicStringProperty(name, value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => grid.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => grid.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => grid.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => grid.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(grid.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => grid.SetPhase(phase.GetTSObject());

		public System.Boolean GetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => grid.GetPhase(phase.GetTSObject());

		public System.Boolean SetLabel(System.String label)
			 => grid.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => grid.CompareTo(obj);





    }

}
    
