//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class InvalidFacePointsException 
    {

		public System.String Message
		{
			get => invalidfacepointsexception.Message;
			set { invalidfacepointsexception.Message = value; }
		}

		public System.Collections.IDictionary Data
		{
			get => invalidfacepointsexception.Data;
			set { invalidfacepointsexception.Data = value; }
		}

		public System.Exception InnerException
		{
			get => invalidfacepointsexception.InnerException;
			set { invalidfacepointsexception.InnerException = value; }
		}

		public System.Reflection.MethodBase TargetSite
		{
			get => invalidfacepointsexception.TargetSite;
			set { invalidfacepointsexception.TargetSite = value; }
		}

		public System.String StackTrace
		{
			get => invalidfacepointsexception.StackTrace;
			set { invalidfacepointsexception.StackTrace = value; }
		}

		public System.String HelpLink
		{
			get => invalidfacepointsexception.HelpLink;
			set { invalidfacepointsexception.HelpLink = value; }
		}

		public System.String Source
		{
			get => invalidfacepointsexception.Source;
			set { invalidfacepointsexception.Source = value; }
		}

		public System.Int32 HResult
		{
			get => invalidfacepointsexception.HResult;
			set { invalidfacepointsexception.HResult = value; }
		}

        

        dynamic invalidfacepointsexception;
        
        public InvalidFacePointsException()
        {
            this.invalidfacepointsexception =  new Tekla.Structures.Model.InvalidFacePointsException();
        }

        public InvalidFacePointsException(dynamic tsObject)
        {
            this.invalidfacepointsexception = tsObject;
			this.Message = invalidfacepointsexception.Message;
			this.Data = invalidfacepointsexception.Data;
			this.InnerException = invalidfacepointsexception.InnerException;
			this.TargetSite = invalidfacepointsexception.TargetSite;
			this.StackTrace = invalidfacepointsexception.StackTrace;
			this.HelpLink = invalidfacepointsexception.HelpLink;
			this.Source = invalidfacepointsexception.Source;
			this.HResult = invalidfacepointsexception.HResult;

        }


        public dynamic GetTSObject() => invalidfacepointsexception;

		public System.Exception GetBaseException()
			 => invalidfacepointsexception.GetBaseException();

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => invalidfacepointsexception.GetObjectData(info, context);





    }

}
    
