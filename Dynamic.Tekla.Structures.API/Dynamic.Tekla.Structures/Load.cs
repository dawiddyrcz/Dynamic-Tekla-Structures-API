//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class Load 
    {

		public Dynamic.Tekla.Structures.Identifier FatherId
		{
			get => new Dynamic.Tekla.Structures.Identifier(load.FatherId.GetTSObject());
			set { load.FatherId = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.LoadSpanningEnum Spanning
		{
			get => Dynamic.Tekla.Structures.Model.LoadSpanningEnum_.FromTSObject(load.Spanning);
			set { load.Spanning = Dynamic.Tekla.Structures.Model.LoadSpanningEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Vector PrimaryAxisDirection
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Vector(load.PrimaryAxisDirection.GetTSObject());
			set { load.PrimaryAxisDirection = value.GetTSObject(); }
		}

		public System.Boolean AutomaticPrimaryAxisWeight
		{
			get => load.AutomaticPrimaryAxisWeight;
			set { load.AutomaticPrimaryAxisWeight = value; }
		}

		public System.Double Weight
		{
			get => load.Weight;
			set { load.Weight = value; }
		}

		public System.Double LoadDispersionAngle
		{
			get => load.LoadDispersionAngle;
			set { load.LoadDispersionAngle = value; }
		}

		public System.Boolean CreateFixedSupportConditionsAutomatically
		{
			get => load.CreateFixedSupportConditionsAutomatically;
			set { load.CreateFixedSupportConditionsAutomatically = value; }
		}

		public Dynamic.Tekla.Structures.Model.LoadAttachmentEnum LoadAttachment
		{
			get => Dynamic.Tekla.Structures.Model.LoadAttachmentEnum_.FromTSObject(load.LoadAttachment);
			set { load.LoadAttachment = Dynamic.Tekla.Structures.Model.LoadAttachmentEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.LoadPartNamesEnum PartNames
		{
			get => Dynamic.Tekla.Structures.Model.LoadPartNamesEnum_.FromTSObject(load.PartNames);
			set { load.PartNames = Dynamic.Tekla.Structures.Model.LoadPartNamesEnum_.FromTSObject(value); }
		}

		public System.String PartFilter
		{
			get => load.PartFilter;
			set { load.PartFilter = value; }
		}

		public System.Double BoundingBoxDx
		{
			get => load.BoundingBoxDx;
			set { load.BoundingBoxDx = value; }
		}

		public System.Double BoundingBoxDy
		{
			get => load.BoundingBoxDy;
			set { load.BoundingBoxDy = value; }
		}

		public System.Double BoundingBoxDz
		{
			get => load.BoundingBoxDz;
			set { load.BoundingBoxDz = value; }
		}

		public Dynamic.Tekla.Structures.Model.LoadGroup Group
		{
			get => new Dynamic.Tekla.Structures.Model.LoadGroup(load.Group.GetTSObject());
			set { load.Group = value.GetTSObject(); }
		}

		public System.Nullable<System.DateTime> ModificationTime
		{
			get => load.ModificationTime;
			set { load.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => load.IsUpToDate;
			set { load.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => new Dynamic.Tekla.Structures.Identifier(load.Identifier.GetTSObject());
			set { load.Identifier = value.GetTSObject(); }
		}

        

        dynamic load;
        
        public Load()
        {
            this.load =  new Tekla.Structures.Model.Load();
        }

        public Load(dynamic tsObject)
        {
            this.load = tsObject;
			this.FatherId = new Dynamic.Tekla.Structures.Identifier(load.FatherId);
			this.Spanning = Dynamic.Tekla.Structures.Model.LoadSpanningEnum_.FromTSObject(load.Spanning);
			this.PrimaryAxisDirection = new Dynamic.Tekla.Structures.Geometry3d.Vector(load.PrimaryAxisDirection);
			this.AutomaticPrimaryAxisWeight = load.AutomaticPrimaryAxisWeight;
			this.Weight = load.Weight;
			this.LoadDispersionAngle = load.LoadDispersionAngle;
			this.CreateFixedSupportConditionsAutomatically = load.CreateFixedSupportConditionsAutomatically;
			this.LoadAttachment = Dynamic.Tekla.Structures.Model.LoadAttachmentEnum_.FromTSObject(load.LoadAttachment);
			this.PartNames = Dynamic.Tekla.Structures.Model.LoadPartNamesEnum_.FromTSObject(load.PartNames);
			this.PartFilter = load.PartFilter;
			this.BoundingBoxDx = load.BoundingBoxDx;
			this.BoundingBoxDy = load.BoundingBoxDy;
			this.BoundingBoxDz = load.BoundingBoxDz;
			this.Group = new Dynamic.Tekla.Structures.Model.LoadGroup(load.Group);
			this.ModificationTime = load.ModificationTime;
			this.IsUpToDate = load.IsUpToDate;
			this.Identifier = new Dynamic.Tekla.Structures.Identifier(load.Identifier);

        }


        public dynamic GetTSObject() => load;

		public System.Boolean Insert()
			 => load.Insert();

		public System.Boolean Select()
			 => load.Select();

		public System.Boolean Modify()
			 => load.Modify();

		public System.Boolean Delete()
			 => load.Delete();

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(load.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => new Dynamic.Tekla.Structures.Model.BaseComponent(load.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(load.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(ref System.Collections.Hashtable values)
			 => load.GetAllUserProperties(ref values);

		public System.Boolean GetIntegerUserProperties(ref System.Collections.Hashtable values)
			 => load.GetIntegerUserProperties(ref values);

		public System.Boolean GetDoubleUserProperties(ref System.Collections.Hashtable values)
			 => load.GetDoubleUserProperties(ref values);

		public System.Boolean GetStringUserProperties(ref System.Collections.Hashtable values)
			 => load.GetStringUserProperties(ref values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, ref System.Collections.Hashtable values)
			 => load.GetAllReportProperties(stringNames, doubleNames, integerNames, ref values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => load.GetIntegerReportProperties(names, ref values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => load.GetDoubleReportProperties(names, ref values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => load.GetStringReportProperties(names, ref values);

		public System.Boolean GetUserProperty(System.String name, ref System.String value)
			 => load.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.String value)
			 => load.GetReportProperty(name, ref value);

		public System.Boolean GetUserProperty(System.String name, ref System.Double value)
			 => load.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.Double value)
			 => load.GetReportProperty(name, ref value);

		public System.Boolean GetUserProperty(System.String name, ref System.Int32 value)
			 => load.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.Int32 value)
			 => load.GetReportProperty(name, ref value);

		public System.Boolean GetDynamicStringProperty(System.String name, ref System.String value)
			 => load.GetDynamicStringProperty(name, ref value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => load.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => load.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => load.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => load.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(load.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => load.SetPhase(phase.GetTSObject());

		public System.Boolean GetPhase(ref Dynamic.Tekla.Structures.Model.Phase phase)
			 => load.GetPhase(ref phase.GetTSObject());

		public System.Boolean SetLabel(System.String label)
			 => load.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => load.CompareTo(obj);

		public System.Boolean Equals(Dynamic.Tekla.Structures.Model.ModelObject other)
			 => load.Equals(other.GetTSObject());

		public System.Boolean Equals(System.Object obj)
			 => load.Equals(obj);

		public System.Int32 GetHashCode()
			 => load.GetHashCode();

		public System.Type GetType()
			 => load.GetType();

		public System.String ToString()
			 => load.ToString();




    public enum LoadSpanningEnum
    {
			LOAD_SPANNING_SINGLE,
			LOAD_SPANNING_DOUBLE        
    }

    public static class LoadSpanningEnum_
    {
        public static dynamic GetTSObject(LoadSpanningEnum dynEnum)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.LoadSpanningEnum");

            switch (dynEnum)
            {
				case LoadSpanningEnum.LOAD_SPANNING_SINGLE:
					return System.Enum.Parse(tsType, "LOAD_SPANNING_SINGLE");
				case LoadSpanningEnum.LOAD_SPANNING_DOUBLE:
					return System.Enum.Parse(tsType, "LOAD_SPANNING_DOUBLE");

                default:
                    throw new System.NotImplementedException(dynEnum.ToString() + "- enum value is not implemented");
            }
        }
    
        public static LoadSpanningEnum FromTSObject(dynamic tsEnum)
        {
            string tsEnumValue = tsEnum.ToString("G", System.Globalization.CultureInfo.InvariantCulture);
            
			if (tsEnumValue.Equals("LOAD_SPANNING_SINGLE", System.StringComparison.InvariantCulture))
				return LoadSpanningEnum.LOAD_SPANNING_SINGLE;
			else if (tsEnumValue.Equals("LOAD_SPANNING_DOUBLE", System.StringComparison.InvariantCulture))
				return LoadSpanningEnum.LOAD_SPANNING_DOUBLE;

            else 
                throw new System.NotImplementedException(tsEnumValue + "- enum value is not implemented");
            
        }
    }


    public enum LoadAttachmentEnum
    {
			LOAD_ATTACHMENT_ATTACH_TO_MEMBER,
			LOAD_ATTACHMENT_DONT_ATTACH        
    }

    public static class LoadAttachmentEnum_
    {
        public static dynamic GetTSObject(LoadAttachmentEnum dynEnum)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.LoadAttachmentEnum");

            switch (dynEnum)
            {
				case LoadAttachmentEnum.LOAD_ATTACHMENT_ATTACH_TO_MEMBER:
					return System.Enum.Parse(tsType, "LOAD_ATTACHMENT_ATTACH_TO_MEMBER");
				case LoadAttachmentEnum.LOAD_ATTACHMENT_DONT_ATTACH:
					return System.Enum.Parse(tsType, "LOAD_ATTACHMENT_DONT_ATTACH");

                default:
                    throw new System.NotImplementedException(dynEnum.ToString() + "- enum value is not implemented");
            }
        }
    
        public static LoadAttachmentEnum FromTSObject(dynamic tsEnum)
        {
            string tsEnumValue = tsEnum.ToString("G", System.Globalization.CultureInfo.InvariantCulture);
            
			if (tsEnumValue.Equals("LOAD_ATTACHMENT_ATTACH_TO_MEMBER", System.StringComparison.InvariantCulture))
				return LoadAttachmentEnum.LOAD_ATTACHMENT_ATTACH_TO_MEMBER;
			else if (tsEnumValue.Equals("LOAD_ATTACHMENT_DONT_ATTACH", System.StringComparison.InvariantCulture))
				return LoadAttachmentEnum.LOAD_ATTACHMENT_DONT_ATTACH;

            else 
                throw new System.NotImplementedException(tsEnumValue + "- enum value is not implemented");
            
        }
    }


    public enum LoadPartNamesEnum
    {
			LOAD_PART_NAMES_EXCLUDE,
			LOAD_PART_NAMES_INCLUDE        
    }

    public static class LoadPartNamesEnum_
    {
        public static dynamic GetTSObject(LoadPartNamesEnum dynEnum)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.LoadPartNamesEnum");

            switch (dynEnum)
            {
				case LoadPartNamesEnum.LOAD_PART_NAMES_EXCLUDE:
					return System.Enum.Parse(tsType, "LOAD_PART_NAMES_EXCLUDE");
				case LoadPartNamesEnum.LOAD_PART_NAMES_INCLUDE:
					return System.Enum.Parse(tsType, "LOAD_PART_NAMES_INCLUDE");

                default:
                    throw new System.NotImplementedException(dynEnum.ToString() + "- enum value is not implemented");
            }
        }
    
        public static LoadPartNamesEnum FromTSObject(dynamic tsEnum)
        {
            string tsEnumValue = tsEnum.ToString("G", System.Globalization.CultureInfo.InvariantCulture);
            
			if (tsEnumValue.Equals("LOAD_PART_NAMES_EXCLUDE", System.StringComparison.InvariantCulture))
				return LoadPartNamesEnum.LOAD_PART_NAMES_EXCLUDE;
			else if (tsEnumValue.Equals("LOAD_PART_NAMES_INCLUDE", System.StringComparison.InvariantCulture))
				return LoadPartNamesEnum.LOAD_PART_NAMES_INCLUDE;

            else 
                throw new System.NotImplementedException(tsEnumValue + "- enum value is not implemented");
            
        }
    }



    }

}
    
