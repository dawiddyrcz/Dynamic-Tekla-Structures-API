//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Filtering.Categories
{

    public sealed class LogicalAreaFilterExpressions 
    {

        

        dynamic logicalareafilterexpressions;
        
        public LogicalAreaFilterExpressions()
        {
            this.logicalareafilterexpressions =  new Tekla.Structures.Filtering.Categories.LogicalAreaFilterExpressions();
        }

        public LogicalAreaFilterExpressions(dynamic tsObject)
        {
            this.logicalareafilterexpressions = tsObject;

        }


        public dynamic GetTSObject() => logicalareafilterexpressions;

		public System.Boolean Equals(System.Object obj)
			 => logicalareafilterexpressions.Equals(obj);

		public System.Int32 GetHashCode()
			 => logicalareafilterexpressions.GetHashCode();

		public System.Type GetType()
			 => logicalareafilterexpressions.GetType();

		public System.String ToString()
			 => logicalareafilterexpressions.ToString();




    public sealed class CustomBoolean 
    {

        

        dynamic customboolean;
        
        public CustomBoolean()
        {
            this.customboolean =  new Tekla.Structures.Filtering.Categories.CustomBoolean();
        }

        public CustomBoolean(dynamic tsObject)
        {
            this.customboolean = tsObject;

        }


        public dynamic GetTSObject() => customboolean;

		public System.String ToString()
			 => customboolean.ToString();

		public System.Boolean Equals(System.Object obj)
			 => customboolean.Equals(obj);

		public System.Int32 GetHashCode()
			 => customboolean.GetHashCode();

		public System.Type GetType()
			 => customboolean.GetType();





    }


    public sealed class CustomDateTime 
    {

        

        dynamic customdatetime;
        
        public CustomDateTime()
        {
            this.customdatetime =  new Tekla.Structures.Filtering.Categories.CustomDateTime();
        }

        public CustomDateTime(dynamic tsObject)
        {
            this.customdatetime = tsObject;

        }


        public dynamic GetTSObject() => customdatetime;

		public System.String ToString()
			 => customdatetime.ToString();

		public System.Boolean Equals(System.Object obj)
			 => customdatetime.Equals(obj);

		public System.Int32 GetHashCode()
			 => customdatetime.GetHashCode();

		public System.Type GetType()
			 => customdatetime.GetType();





    }


    public sealed class CustomNumber 
    {

        

        dynamic customnumber;
        
        public CustomNumber()
        {
            this.customnumber =  new Tekla.Structures.Filtering.Categories.CustomNumber();
        }

        public CustomNumber(dynamic tsObject)
        {
            this.customnumber = tsObject;

        }


        public dynamic GetTSObject() => customnumber;

		public System.String ToString()
			 => customnumber.ToString();

		public System.Boolean Equals(System.Object obj)
			 => customnumber.Equals(obj);

		public System.Int32 GetHashCode()
			 => customnumber.GetHashCode();

		public System.Type GetType()
			 => customnumber.GetType();





    }


    public sealed class CustomString 
    {

        

        dynamic customstring;
        
        public CustomString()
        {
            this.customstring =  new Tekla.Structures.Filtering.Categories.CustomString();
        }

        public CustomString(dynamic tsObject)
        {
            this.customstring = tsObject;

        }


        public dynamic GetTSObject() => customstring;

		public System.String ToString()
			 => customstring.ToString();

		public System.Boolean Equals(System.Object obj)
			 => customstring.Equals(obj);

		public System.Int32 GetHashCode()
			 => customstring.GetHashCode();

		public System.Type GetType()
			 => customstring.GetType();





    }


    public sealed class Building 
    {

        

        dynamic building;
        
        public Building()
        {
            this.building =  new Tekla.Structures.Filtering.Categories.Building();
        }

        public Building(dynamic tsObject)
        {
            this.building = tsObject;

        }


        public dynamic GetTSObject() => building;

		public System.String ToString()
			 => building.ToString();

		public System.Boolean Equals(System.Object obj)
			 => building.Equals(obj);

		public System.Int32 GetHashCode()
			 => building.GetHashCode();

		public System.Type GetType()
			 => building.GetType();





    }


    public sealed class Section 
    {

        

        dynamic section;
        
        public Section()
        {
            this.section =  new Tekla.Structures.Filtering.Categories.Section();
        }

        public Section(dynamic tsObject)
        {
            this.section = tsObject;

        }


        public dynamic GetTSObject() => section;

		public System.String ToString()
			 => section.ToString();

		public System.Boolean Equals(System.Object obj)
			 => section.Equals(obj);

		public System.Int32 GetHashCode()
			 => section.GetHashCode();

		public System.Type GetType()
			 => section.GetType();





    }


    public sealed class Site 
    {

        

        dynamic site;
        
        public Site()
        {
            this.site =  new Tekla.Structures.Filtering.Categories.Site();
        }

        public Site(dynamic tsObject)
        {
            this.site = tsObject;

        }


        public dynamic GetTSObject() => site;

		public System.String ToString()
			 => site.ToString();

		public System.Boolean Equals(System.Object obj)
			 => site.Equals(obj);

		public System.Int32 GetHashCode()
			 => site.GetHashCode();

		public System.Type GetType()
			 => site.GetType();





    }


    public sealed class Story 
    {

        

        dynamic story;
        
        public Story()
        {
            this.story =  new Tekla.Structures.Filtering.Categories.Story();
        }

        public Story(dynamic tsObject)
        {
            this.story = tsObject;

        }


        public dynamic GetTSObject() => story;

		public System.String ToString()
			 => story.ToString();

		public System.Boolean Equals(System.Object obj)
			 => story.Equals(obj);

		public System.Int32 GetHashCode()
			 => story.GetHashCode();

		public System.Type GetType()
			 => story.GetType();





    }



    }

}
    
