//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model.UI
{

    public sealed class ModelObjectVisualization 
    {

        

        dynamic modelobjectvisualization;
        
        public ModelObjectVisualization()
        {
            this.modelobjectvisualization =  new Tekla.Structures.Model.UI.ModelObjectVisualization();
        }

        public ModelObjectVisualization(dynamic tsObject)
        {
            this.modelobjectvisualization = tsObject;

        }


        public dynamic GetTSObject() => modelobjectvisualization;

		public System.Boolean SetTemporaryStateForAll(Dynamic.Tekla.Structures.Model.UI.Color color)
			 => modelobjectvisualization.SetTemporaryStateForAll(color.GetTSObject());

		public System.Boolean SetTemporaryState(System.Collections.Generic.ListTekla.Structures.Model.ModelObject, Tekla.Structures.Model, Version=2019.1.0.0, Culture=neutral, PublicKeyToken=2f04dbe497b71114<Dynamic.Tekla.Structures.Model.ModelObject> modelObjects, Dynamic.Tekla.Structures.Model.UI.Color color)
			 => modelobjectvisualization.SetTemporaryState(modelObjects, color.GetTSObject());

		public System.Boolean SetTransparencyForAll(Dynamic.Tekla.Structures.Model.UI.TemporaryTransparency transparency)
			 => modelobjectvisualization.SetTransparencyForAll(transparency.GetTSObject());

		public System.Boolean SetTransparency(System.Collections.Generic.ListTekla.Structures.Model.ModelObject, Tekla.Structures.Model, Version=2019.1.0.0, Culture=neutral, PublicKeyToken=2f04dbe497b71114<Dynamic.Tekla.Structures.Model.ModelObject> modelObjects, Dynamic.Tekla.Structures.Model.UI.TemporaryTransparency transparency)
			 => modelobjectvisualization.SetTransparency(modelObjects, transparency.GetTSObject());

		public System.Boolean SetTransparency(System.Collections.Generic.ListTekla.Structures.Identifier, Tekla.Structures, Version=2019.1.0.0, Culture=neutral, PublicKeyToken=2f04dbe497b71114<Dynamic.Tekla.Structures.Identifier> identifiers, Dynamic.Tekla.Structures.Model.UI.TemporaryTransparency transparency)
			 => modelobjectvisualization.SetTransparency(identifiers, transparency.GetTSObject());

		public System.Boolean SetTemporaryState(System.Collections.Generic.ListTekla.Structures.Identifier, Tekla.Structures, Version=2019.1.0.0, Culture=neutral, PublicKeyToken=2f04dbe497b71114<Dynamic.Tekla.Structures.Identifier> identifiers, Dynamic.Tekla.Structures.Model.UI.Color color)
			 => modelobjectvisualization.SetTemporaryState(identifiers, color.GetTSObject());

		public System.Boolean GetRepresentation(Dynamic.Tekla.Structures.Model.ModelObject modelObject, ref Dynamic.Tekla.Structures.Model.UI.Color color)
			 => modelobjectvisualization.GetRepresentation(modelObject.GetTSObject(), ref color.GetTSObject());

		public System.Boolean ClearAllTemporaryStates()
			 => modelobjectvisualization.ClearAllTemporaryStates();

		public System.Boolean Equals(System.Object obj)
			 => modelobjectvisualization.Equals(obj);

		public System.Int32 GetHashCode()
			 => modelobjectvisualization.GetHashCode();

		public System.Type GetType()
			 => modelobjectvisualization.GetType();

		public System.String ToString()
			 => modelobjectvisualization.ToString();





    }

}
    
