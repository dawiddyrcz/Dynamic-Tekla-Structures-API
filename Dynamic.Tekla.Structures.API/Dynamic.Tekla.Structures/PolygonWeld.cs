//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class PolygonWeld 
    {

		public Dynamic.Tekla.Structures.Model.Polygon Polygon
		{
			get => new Dynamic.Tekla.Structures.Model.Polygon(polygonweld.Polygon.GetTSObject());
			set { polygonweld.Polygon = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.ModelObject MainObject
		{
			get => new Dynamic.Tekla.Structures.Model.ModelObject(polygonweld.MainObject.GetTSObject());
			set { polygonweld.MainObject = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.ModelObject SecondaryObject
		{
			get => new Dynamic.Tekla.Structures.Model.ModelObject(polygonweld.SecondaryObject.GetTSObject());
			set { polygonweld.SecondaryObject = value.GetTSObject(); }
		}

		public System.Double SizeAbove
		{
			get => polygonweld.SizeAbove;
			set { polygonweld.SizeAbove = value; }
		}

		public System.Double AdditionalSizeAbove
		{
			get => polygonweld.AdditionalSizeAbove;
			set { polygonweld.AdditionalSizeAbove = value; }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldTypeEnum TypeAbove
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldTypeEnum_.FromTSObject(polygonweld.TypeAbove);
			set { polygonweld.TypeAbove = Dynamic.Tekla.Structures.Model.BaseWeld.WeldTypeEnum_.FromTSObject(value); }
		}

		public System.Double AngleAbove
		{
			get => polygonweld.AngleAbove;
			set { polygonweld.AngleAbove = value; }
		}

		public System.Double LengthAbove
		{
			get => polygonweld.LengthAbove;
			set { polygonweld.LengthAbove = value; }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldContourEnum ContourAbove
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldContourEnum_.FromTSObject(polygonweld.ContourAbove);
			set { polygonweld.ContourAbove = Dynamic.Tekla.Structures.Model.BaseWeld.WeldContourEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldFinishEnum FinishAbove
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldFinishEnum_.FromTSObject(polygonweld.FinishAbove);
			set { polygonweld.FinishAbove = Dynamic.Tekla.Structures.Model.BaseWeld.WeldFinishEnum_.FromTSObject(value); }
		}

		public System.Double PitchAbove
		{
			get => polygonweld.PitchAbove;
			set { polygonweld.PitchAbove = value; }
		}

		public System.Double SizeBelow
		{
			get => polygonweld.SizeBelow;
			set { polygonweld.SizeBelow = value; }
		}

		public System.Double AdditionalSizeBelow
		{
			get => polygonweld.AdditionalSizeBelow;
			set { polygonweld.AdditionalSizeBelow = value; }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldTypeEnum TypeBelow
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldTypeEnum_.FromTSObject(polygonweld.TypeBelow);
			set { polygonweld.TypeBelow = Dynamic.Tekla.Structures.Model.BaseWeld.WeldTypeEnum_.FromTSObject(value); }
		}

		public System.Double AngleBelow
		{
			get => polygonweld.AngleBelow;
			set { polygonweld.AngleBelow = value; }
		}

		public System.Double LengthBelow
		{
			get => polygonweld.LengthBelow;
			set { polygonweld.LengthBelow = value; }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldContourEnum ContourBelow
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldContourEnum_.FromTSObject(polygonweld.ContourBelow);
			set { polygonweld.ContourBelow = Dynamic.Tekla.Structures.Model.BaseWeld.WeldContourEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldFinishEnum FinishBelow
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldFinishEnum_.FromTSObject(polygonweld.FinishBelow);
			set { polygonweld.FinishBelow = Dynamic.Tekla.Structures.Model.BaseWeld.WeldFinishEnum_.FromTSObject(value); }
		}

		public System.Double PitchBelow
		{
			get => polygonweld.PitchBelow;
			set { polygonweld.PitchBelow = value; }
		}

		public System.Boolean ShopWeld
		{
			get => polygonweld.ShopWeld;
			set { polygonweld.ShopWeld = value; }
		}

		public System.Boolean AroundWeld
		{
			get => polygonweld.AroundWeld;
			set { polygonweld.AroundWeld = value; }
		}

		public System.Boolean StitchWeld
		{
			get => polygonweld.StitchWeld;
			set { polygonweld.StitchWeld = value; }
		}

		public System.Double RootOpeningAbove
		{
			get => polygonweld.RootOpeningAbove;
			set { polygonweld.RootOpeningAbove = value; }
		}

		public System.Double RootFaceAbove
		{
			get => polygonweld.RootFaceAbove;
			set { polygonweld.RootFaceAbove = value; }
		}

		public System.Double EffectiveThroatAbove
		{
			get => polygonweld.EffectiveThroatAbove;
			set { polygonweld.EffectiveThroatAbove = value; }
		}

		public System.Int32 IncrementAmountAbove
		{
			get => polygonweld.IncrementAmountAbove;
			set { polygonweld.IncrementAmountAbove = value; }
		}

		public System.Double RootOpeningBelow
		{
			get => polygonweld.RootOpeningBelow;
			set { polygonweld.RootOpeningBelow = value; }
		}

		public System.Double RootFaceBelow
		{
			get => polygonweld.RootFaceBelow;
			set { polygonweld.RootFaceBelow = value; }
		}

		public System.Double EffectiveThroatBelow
		{
			get => polygonweld.EffectiveThroatBelow;
			set { polygonweld.EffectiveThroatBelow = value; }
		}

		public System.Int32 IncrementAmountBelow
		{
			get => polygonweld.IncrementAmountBelow;
			set { polygonweld.IncrementAmountBelow = value; }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldElectrodeClassificationEnum ElectrodeClassification
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldElectrodeClassificationEnum_.FromTSObject(polygonweld.ElectrodeClassification);
			set { polygonweld.ElectrodeClassification = Dynamic.Tekla.Structures.Model.BaseWeld.WeldElectrodeClassificationEnum_.FromTSObject(value); }
		}

		public System.Double ElectrodeStrength
		{
			get => polygonweld.ElectrodeStrength;
			set { polygonweld.ElectrodeStrength = value; }
		}

		public System.Double ElectrodeCoefficient
		{
			get => polygonweld.ElectrodeCoefficient;
			set { polygonweld.ElectrodeCoefficient = value; }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldProcessTypeEnum ProcessType
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldProcessTypeEnum_.FromTSObject(polygonweld.ProcessType);
			set { polygonweld.ProcessType = Dynamic.Tekla.Structures.Model.BaseWeld.WeldProcessTypeEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldNDTInspectionEnum NDTInspection
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldNDTInspectionEnum_.FromTSObject(polygonweld.NDTInspection);
			set { polygonweld.NDTInspection = Dynamic.Tekla.Structures.Model.BaseWeld.WeldNDTInspectionEnum_.FromTSObject(value); }
		}

		public System.Boolean ConnectAssemblies
		{
			get => polygonweld.ConnectAssemblies;
			set { polygonweld.ConnectAssemblies = value; }
		}

		public System.String ReferenceText
		{
			get => polygonweld.ReferenceText;
			set { polygonweld.ReferenceText = value; }
		}

		public System.String PrefixAboveLine
		{
			get => polygonweld.PrefixAboveLine;
			set { polygonweld.PrefixAboveLine = value; }
		}

		public System.String PrefixBelowLine
		{
			get => polygonweld.PrefixBelowLine;
			set { polygonweld.PrefixBelowLine = value; }
		}

		public System.String Standard
		{
			get => polygonweld.Standard;
			set { polygonweld.Standard = value; }
		}

		public System.Int32 WeldNumber
		{
			get => polygonweld.WeldNumber;
			set { polygonweld.WeldNumber = value; }
		}

		public System.String WeldNumberPrefix
		{
			get => polygonweld.WeldNumberPrefix;
			set { polygonweld.WeldNumberPrefix = value; }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldIntermittentTypeEnum IntermittentType
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldIntermittentTypeEnum_.FromTSObject(polygonweld.IntermittentType);
			set { polygonweld.IntermittentType = Dynamic.Tekla.Structures.Model.BaseWeld.WeldIntermittentTypeEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldPlacementTypeEnum Placement
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldPlacementTypeEnum_.FromTSObject(polygonweld.Placement);
			set { polygonweld.Placement = Dynamic.Tekla.Structures.Model.BaseWeld.WeldPlacementTypeEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldPreparationTypeEnum Preparation
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldPreparationTypeEnum_.FromTSObject(polygonweld.Preparation);
			set { polygonweld.Preparation = Dynamic.Tekla.Structures.Model.BaseWeld.WeldPreparationTypeEnum_.FromTSObject(value); }
		}

		public System.DateTime ModificationTime
		{
			get => polygonweld.ModificationTime;
			set { polygonweld.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => polygonweld.IsUpToDate;
			set { polygonweld.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => new Dynamic.Tekla.Structures.Identifier(polygonweld.Identifier.GetTSObject());
			set { polygonweld.Identifier = value.GetTSObject(); }
		}

        

        dynamic polygonweld;
        
        public PolygonWeld()
        {
            this.polygonweld =  new Tekla.Structures.Model.PolygonWeld();
        }

        public PolygonWeld(dynamic tsObject)
        {
            this.polygonweld = tsObject;
			this.Polygon = new Dynamic.Tekla.Structures.Model.Polygon(polygonweld.Polygon);
			this.MainObject = new Dynamic.Tekla.Structures.Model.ModelObject(polygonweld.MainObject);
			this.SecondaryObject = new Dynamic.Tekla.Structures.Model.ModelObject(polygonweld.SecondaryObject);
			this.SizeAbove = polygonweld.SizeAbove;
			this.AdditionalSizeAbove = polygonweld.AdditionalSizeAbove;
			this.TypeAbove = Dynamic.Tekla.Structures.Model.BaseWeld.WeldTypeEnum_.FromTSObject(polygonweld.TypeAbove);
			this.AngleAbove = polygonweld.AngleAbove;
			this.LengthAbove = polygonweld.LengthAbove;
			this.ContourAbove = Dynamic.Tekla.Structures.Model.BaseWeld.WeldContourEnum_.FromTSObject(polygonweld.ContourAbove);
			this.FinishAbove = Dynamic.Tekla.Structures.Model.BaseWeld.WeldFinishEnum_.FromTSObject(polygonweld.FinishAbove);
			this.PitchAbove = polygonweld.PitchAbove;
			this.SizeBelow = polygonweld.SizeBelow;
			this.AdditionalSizeBelow = polygonweld.AdditionalSizeBelow;
			this.TypeBelow = Dynamic.Tekla.Structures.Model.BaseWeld.WeldTypeEnum_.FromTSObject(polygonweld.TypeBelow);
			this.AngleBelow = polygonweld.AngleBelow;
			this.LengthBelow = polygonweld.LengthBelow;
			this.ContourBelow = Dynamic.Tekla.Structures.Model.BaseWeld.WeldContourEnum_.FromTSObject(polygonweld.ContourBelow);
			this.FinishBelow = Dynamic.Tekla.Structures.Model.BaseWeld.WeldFinishEnum_.FromTSObject(polygonweld.FinishBelow);
			this.PitchBelow = polygonweld.PitchBelow;
			this.ShopWeld = polygonweld.ShopWeld;
			this.AroundWeld = polygonweld.AroundWeld;
			this.StitchWeld = polygonweld.StitchWeld;
			this.RootOpeningAbove = polygonweld.RootOpeningAbove;
			this.RootFaceAbove = polygonweld.RootFaceAbove;
			this.EffectiveThroatAbove = polygonweld.EffectiveThroatAbove;
			this.IncrementAmountAbove = polygonweld.IncrementAmountAbove;
			this.RootOpeningBelow = polygonweld.RootOpeningBelow;
			this.RootFaceBelow = polygonweld.RootFaceBelow;
			this.EffectiveThroatBelow = polygonweld.EffectiveThroatBelow;
			this.IncrementAmountBelow = polygonweld.IncrementAmountBelow;
			this.ElectrodeClassification = Dynamic.Tekla.Structures.Model.BaseWeld.WeldElectrodeClassificationEnum_.FromTSObject(polygonweld.ElectrodeClassification);
			this.ElectrodeStrength = polygonweld.ElectrodeStrength;
			this.ElectrodeCoefficient = polygonweld.ElectrodeCoefficient;
			this.ProcessType = Dynamic.Tekla.Structures.Model.BaseWeld.WeldProcessTypeEnum_.FromTSObject(polygonweld.ProcessType);
			this.NDTInspection = Dynamic.Tekla.Structures.Model.BaseWeld.WeldNDTInspectionEnum_.FromTSObject(polygonweld.NDTInspection);
			this.ConnectAssemblies = polygonweld.ConnectAssemblies;
			this.ReferenceText = polygonweld.ReferenceText;
			this.PrefixAboveLine = polygonweld.PrefixAboveLine;
			this.PrefixBelowLine = polygonweld.PrefixBelowLine;
			this.Standard = polygonweld.Standard;
			this.WeldNumber = polygonweld.WeldNumber;
			this.WeldNumberPrefix = polygonweld.WeldNumberPrefix;
			this.IntermittentType = Dynamic.Tekla.Structures.Model.BaseWeld.WeldIntermittentTypeEnum_.FromTSObject(polygonweld.IntermittentType);
			this.Placement = Dynamic.Tekla.Structures.Model.BaseWeld.WeldPlacementTypeEnum_.FromTSObject(polygonweld.Placement);
			this.Preparation = Dynamic.Tekla.Structures.Model.BaseWeld.WeldPreparationTypeEnum_.FromTSObject(polygonweld.Preparation);
			this.ModificationTime = polygonweld.ModificationTime;
			this.IsUpToDate = polygonweld.IsUpToDate;
			this.Identifier = new Dynamic.Tekla.Structures.Identifier(polygonweld.Identifier);

        }


        public dynamic GetTSObject() => polygonweld;

		public System.Boolean Insert()
			 => polygonweld.Insert();

		public System.Boolean Select()
			 => polygonweld.Select();

		public System.Boolean Modify()
			 => polygonweld.Modify();

		public System.Boolean Delete()
			 => polygonweld.Delete();

		public System.Boolean GetLogicalWeld(ref Dynamic.Tekla.Structures.Model.LogicalWeld LogicalWeld)
			 => polygonweld.GetLogicalWeld(ref LogicalWeld.GetTSObject());

		public System.Collections.ArrayList GetWeldGeometries()
			 => polygonweld.GetWeldGeometries();

		public Dynamic.Tekla.Structures.Model.Solid GetSolid()
			 => new Dynamic.Tekla.Structures.Model.Solid(polygonweld.GetSolid());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(polygonweld.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => new Dynamic.Tekla.Structures.Model.BaseComponent(polygonweld.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(polygonweld.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(ref System.Collections.Hashtable values)
			 => polygonweld.GetAllUserProperties(ref values);

		public System.Boolean GetIntegerUserProperties(ref System.Collections.Hashtable values)
			 => polygonweld.GetIntegerUserProperties(ref values);

		public System.Boolean GetDoubleUserProperties(ref System.Collections.Hashtable values)
			 => polygonweld.GetDoubleUserProperties(ref values);

		public System.Boolean GetStringUserProperties(ref System.Collections.Hashtable values)
			 => polygonweld.GetStringUserProperties(ref values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, ref System.Collections.Hashtable values)
			 => polygonweld.GetAllReportProperties(stringNames, doubleNames, integerNames, ref values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => polygonweld.GetIntegerReportProperties(names, ref values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => polygonweld.GetDoubleReportProperties(names, ref values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => polygonweld.GetStringReportProperties(names, ref values);

		public System.Boolean GetUserProperty(System.String name, ref System.String value)
			 => polygonweld.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.String value)
			 => polygonweld.GetReportProperty(name, ref value);

		public System.Boolean GetUserProperty(System.String name, ref System.Double value)
			 => polygonweld.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.Double value)
			 => polygonweld.GetReportProperty(name, ref value);

		public System.Boolean GetUserProperty(System.String name, ref System.Int32 value)
			 => polygonweld.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.Int32 value)
			 => polygonweld.GetReportProperty(name, ref value);

		public System.Boolean GetDynamicStringProperty(System.String name, ref System.String value)
			 => polygonweld.GetDynamicStringProperty(name, ref value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => polygonweld.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => polygonweld.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => polygonweld.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => polygonweld.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(polygonweld.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => polygonweld.SetPhase(phase.GetTSObject());

		public System.Boolean GetPhase(ref Dynamic.Tekla.Structures.Model.Phase phase)
			 => polygonweld.GetPhase(ref phase.GetTSObject());

		public System.Boolean SetLabel(System.String label)
			 => polygonweld.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => polygonweld.CompareTo(obj);





    }

}
    
