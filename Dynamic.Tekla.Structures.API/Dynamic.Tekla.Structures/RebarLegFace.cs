//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class RebarLegFace 
    {

		public System.Int32 Id
		{
			get => rebarlegface.Id;
			set { rebarlegface.Id = value; }
		}

		public System.Double AdditonalOffset
		{
			get => rebarlegface.AdditonalOffset;
			set { rebarlegface.AdditonalOffset = value; }
		}

		public System.Int32 LayerOrderNumber
		{
			get => rebarlegface.LayerOrderNumber;
			set { rebarlegface.LayerOrderNumber = value; }
		}

		public System.Boolean Reversed
		{
			get => rebarlegface.Reversed;
			set { rebarlegface.Reversed = value; }
		}

		public Dynamic.Tekla.Structures.Model.Contour Contour
		{
			get => new Dynamic.Tekla.Structures.Model.Contour(rebarlegface.Contour.GetTSObject());
			set { rebarlegface.Contour = value.GetTSObject(); }
		}

        

        dynamic rebarlegface;
        
        public RebarLegFace()
        {
            this.rebarlegface =  new Tekla.Structures.Model.RebarLegFace();
        }

        public RebarLegFace(dynamic tsObject)
        {
            this.rebarlegface = tsObject;
			this.Id = rebarlegface.Id;
			this.AdditonalOffset = rebarlegface.AdditonalOffset;
			this.LayerOrderNumber = rebarlegface.LayerOrderNumber;
			this.Reversed = rebarlegface.Reversed;
			this.Contour = new Dynamic.Tekla.Structures.Model.Contour(rebarlegface.Contour);

        }


        public dynamic GetTSObject() => rebarlegface;

		public System.Boolean Equals(System.Object obj)
			 => rebarlegface.Equals(obj);

		public System.Int32 GetHashCode()
			 => rebarlegface.GetHashCode();

		public System.Type GetType()
			 => rebarlegface.GetType();

		public System.String ToString()
			 => rebarlegface.ToString();





    }

}
    
