//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class RebarPropertyModifier 
    {

		public Dynamic.Tekla.Structures.Model.RebarPropertiesNullable RebarProperties
		{
			get => new Dynamic.Tekla.Structures.Model.RebarPropertiesNullable(rebarpropertymodifier.RebarProperties.GetTSObject());
			set { rebarpropertymodifier.RebarProperties = value.GetTSObject(); }
		}

		public Tekla.Structures.Model.RebarPropertyModifier.GroupingTypeEnum GroupingType
		{
			get => rebarpropertymodifier.GroupingType;
			set { rebarpropertymodifier.GroupingType = value; }
		}

		public Dynamic.Tekla.Structures.Model.RebarSet Father
		{
			get => new Dynamic.Tekla.Structures.Model.RebarSet(rebarpropertymodifier.Father.GetTSObject());
			set { rebarpropertymodifier.Father = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.Contour Curve
		{
			get => new Dynamic.Tekla.Structures.Model.Contour(rebarpropertymodifier.Curve.GetTSObject());
			set { rebarpropertymodifier.Curve = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.BaseRebarModifier.BarsAffectedEnum BarsAffected
		{
			get => Dynamic.Tekla.Structures.Model.BaseRebarModifier.BarsAffectedEnum_.FromTSObject(rebarpropertymodifier.BarsAffected);
			set { rebarpropertymodifier.BarsAffected = Dynamic.Tekla.Structures.Model.BaseRebarModifier.BarsAffectedEnum_.FromTSObject(value); }
		}

		public System.Int32 FirstAffectedBar
		{
			get => rebarpropertymodifier.FirstAffectedBar;
			set { rebarpropertymodifier.FirstAffectedBar = value; }
		}

		public System.DateTime ModificationTime
		{
			get => rebarpropertymodifier.ModificationTime;
			set { rebarpropertymodifier.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => rebarpropertymodifier.IsUpToDate;
			set { rebarpropertymodifier.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => new Dynamic.Tekla.Structures.Identifier(rebarpropertymodifier.Identifier.GetTSObject());
			set { rebarpropertymodifier.Identifier = value.GetTSObject(); }
		}

        

        dynamic rebarpropertymodifier;
        
        public RebarPropertyModifier()
        {
            this.rebarpropertymodifier =  new Tekla.Structures.Model.RebarPropertyModifier();
        }

        public RebarPropertyModifier(dynamic tsObject)
        {
            this.rebarpropertymodifier = tsObject;
			this.RebarProperties = new Dynamic.Tekla.Structures.Model.RebarPropertiesNullable(rebarpropertymodifier.RebarProperties);
			this.GroupingType = rebarpropertymodifier.GroupingType;
			this.Father = new Dynamic.Tekla.Structures.Model.RebarSet(rebarpropertymodifier.Father);
			this.Curve = new Dynamic.Tekla.Structures.Model.Contour(rebarpropertymodifier.Curve);
			this.BarsAffected = Dynamic.Tekla.Structures.Model.BaseRebarModifier.BarsAffectedEnum_.FromTSObject(rebarpropertymodifier.BarsAffected);
			this.FirstAffectedBar = rebarpropertymodifier.FirstAffectedBar;
			this.ModificationTime = rebarpropertymodifier.ModificationTime;
			this.IsUpToDate = rebarpropertymodifier.IsUpToDate;
			this.Identifier = new Dynamic.Tekla.Structures.Identifier(rebarpropertymodifier.Identifier);

        }


        public dynamic GetTSObject() => rebarpropertymodifier;

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetAffectedBars()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(rebarpropertymodifier.GetAffectedBars());

		public System.Boolean Insert()
			 => rebarpropertymodifier.Insert();

		public System.Boolean Modify()
			 => rebarpropertymodifier.Modify();

		public System.Boolean Delete()
			 => rebarpropertymodifier.Delete();

		public System.Boolean Select()
			 => rebarpropertymodifier.Select();

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(rebarpropertymodifier.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => new Dynamic.Tekla.Structures.Model.BaseComponent(rebarpropertymodifier.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(rebarpropertymodifier.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(ref System.Collections.Hashtable values)
			 => rebarpropertymodifier.GetAllUserProperties(ref values);

		public System.Boolean GetIntegerUserProperties(ref System.Collections.Hashtable values)
			 => rebarpropertymodifier.GetIntegerUserProperties(ref values);

		public System.Boolean GetDoubleUserProperties(ref System.Collections.Hashtable values)
			 => rebarpropertymodifier.GetDoubleUserProperties(ref values);

		public System.Boolean GetStringUserProperties(ref System.Collections.Hashtable values)
			 => rebarpropertymodifier.GetStringUserProperties(ref values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, ref System.Collections.Hashtable values)
			 => rebarpropertymodifier.GetAllReportProperties(stringNames, doubleNames, integerNames, ref values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => rebarpropertymodifier.GetIntegerReportProperties(names, ref values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => rebarpropertymodifier.GetDoubleReportProperties(names, ref values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => rebarpropertymodifier.GetStringReportProperties(names, ref values);

		public System.Boolean GetUserProperty(System.String name, ref System.String value)
			 => rebarpropertymodifier.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.String value)
			 => rebarpropertymodifier.GetReportProperty(name, ref value);

		public System.Boolean GetUserProperty(System.String name, ref System.Double value)
			 => rebarpropertymodifier.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.Double value)
			 => rebarpropertymodifier.GetReportProperty(name, ref value);

		public System.Boolean GetUserProperty(System.String name, ref System.Int32 value)
			 => rebarpropertymodifier.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.Int32 value)
			 => rebarpropertymodifier.GetReportProperty(name, ref value);

		public System.Boolean GetDynamicStringProperty(System.String name, ref System.String value)
			 => rebarpropertymodifier.GetDynamicStringProperty(name, ref value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => rebarpropertymodifier.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => rebarpropertymodifier.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => rebarpropertymodifier.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => rebarpropertymodifier.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(rebarpropertymodifier.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => rebarpropertymodifier.SetPhase(phase.GetTSObject());

		public System.Boolean GetPhase(ref Dynamic.Tekla.Structures.Model.Phase phase)
			 => rebarpropertymodifier.GetPhase(ref phase.GetTSObject());

		public System.Boolean SetLabel(System.String label)
			 => rebarpropertymodifier.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => rebarpropertymodifier.CompareTo(obj);

		public System.Boolean Equals(Dynamic.Tekla.Structures.Model.ModelObject other)
			 => rebarpropertymodifier.Equals(other.GetTSObject());

		public System.Boolean Equals(System.Object obj)
			 => rebarpropertymodifier.Equals(obj);

		public System.Int32 GetHashCode()
			 => rebarpropertymodifier.GetHashCode();

		public System.Type GetType()
			 => rebarpropertymodifier.GetType();

		public System.String ToString()
			 => rebarpropertymodifier.ToString();




    public enum GroupingTypeEnum
    {
			AUTOMATIC,
			MANUAL,
			NO_GROUPING        
    }

    public static class GroupingTypeEnum_
    {
        public static dynamic GetTSObject(GroupingTypeEnum dynEnum)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.GroupingTypeEnum");

            switch (dynEnum)
            {
				case GroupingTypeEnum.AUTOMATIC:
					return System.Enum.Parse(tsType, "AUTOMATIC");
				case GroupingTypeEnum.MANUAL:
					return System.Enum.Parse(tsType, "MANUAL");
				case GroupingTypeEnum.NO_GROUPING:
					return System.Enum.Parse(tsType, "NO_GROUPING");

                default:
                    throw new System.NotImplementedException(dynEnum.ToString() + "- enum value is not implemented");
            }
        }
    
        public static GroupingTypeEnum FromTSObject(dynamic tsEnum)
        {
            string tsEnumValue = tsEnum.ToString("G", System.Globalization.CultureInfo.InvariantCulture);
            
			if (tsEnumValue.Equals("AUTOMATIC", System.StringComparison.InvariantCulture))
				return GroupingTypeEnum.AUTOMATIC;
			else if (tsEnumValue.Equals("MANUAL", System.StringComparison.InvariantCulture))
				return GroupingTypeEnum.MANUAL;
			else if (tsEnumValue.Equals("NO_GROUPING", System.StringComparison.InvariantCulture))
				return GroupingTypeEnum.NO_GROUPING;

            else 
                throw new System.NotImplementedException(tsEnumValue + "- enum value is not implemented");
            
        }
    }



    }

}
    
