//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class RebarSet 
    {

		public Dynamic.Tekla.Structures.Model.RebarProperties RebarProperties
		{
			get => new Dynamic.Tekla.Structures.Model.RebarProperties(rebarset.RebarProperties.GetTSObject());
			set { rebarset.RebarProperties = value.GetTSObject(); }
		}

		public System.Collections.Generic.ListTekla.Structures.Model.RebarLegFace<Dynamic.Tekla.Structures.Model.RebarLegFace> LegFaces
		{
			get => rebarset.LegFaces;
			set { rebarset.LegFaces = value; }
		}

		public System.Collections.Generic.ListTekla.Structures.Model.RebarGuideline<Dynamic.Tekla.Structures.Model.RebarGuideline> Guidelines
		{
			get => rebarset.Guidelines;
			set { rebarset.Guidelines = value; }
		}

		public System.Int32 LayerOrderNumber
		{
			get => rebarset.LayerOrderNumber;
			set { rebarset.LayerOrderNumber = value; }
		}

		public System.DateTime ModificationTime
		{
			get => rebarset.ModificationTime;
			set { rebarset.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => rebarset.IsUpToDate;
			set { rebarset.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => new Dynamic.Tekla.Structures.Identifier(rebarset.Identifier.GetTSObject());
			set { rebarset.Identifier = value.GetTSObject(); }
		}

        

        dynamic rebarset;
        
        public RebarSet()
        {
            this.rebarset =  new Tekla.Structures.Model.RebarSet();
        }

        public RebarSet(dynamic tsObject)
        {
            this.rebarset = tsObject;
			this.RebarProperties = new Dynamic.Tekla.Structures.Model.RebarProperties(rebarset.RebarProperties);
			this.LegFaces = rebarset.LegFaces;
			this.Guidelines = rebarset.Guidelines;
			this.LayerOrderNumber = rebarset.LayerOrderNumber;
			this.ModificationTime = rebarset.ModificationTime;
			this.IsUpToDate = rebarset.IsUpToDate;
			this.Identifier = new Dynamic.Tekla.Structures.Identifier(rebarset.Identifier);

        }


        public dynamic GetTSObject() => rebarset;

		public System.Boolean Insert()
			 => rebarset.Insert();

		public System.Boolean Modify()
			 => rebarset.Modify();

		public System.Boolean Delete()
			 => rebarset.Delete();

		public System.Boolean Select()
			 => rebarset.Select();

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetRebarSetAdditions()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(rebarset.GetRebarSetAdditions());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetRebarModifiers()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(rebarset.GetRebarModifiers());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetReinforcements()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(rebarset.GetReinforcements());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(rebarset.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => new Dynamic.Tekla.Structures.Model.BaseComponent(rebarset.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(rebarset.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(ref System.Collections.Hashtable values)
			 => rebarset.GetAllUserProperties(ref values);

		public System.Boolean GetIntegerUserProperties(ref System.Collections.Hashtable values)
			 => rebarset.GetIntegerUserProperties(ref values);

		public System.Boolean GetDoubleUserProperties(ref System.Collections.Hashtable values)
			 => rebarset.GetDoubleUserProperties(ref values);

		public System.Boolean GetStringUserProperties(ref System.Collections.Hashtable values)
			 => rebarset.GetStringUserProperties(ref values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, ref System.Collections.Hashtable values)
			 => rebarset.GetAllReportProperties(stringNames, doubleNames, integerNames, ref values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => rebarset.GetIntegerReportProperties(names, ref values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => rebarset.GetDoubleReportProperties(names, ref values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => rebarset.GetStringReportProperties(names, ref values);

		public System.Boolean GetUserProperty(System.String name, ref System.String value)
			 => rebarset.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.String value)
			 => rebarset.GetReportProperty(name, ref value);

		public System.Boolean GetUserProperty(System.String name, ref System.Double value)
			 => rebarset.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.Double value)
			 => rebarset.GetReportProperty(name, ref value);

		public System.Boolean GetUserProperty(System.String name, ref System.Int32 value)
			 => rebarset.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.Int32 value)
			 => rebarset.GetReportProperty(name, ref value);

		public System.Boolean GetDynamicStringProperty(System.String name, ref System.String value)
			 => rebarset.GetDynamicStringProperty(name, ref value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => rebarset.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => rebarset.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => rebarset.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => rebarset.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(rebarset.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => rebarset.SetPhase(phase.GetTSObject());

		public System.Boolean GetPhase(ref Dynamic.Tekla.Structures.Model.Phase phase)
			 => rebarset.GetPhase(ref phase.GetTSObject());

		public System.Boolean SetLabel(System.String label)
			 => rebarset.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => rebarset.CompareTo(obj);

		public System.Boolean Equals(Dynamic.Tekla.Structures.Model.ModelObject other)
			 => rebarset.Equals(other.GetTSObject());

		public System.Boolean Equals(System.Object obj)
			 => rebarset.Equals(obj);

		public System.Int32 GetHashCode()
			 => rebarset.GetHashCode();

		public System.Type GetType()
			 => rebarset.GetType();

		public System.String ToString()
			 => rebarset.ToString();





    }

}
    
