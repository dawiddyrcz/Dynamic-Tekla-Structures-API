//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class RebarSetAddition 
    {

		public System.Collections.Generic.List<Dynamic.Tekla.Structures.Model.RebarLegFace> LegFaces
		{
			get => rebarsetaddition.LegFaces;
			set { rebarsetaddition.LegFaces = value; }
		}

		public Dynamic.Tekla.Structures.Model.RebarSet Father
		{
			get => new Dynamic.Tekla.Structures.Model.RebarSet(rebarsetaddition.Father.GetTSObject());
			set { rebarsetaddition.Father = value.GetTSObject(); }
		}

		public System.Nullable<System.DateTime> ModificationTime
		{
			get => rebarsetaddition.ModificationTime;
			set { rebarsetaddition.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => rebarsetaddition.IsUpToDate;
			set { rebarsetaddition.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => new Dynamic.Tekla.Structures.Identifier(rebarsetaddition.Identifier.GetTSObject());
			set { rebarsetaddition.Identifier = value.GetTSObject(); }
		}

        

        dynamic rebarsetaddition;
        
        public RebarSetAddition()
        {
            this.rebarsetaddition =  new Tekla.Structures.Model.RebarSetAddition();
        }

        public RebarSetAddition(dynamic tsObject)
        {
            this.rebarsetaddition = tsObject;
			this.LegFaces = rebarsetaddition.LegFaces;
			this.Father = new Dynamic.Tekla.Structures.Model.RebarSet(rebarsetaddition.Father);
			this.ModificationTime = rebarsetaddition.ModificationTime;
			this.IsUpToDate = rebarsetaddition.IsUpToDate;
			this.Identifier = new Dynamic.Tekla.Structures.Identifier(rebarsetaddition.Identifier);

        }


        public dynamic GetTSObject() => rebarsetaddition;

		public System.Boolean Insert()
			 => rebarsetaddition.Insert();

		public System.Boolean Modify()
			 => rebarsetaddition.Modify();

		public System.Boolean Delete()
			 => rebarsetaddition.Delete();

		public System.Boolean Select()
			 => rebarsetaddition.Select();

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(rebarsetaddition.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => new Dynamic.Tekla.Structures.Model.BaseComponent(rebarsetaddition.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(rebarsetaddition.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(ref System.Collections.Hashtable values)
			 => rebarsetaddition.GetAllUserProperties(ref values);

		public System.Boolean GetIntegerUserProperties(ref System.Collections.Hashtable values)
			 => rebarsetaddition.GetIntegerUserProperties(ref values);

		public System.Boolean GetDoubleUserProperties(ref System.Collections.Hashtable values)
			 => rebarsetaddition.GetDoubleUserProperties(ref values);

		public System.Boolean GetStringUserProperties(ref System.Collections.Hashtable values)
			 => rebarsetaddition.GetStringUserProperties(ref values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, ref System.Collections.Hashtable values)
			 => rebarsetaddition.GetAllReportProperties(stringNames, doubleNames, integerNames, ref values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => rebarsetaddition.GetIntegerReportProperties(names, ref values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => rebarsetaddition.GetDoubleReportProperties(names, ref values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => rebarsetaddition.GetStringReportProperties(names, ref values);

		public System.Boolean GetUserProperty(System.String name, ref System.String value)
			 => rebarsetaddition.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.String value)
			 => rebarsetaddition.GetReportProperty(name, ref value);

		public System.Boolean GetUserProperty(System.String name, ref System.Double value)
			 => rebarsetaddition.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.Double value)
			 => rebarsetaddition.GetReportProperty(name, ref value);

		public System.Boolean GetUserProperty(System.String name, ref System.Int32 value)
			 => rebarsetaddition.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.Int32 value)
			 => rebarsetaddition.GetReportProperty(name, ref value);

		public System.Boolean GetDynamicStringProperty(System.String name, ref System.String value)
			 => rebarsetaddition.GetDynamicStringProperty(name, ref value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => rebarsetaddition.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => rebarsetaddition.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => rebarsetaddition.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => rebarsetaddition.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(rebarsetaddition.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => rebarsetaddition.SetPhase(phase.GetTSObject());

		public System.Boolean GetPhase(ref Dynamic.Tekla.Structures.Model.Phase phase)
			 => rebarsetaddition.GetPhase(ref phase.GetTSObject());

		public System.Boolean SetLabel(System.String label)
			 => rebarsetaddition.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => rebarsetaddition.CompareTo(obj);

		public System.Boolean Equals(Dynamic.Tekla.Structures.Model.ModelObject other)
			 => rebarsetaddition.Equals(other.GetTSObject());

		public System.Boolean Equals(System.Object obj)
			 => rebarsetaddition.Equals(obj);

		public System.Int32 GetHashCode()
			 => rebarsetaddition.GetHashCode();

		public System.Type GetType()
			 => rebarsetaddition.GetType();

		public System.String ToString()
			 => rebarsetaddition.ToString();





    }

}
    
