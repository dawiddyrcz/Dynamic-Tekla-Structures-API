//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class RebarSpacing 
    {

		public System.Collections.Generic.List<Dynamic.Tekla.Structures.Model.RebarSpacingZone> Zones
		{
			get => rebarspacing.Zones;
			set { rebarspacing.Zones = value; }
		}

		public System.Double StartOffset
		{
			get => rebarspacing.StartOffset;
			set { rebarspacing.StartOffset = value; }
		}

		public System.Double EndOffset
		{
			get => rebarspacing.EndOffset;
			set { rebarspacing.EndOffset = value; }
		}

		public Dynamic.Tekla.Structures.Model.OffsetEnum StartOffsetType
		{
			get => Dynamic.Tekla.Structures.Model.OffsetEnum_.FromTSObject(rebarspacing.StartOffsetType);
			set { rebarspacing.StartOffsetType = Dynamic.Tekla.Structures.Model.OffsetEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.OffsetEnum EndOffsetType
		{
			get => Dynamic.Tekla.Structures.Model.OffsetEnum_.FromTSObject(rebarspacing.EndOffsetType);
			set { rebarspacing.EndOffsetType = Dynamic.Tekla.Structures.Model.OffsetEnum_.FromTSObject(value); }
		}

		public System.Boolean StartOffsetIsAutomatic
		{
			get => rebarspacing.StartOffsetIsAutomatic;
			set { rebarspacing.StartOffsetIsAutomatic = value; }
		}

		public System.Boolean EndOffsetIsAutomatic
		{
			get => rebarspacing.EndOffsetIsAutomatic;
			set { rebarspacing.EndOffsetIsAutomatic = value; }
		}

		public System.Boolean InheritFromPrimary
		{
			get => rebarspacing.InheritFromPrimary;
			set { rebarspacing.InheritFromPrimary = value; }
		}

        

        dynamic rebarspacing;
        
        public RebarSpacing()
        {
            this.rebarspacing =  new Tekla.Structures.Model.RebarSpacing();
        }

        public RebarSpacing(dynamic tsObject)
        {
            this.rebarspacing = tsObject;
			this.Zones = rebarspacing.Zones;
			this.StartOffset = rebarspacing.StartOffset;
			this.EndOffset = rebarspacing.EndOffset;
			this.StartOffsetType = Dynamic.Tekla.Structures.Model.OffsetEnum_.FromTSObject(rebarspacing.StartOffsetType);
			this.EndOffsetType = Dynamic.Tekla.Structures.Model.OffsetEnum_.FromTSObject(rebarspacing.EndOffsetType);
			this.StartOffsetIsAutomatic = rebarspacing.StartOffsetIsAutomatic;
			this.EndOffsetIsAutomatic = rebarspacing.EndOffsetIsAutomatic;
			this.InheritFromPrimary = rebarspacing.InheritFromPrimary;

        }


        public dynamic GetTSObject() => rebarspacing;

		public System.Boolean Equals(System.Object obj)
			 => rebarspacing.Equals(obj);

		public System.Int32 GetHashCode()
			 => rebarspacing.GetHashCode();

		public System.Type GetType()
			 => rebarspacing.GetType();

		public System.String ToString()
			 => rebarspacing.ToString();




    public enum OffsetEnum
    {
			EXACT,
			MINIMUM        
    }

    public static class OffsetEnum_
    {
        public static dynamic GetTSObject(OffsetEnum dynEnum)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.OffsetEnum");

            switch (dynEnum)
            {
				case OffsetEnum.EXACT:
					return System.Enum.Parse(tsType, "EXACT");
				case OffsetEnum.MINIMUM:
					return System.Enum.Parse(tsType, "MINIMUM");

                default:
                    throw new System.NotImplementedException(dynEnum.ToString() + "- enum value is not implemented");
            }
        }
    
        public static OffsetEnum FromTSObject(dynamic tsEnum)
        {
            string tsEnumValue = tsEnum.ToString("G", System.Globalization.CultureInfo.InvariantCulture);
            
			if (tsEnumValue.Equals("EXACT", System.StringComparison.InvariantCulture))
				return OffsetEnum.EXACT;
			else if (tsEnumValue.Equals("MINIMUM", System.StringComparison.InvariantCulture))
				return OffsetEnum.MINIMUM;

            else 
                throw new System.NotImplementedException(tsEnumValue + "- enum value is not implemented");
            
        }
    }



    }

}
    
