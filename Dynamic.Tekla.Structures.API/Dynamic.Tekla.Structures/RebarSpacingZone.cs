//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class RebarSpacingZone 
    {

		public System.Int32 NumberOfSpaces
		{
			get => rebarspacingzone.NumberOfSpaces;
			set { rebarspacingzone.NumberOfSpaces = value; }
		}

		public System.Double Spacing
		{
			get => rebarspacingzone.Spacing;
			set { rebarspacingzone.Spacing = value; }
		}

		public System.Double Length
		{
			get => rebarspacingzone.Length;
			set { rebarspacingzone.Length = value; }
		}

		public Dynamic.Tekla.Structures.Model.RebarSpacingZone.SpacingEnum NumberOfSpacesType
		{
			get => Dynamic.Tekla.Structures.Model.RebarSpacingZone.SpacingEnum_.FromTSObject(rebarspacingzone.NumberOfSpacesType);
			set { rebarspacingzone.NumberOfSpacesType = Dynamic.Tekla.Structures.Model.RebarSpacingZone.SpacingEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.RebarSpacingZone.SpacingEnum SpacingType
		{
			get => Dynamic.Tekla.Structures.Model.RebarSpacingZone.SpacingEnum_.FromTSObject(rebarspacingzone.SpacingType);
			set { rebarspacingzone.SpacingType = Dynamic.Tekla.Structures.Model.RebarSpacingZone.SpacingEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.RebarSpacingZone.LengthEnum LengthType
		{
			get => Dynamic.Tekla.Structures.Model.RebarSpacingZone.LengthEnum_.FromTSObject(rebarspacingzone.LengthType);
			set { rebarspacingzone.LengthType = Dynamic.Tekla.Structures.Model.RebarSpacingZone.LengthEnum_.FromTSObject(value); }
		}

        

        dynamic rebarspacingzone;
        
        public RebarSpacingZone()
        {
            this.rebarspacingzone =  new Tekla.Structures.Model.RebarSpacingZone();
        }

        public RebarSpacingZone(dynamic tsObject)
        {
            this.rebarspacingzone = tsObject;
			this.NumberOfSpaces = rebarspacingzone.NumberOfSpaces;
			this.Spacing = rebarspacingzone.Spacing;
			this.Length = rebarspacingzone.Length;
			this.NumberOfSpacesType = Dynamic.Tekla.Structures.Model.RebarSpacingZone.SpacingEnum_.FromTSObject(rebarspacingzone.NumberOfSpacesType);
			this.SpacingType = Dynamic.Tekla.Structures.Model.RebarSpacingZone.SpacingEnum_.FromTSObject(rebarspacingzone.SpacingType);
			this.LengthType = Dynamic.Tekla.Structures.Model.RebarSpacingZone.LengthEnum_.FromTSObject(rebarspacingzone.LengthType);

        }


        public dynamic GetTSObject() => rebarspacingzone;




    public enum LengthEnum
    {
			ABSOLUTE,
			RELATIVE        
    }

    public static class LengthEnum_
    {
        public static dynamic GetTSObject(LengthEnum dynEnum)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.LengthEnum");

            switch (dynEnum)
            {
				case LengthEnum.ABSOLUTE:
					return System.Enum.Parse(tsType, "ABSOLUTE");
				case LengthEnum.RELATIVE:
					return System.Enum.Parse(tsType, "RELATIVE");

                default:
                    throw new System.NotImplementedException(dynEnum.ToString() + "- enum value is not implemented");
            }
        }
    
        public static LengthEnum FromTSObject(dynamic tsEnum)
        {
            string tsEnumValue = tsEnum.ToString("G", System.Globalization.CultureInfo.InvariantCulture);
            
			if (tsEnumValue.Equals("ABSOLUTE", System.StringComparison.InvariantCulture))
				return LengthEnum.ABSOLUTE;
			else if (tsEnumValue.Equals("RELATIVE", System.StringComparison.InvariantCulture))
				return LengthEnum.RELATIVE;

            else 
                throw new System.NotImplementedException(tsEnumValue + "- enum value is not implemented");
            
        }
    }


    public enum SpacingEnum
    {
			EXACT,
			TARGET        
    }

    public static class SpacingEnum_
    {
        public static dynamic GetTSObject(SpacingEnum dynEnum)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.SpacingEnum");

            switch (dynEnum)
            {
				case SpacingEnum.EXACT:
					return System.Enum.Parse(tsType, "EXACT");
				case SpacingEnum.TARGET:
					return System.Enum.Parse(tsType, "TARGET");

                default:
                    throw new System.NotImplementedException(dynEnum.ToString() + "- enum value is not implemented");
            }
        }
    
        public static SpacingEnum FromTSObject(dynamic tsEnum)
        {
            string tsEnumValue = tsEnum.ToString("G", System.Globalization.CultureInfo.InvariantCulture);
            
			if (tsEnumValue.Equals("EXACT", System.StringComparison.InvariantCulture))
				return SpacingEnum.EXACT;
			else if (tsEnumValue.Equals("TARGET", System.StringComparison.InvariantCulture))
				return SpacingEnum.TARGET;

            else 
                throw new System.NotImplementedException(tsEnumValue + "- enum value is not implemented");
            
        }
    }



    }

}
    
