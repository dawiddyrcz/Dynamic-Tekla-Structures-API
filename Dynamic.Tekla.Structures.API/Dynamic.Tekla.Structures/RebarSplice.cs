//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class RebarSplice 
    {

		public Dynamic.Tekla.Structures.Model.Reinforcement RebarGroup1
		{
			get => new Dynamic.Tekla.Structures.Model.Reinforcement(rebarsplice.RebarGroup1.GetTSObject());
			set { rebarsplice.RebarGroup1 = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.Reinforcement RebarGroup2
		{
			get => new Dynamic.Tekla.Structures.Model.Reinforcement(rebarsplice.RebarGroup2.GetTSObject());
			set { rebarsplice.RebarGroup2 = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.RebarSplice.RebarSpliceTypeEnum Type
		{
			get => Dynamic.Tekla.Structures.Model.RebarSplice.RebarSpliceTypeEnum_.FromTSObject(rebarsplice.Type);
			set { rebarsplice.Type = Dynamic.Tekla.Structures.Model.RebarSplice.RebarSpliceTypeEnum_.FromTSObject(value); }
		}

		public System.Double LapLength
		{
			get => rebarsplice.LapLength;
			set { rebarsplice.LapLength = value; }
		}

		public System.Double Offset
		{
			get => rebarsplice.Offset;
			set { rebarsplice.Offset = value; }
		}

		public System.Double Clearance
		{
			get => rebarsplice.Clearance;
			set { rebarsplice.Clearance = value; }
		}

		public Dynamic.Tekla.Structures.Model.RebarSplice.RebarSpliceBarPositionsEnum BarPositions
		{
			get => Dynamic.Tekla.Structures.Model.RebarSplice.RebarSpliceBarPositionsEnum_.FromTSObject(rebarsplice.BarPositions);
			set { rebarsplice.BarPositions = Dynamic.Tekla.Structures.Model.RebarSplice.RebarSpliceBarPositionsEnum_.FromTSObject(value); }
		}

		public System.NullableSystem.DateTime, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089<System.DateTime> ModificationTime
		{
			get => rebarsplice.ModificationTime;
			set { rebarsplice.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => rebarsplice.IsUpToDate;
			set { rebarsplice.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => new Dynamic.Tekla.Structures.Identifier(rebarsplice.Identifier.GetTSObject());
			set { rebarsplice.Identifier = value.GetTSObject(); }
		}

        

        dynamic rebarsplice;
        
        public RebarSplice()
        {
            this.rebarsplice =  new Tekla.Structures.Model.RebarSplice();
        }

        public RebarSplice(dynamic tsObject)
        {
            this.rebarsplice = tsObject;
			this.RebarGroup1 = new Dynamic.Tekla.Structures.Model.Reinforcement(rebarsplice.RebarGroup1);
			this.RebarGroup2 = new Dynamic.Tekla.Structures.Model.Reinforcement(rebarsplice.RebarGroup2);
			this.Type = Dynamic.Tekla.Structures.Model.RebarSplice.RebarSpliceTypeEnum_.FromTSObject(rebarsplice.Type);
			this.LapLength = rebarsplice.LapLength;
			this.Offset = rebarsplice.Offset;
			this.Clearance = rebarsplice.Clearance;
			this.BarPositions = Dynamic.Tekla.Structures.Model.RebarSplice.RebarSpliceBarPositionsEnum_.FromTSObject(rebarsplice.BarPositions);
			this.ModificationTime = rebarsplice.ModificationTime;
			this.IsUpToDate = rebarsplice.IsUpToDate;
			this.Identifier = new Dynamic.Tekla.Structures.Identifier(rebarsplice.Identifier);

        }


        public dynamic GetTSObject() => rebarsplice;

		public System.Boolean Insert()
			 => rebarsplice.Insert();

		public System.Boolean Select()
			 => rebarsplice.Select();

		public System.Boolean Modify()
			 => rebarsplice.Modify();

		public System.Boolean Delete()
			 => rebarsplice.Delete();

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(rebarsplice.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => new Dynamic.Tekla.Structures.Model.BaseComponent(rebarsplice.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(rebarsplice.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(ref System.Collections.Hashtable values)
			 => rebarsplice.GetAllUserProperties(ref values);

		public System.Boolean GetIntegerUserProperties(ref System.Collections.Hashtable values)
			 => rebarsplice.GetIntegerUserProperties(ref values);

		public System.Boolean GetDoubleUserProperties(ref System.Collections.Hashtable values)
			 => rebarsplice.GetDoubleUserProperties(ref values);

		public System.Boolean GetStringUserProperties(ref System.Collections.Hashtable values)
			 => rebarsplice.GetStringUserProperties(ref values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, ref System.Collections.Hashtable values)
			 => rebarsplice.GetAllReportProperties(stringNames, doubleNames, integerNames, ref values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => rebarsplice.GetIntegerReportProperties(names, ref values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => rebarsplice.GetDoubleReportProperties(names, ref values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => rebarsplice.GetStringReportProperties(names, ref values);

		public System.Boolean GetUserProperty(System.String name, ref System.String value)
			 => rebarsplice.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.String value)
			 => rebarsplice.GetReportProperty(name, ref value);

		public System.Boolean GetUserProperty(System.String name, ref System.Double value)
			 => rebarsplice.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.Double value)
			 => rebarsplice.GetReportProperty(name, ref value);

		public System.Boolean GetUserProperty(System.String name, ref System.Int32 value)
			 => rebarsplice.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.Int32 value)
			 => rebarsplice.GetReportProperty(name, ref value);

		public System.Boolean GetDynamicStringProperty(System.String name, ref System.String value)
			 => rebarsplice.GetDynamicStringProperty(name, ref value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => rebarsplice.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => rebarsplice.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => rebarsplice.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => rebarsplice.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(rebarsplice.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => rebarsplice.SetPhase(phase.GetTSObject());

		public System.Boolean GetPhase(ref Dynamic.Tekla.Structures.Model.Phase phase)
			 => rebarsplice.GetPhase(ref phase.GetTSObject());

		public System.Boolean SetLabel(System.String label)
			 => rebarsplice.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => rebarsplice.CompareTo(obj);

		public System.Boolean Equals(Dynamic.Tekla.Structures.Model.ModelObject other)
			 => rebarsplice.Equals(other.GetTSObject());

		public System.Boolean Equals(System.Object obj)
			 => rebarsplice.Equals(obj);

		public System.Int32 GetHashCode()
			 => rebarsplice.GetHashCode();

		public System.Type GetType()
			 => rebarsplice.GetType();

		public System.String ToString()
			 => rebarsplice.ToString();




    public enum RebarSpliceTypeEnum
    {
			SPLICE_TYPE_LAP_RIGHT,
			SPLICE_TYPE_LAP_LEFT,
			SPLICE_TYPE_LAP_BOTH,
			SPLICE_TYPE_MUFF,
			SPLICE_TYPE_WELD        
    }

    public static class RebarSpliceTypeEnum_
    {
        public static dynamic GetTSObject(RebarSpliceTypeEnum dynEnum)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.RebarSpliceTypeEnum");

            switch (dynEnum)
            {
				case RebarSpliceTypeEnum.SPLICE_TYPE_LAP_RIGHT:
					return System.Enum.Parse(tsType, "SPLICE_TYPE_LAP_RIGHT");
				case RebarSpliceTypeEnum.SPLICE_TYPE_LAP_LEFT:
					return System.Enum.Parse(tsType, "SPLICE_TYPE_LAP_LEFT");
				case RebarSpliceTypeEnum.SPLICE_TYPE_LAP_BOTH:
					return System.Enum.Parse(tsType, "SPLICE_TYPE_LAP_BOTH");
				case RebarSpliceTypeEnum.SPLICE_TYPE_MUFF:
					return System.Enum.Parse(tsType, "SPLICE_TYPE_MUFF");
				case RebarSpliceTypeEnum.SPLICE_TYPE_WELD:
					return System.Enum.Parse(tsType, "SPLICE_TYPE_WELD");

                default:
                    throw new System.NotImplementedException(dynEnum.ToString() + "- enum value is not implemented");
            }
        }
    
        public static RebarSpliceTypeEnum FromTSObject(dynamic tsEnum)
        {
            string tsEnumValue = tsEnum.ToString("G", System.Globalization.CultureInfo.InvariantCulture);
            
			if (tsEnumValue.Equals("SPLICE_TYPE_LAP_RIGHT", System.StringComparison.InvariantCulture))
				return RebarSpliceTypeEnum.SPLICE_TYPE_LAP_RIGHT;
			else if (tsEnumValue.Equals("SPLICE_TYPE_LAP_LEFT", System.StringComparison.InvariantCulture))
				return RebarSpliceTypeEnum.SPLICE_TYPE_LAP_LEFT;
			else if (tsEnumValue.Equals("SPLICE_TYPE_LAP_BOTH", System.StringComparison.InvariantCulture))
				return RebarSpliceTypeEnum.SPLICE_TYPE_LAP_BOTH;
			else if (tsEnumValue.Equals("SPLICE_TYPE_MUFF", System.StringComparison.InvariantCulture))
				return RebarSpliceTypeEnum.SPLICE_TYPE_MUFF;
			else if (tsEnumValue.Equals("SPLICE_TYPE_WELD", System.StringComparison.InvariantCulture))
				return RebarSpliceTypeEnum.SPLICE_TYPE_WELD;

            else 
                throw new System.NotImplementedException(tsEnumValue + "- enum value is not implemented");
            
        }
    }


    public enum RebarSpliceBarPositionsEnum
    {
			SPLICE_BAR_ON_TOP,
			SPLICE_BAR_PARALLEL        
    }

    public static class RebarSpliceBarPositionsEnum_
    {
        public static dynamic GetTSObject(RebarSpliceBarPositionsEnum dynEnum)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.RebarSpliceBarPositionsEnum");

            switch (dynEnum)
            {
				case RebarSpliceBarPositionsEnum.SPLICE_BAR_ON_TOP:
					return System.Enum.Parse(tsType, "SPLICE_BAR_ON_TOP");
				case RebarSpliceBarPositionsEnum.SPLICE_BAR_PARALLEL:
					return System.Enum.Parse(tsType, "SPLICE_BAR_PARALLEL");

                default:
                    throw new System.NotImplementedException(dynEnum.ToString() + "- enum value is not implemented");
            }
        }
    
        public static RebarSpliceBarPositionsEnum FromTSObject(dynamic tsEnum)
        {
            string tsEnumValue = tsEnum.ToString("G", System.Globalization.CultureInfo.InvariantCulture);
            
			if (tsEnumValue.Equals("SPLICE_BAR_ON_TOP", System.StringComparison.InvariantCulture))
				return RebarSpliceBarPositionsEnum.SPLICE_BAR_ON_TOP;
			else if (tsEnumValue.Equals("SPLICE_BAR_PARALLEL", System.StringComparison.InvariantCulture))
				return RebarSpliceBarPositionsEnum.SPLICE_BAR_PARALLEL;

            else 
                throw new System.NotImplementedException(tsEnumValue + "- enum value is not implemented");
            
        }
    }



    }

}
    
