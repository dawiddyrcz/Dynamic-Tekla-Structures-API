//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class RebarSplitter 
    {

		public Dynamic.Tekla.Structures.Model.RebarSplitter.StaggerTypeEnum StaggerType
		{
			get => Dynamic.Tekla.Structures.Model.RebarSplitter.StaggerTypeEnum_.FromTSObject(rebarsplitter.StaggerType);
			set { rebarsplitter.StaggerType = Dynamic.Tekla.Structures.Model.RebarSplitter.StaggerTypeEnum_.FromTSObject(value); }
		}

		public System.Double StaggerOffset
		{
			get => rebarsplitter.StaggerOffset;
			set { rebarsplitter.StaggerOffset = value; }
		}

		public System.Double SplitOffset
		{
			get => rebarsplitter.SplitOffset;
			set { rebarsplitter.SplitOffset = value; }
		}

		public Dynamic.Tekla.Structures.Model.RebarSplitter.SplitTypeEnum SplitType
		{
			get => Dynamic.Tekla.Structures.Model.RebarSplitter.SplitTypeEnum_.FromTSObject(rebarsplitter.SplitType);
			set { rebarsplitter.SplitType = Dynamic.Tekla.Structures.Model.RebarSplitter.SplitTypeEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.RebarLapping Lapping
		{
			get => new Dynamic.Tekla.Structures.Model.RebarLapping(rebarsplitter.Lapping.GetTSObject());
			set { rebarsplitter.Lapping = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.RebarCranking Cranking
		{
			get => new Dynamic.Tekla.Structures.Model.RebarCranking(rebarsplitter.Cranking.GetTSObject());
			set { rebarsplitter.Cranking = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.RebarSet Father
		{
			get => new Dynamic.Tekla.Structures.Model.RebarSet(rebarsplitter.Father.GetTSObject());
			set { rebarsplitter.Father = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.Contour Curve
		{
			get => new Dynamic.Tekla.Structures.Model.Contour(rebarsplitter.Curve.GetTSObject());
			set { rebarsplitter.Curve = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.BaseRebarModifier.BarsAffectedEnum BarsAffected
		{
			get => Dynamic.Tekla.Structures.Model.BaseRebarModifier.BarsAffectedEnum_.FromTSObject(rebarsplitter.BarsAffected);
			set { rebarsplitter.BarsAffected = Dynamic.Tekla.Structures.Model.BaseRebarModifier.BarsAffectedEnum_.FromTSObject(value); }
		}

		public System.Int32 FirstAffectedBar
		{
			get => rebarsplitter.FirstAffectedBar;
			set { rebarsplitter.FirstAffectedBar = value; }
		}

		public System.DateTime ModificationTime
		{
			get => rebarsplitter.ModificationTime;
			set { rebarsplitter.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => rebarsplitter.IsUpToDate;
			set { rebarsplitter.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => new Dynamic.Tekla.Structures.Identifier(rebarsplitter.Identifier.GetTSObject());
			set { rebarsplitter.Identifier = value.GetTSObject(); }
		}

        

        dynamic rebarsplitter;
        
        public RebarSplitter()
        {
            this.rebarsplitter =  TSActivator.CreateInstance("Tekla.Structures.Model.RebarSplitter");
        }

        public RebarSplitter(dynamic tsObject)
        {
            this.rebarsplitter = tsObject;
			this.StaggerType = Dynamic.Tekla.Structures.Model.RebarSplitter.StaggerTypeEnum_.FromTSObject(rebarsplitter.StaggerType);
			this.StaggerOffset = rebarsplitter.StaggerOffset;
			this.SplitOffset = rebarsplitter.SplitOffset;
			this.SplitType = Dynamic.Tekla.Structures.Model.RebarSplitter.SplitTypeEnum_.FromTSObject(rebarsplitter.SplitType);
			this.Lapping = new Dynamic.Tekla.Structures.Model.RebarLapping(rebarsplitter.Lapping);
			this.Cranking = new Dynamic.Tekla.Structures.Model.RebarCranking(rebarsplitter.Cranking);
			this.Father = new Dynamic.Tekla.Structures.Model.RebarSet(rebarsplitter.Father);
			this.Curve = new Dynamic.Tekla.Structures.Model.Contour(rebarsplitter.Curve);
			this.BarsAffected = Dynamic.Tekla.Structures.Model.BaseRebarModifier.BarsAffectedEnum_.FromTSObject(rebarsplitter.BarsAffected);
			this.FirstAffectedBar = rebarsplitter.FirstAffectedBar;
			this.ModificationTime = rebarsplitter.ModificationTime;
			this.IsUpToDate = rebarsplitter.IsUpToDate;
			this.Identifier = new Dynamic.Tekla.Structures.Identifier(rebarsplitter.Identifier);

        }


        public dynamic GetTSObject() => rebarsplitter;


		public System.Boolean Insert()
			 => rebarsplitter.Insert();

		public System.Boolean Modify()
			 => rebarsplitter.Modify();

		public System.Boolean Delete()
			 => rebarsplitter.Delete();

		public System.Boolean Select()
			 => rebarsplitter.Select();

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(rebarsplitter.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => new Dynamic.Tekla.Structures.Model.BaseComponent(rebarsplitter.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(rebarsplitter.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(System.Collections.Hashtable values)
			 => rebarsplitter.GetAllUserProperties(values);

		public System.Boolean GetIntegerUserProperties(System.Collections.Hashtable values)
			 => rebarsplitter.GetIntegerUserProperties(values);

		public System.Boolean GetDoubleUserProperties(System.Collections.Hashtable values)
			 => rebarsplitter.GetDoubleUserProperties(values);

		public System.Boolean GetStringUserProperties(System.Collections.Hashtable values)
			 => rebarsplitter.GetStringUserProperties(values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, System.Collections.Hashtable values)
			 => rebarsplitter.GetAllReportProperties(stringNames, doubleNames, integerNames, values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => rebarsplitter.GetIntegerReportProperties(names, values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => rebarsplitter.GetDoubleReportProperties(names, values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => rebarsplitter.GetStringReportProperties(names, values);

		public System.Boolean GetUserProperty(System.String name, System.String value)
			 => rebarsplitter.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.String value)
			 => rebarsplitter.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Double value)
			 => rebarsplitter.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Double value)
			 => rebarsplitter.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Int32 value)
			 => rebarsplitter.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Int32 value)
			 => rebarsplitter.GetReportProperty(name, value);

		public System.Boolean GetDynamicStringProperty(System.String name, System.String value)
			 => rebarsplitter.GetDynamicStringProperty(name, value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => rebarsplitter.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => rebarsplitter.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => rebarsplitter.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => rebarsplitter.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(rebarsplitter.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => rebarsplitter.SetPhase(phase.GetTSObject());

		public System.Boolean GetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => rebarsplitter.GetPhase(phase.GetTSObject());

		public System.Boolean SetLabel(System.String label)
			 => rebarsplitter.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => rebarsplitter.CompareTo(obj);




    public enum StaggerTypeEnum
    {
			NO_STAGGER,
			STAGGER_LEFT,
			STAGGER_RIGHT,
			STAGGER_MIDDLE        
    }

    public static class StaggerTypeEnum_
    {
        public static dynamic GetTSObject(StaggerTypeEnum dynEnum)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.StaggerTypeEnum");

            switch (dynEnum)
            {
				case StaggerTypeEnum.NO_STAGGER:
					return System.Enum.Parse(tsType, "NO_STAGGER");
				case StaggerTypeEnum.STAGGER_LEFT:
					return System.Enum.Parse(tsType, "STAGGER_LEFT");
				case StaggerTypeEnum.STAGGER_RIGHT:
					return System.Enum.Parse(tsType, "STAGGER_RIGHT");
				case StaggerTypeEnum.STAGGER_MIDDLE:
					return System.Enum.Parse(tsType, "STAGGER_MIDDLE");

                default:
                    throw new System.NotImplementedException(dynEnum.ToString() + "- enum value is not implemented");
            }
        }
    
        public static StaggerTypeEnum FromTSObject(dynamic tsEnum)
        {
            string tsEnumValue = tsEnum.ToString("G", System.Globalization.CultureInfo.InvariantCulture);
            
			if (tsEnumValue.Equals("NO_STAGGER", System.StringComparison.InvariantCulture))
				return StaggerTypeEnum.NO_STAGGER;
			else if (tsEnumValue.Equals("STAGGER_LEFT", System.StringComparison.InvariantCulture))
				return StaggerTypeEnum.STAGGER_LEFT;
			else if (tsEnumValue.Equals("STAGGER_RIGHT", System.StringComparison.InvariantCulture))
				return StaggerTypeEnum.STAGGER_RIGHT;
			else if (tsEnumValue.Equals("STAGGER_MIDDLE", System.StringComparison.InvariantCulture))
				return StaggerTypeEnum.STAGGER_MIDDLE;

            else 
                throw new System.NotImplementedException(tsEnumValue + "- enum value is not implemented");
            
        }
    }


    public enum SplitTypeEnum
    {
			LAPPING,
			CRANKING        
    }

    public static class SplitTypeEnum_
    {
        public static dynamic GetTSObject(SplitTypeEnum dynEnum)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.SplitTypeEnum");

            switch (dynEnum)
            {
				case SplitTypeEnum.LAPPING:
					return System.Enum.Parse(tsType, "LAPPING");
				case SplitTypeEnum.CRANKING:
					return System.Enum.Parse(tsType, "CRANKING");

                default:
                    throw new System.NotImplementedException(dynEnum.ToString() + "- enum value is not implemented");
            }
        }
    
        public static SplitTypeEnum FromTSObject(dynamic tsEnum)
        {
            string tsEnumValue = tsEnum.ToString("G", System.Globalization.CultureInfo.InvariantCulture);
            
			if (tsEnumValue.Equals("LAPPING", System.StringComparison.InvariantCulture))
				return SplitTypeEnum.LAPPING;
			else if (tsEnumValue.Equals("CRANKING", System.StringComparison.InvariantCulture))
				return SplitTypeEnum.CRANKING;

            else 
                throw new System.NotImplementedException(tsEnumValue + "- enum value is not implemented");
            
        }
    }



    }

}
    
