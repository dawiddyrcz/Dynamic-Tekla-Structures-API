//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class RebarStrand 
    {

		public System.String Size
		{
			get => rebarstrand.Size;
			set { rebarstrand.Size = value; }
		}

		public System.Double PullPerStrand
		{
			get => rebarstrand.PullPerStrand;
			set { rebarstrand.PullPerStrand = value; }
		}

		public System.Collections.ArrayList Patterns
		{
			get => rebarstrand.Patterns;
			set { rebarstrand.Patterns = value; }
		}

		public System.Collections.ArrayList Unbondings
		{
			get => rebarstrand.Unbondings;
			set { rebarstrand.Unbondings = value; }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Point StartPoint
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Point(rebarstrand.StartPoint.GetTSObject());
			set { rebarstrand.StartPoint = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Point EndPoint
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Point(rebarstrand.EndPoint.GetTSObject());
			set { rebarstrand.EndPoint = value.GetTSObject(); }
		}

		public System.Collections.ArrayList OnPlaneOffsets
		{
			get => rebarstrand.OnPlaneOffsets;
			set { rebarstrand.OnPlaneOffsets = value; }
		}

		public Dynamic.Tekla.Structures.Model.ModelObject Father
		{
			get => new Dynamic.Tekla.Structures.Model.ModelObject(rebarstrand.Father.GetTSObject());
			set { rebarstrand.Father = value.GetTSObject(); }
		}

		public System.String Grade
		{
			get => rebarstrand.Grade;
			set { rebarstrand.Grade = value; }
		}

		public System.String Name
		{
			get => rebarstrand.Name;
			set { rebarstrand.Name = value; }
		}

		public System.Int32 Class
		{
			get => rebarstrand.Class;
			set { rebarstrand.Class = value; }
		}

		public Dynamic.Tekla.Structures.Model.NumberingSeries NumberingSeries
		{
			get => new Dynamic.Tekla.Structures.Model.NumberingSeries(rebarstrand.NumberingSeries.GetTSObject());
			set { rebarstrand.NumberingSeries = value.GetTSObject(); }
		}

		public System.Double FromPlaneOffset
		{
			get => rebarstrand.FromPlaneOffset;
			set { rebarstrand.FromPlaneOffset = value; }
		}

		public Dynamic.Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum StartPointOffsetType
		{
			get => Dynamic.Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum_.FromTSObject(rebarstrand.StartPointOffsetType);
			set { rebarstrand.StartPointOffsetType = Dynamic.Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum_.FromTSObject(value); }
		}

		public System.Double StartPointOffsetValue
		{
			get => rebarstrand.StartPointOffsetValue;
			set { rebarstrand.StartPointOffsetValue = value; }
		}

		public Dynamic.Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum EndPointOffsetType
		{
			get => Dynamic.Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum_.FromTSObject(rebarstrand.EndPointOffsetType);
			set { rebarstrand.EndPointOffsetType = Dynamic.Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum_.FromTSObject(value); }
		}

		public System.Double EndPointOffsetValue
		{
			get => rebarstrand.EndPointOffsetValue;
			set { rebarstrand.EndPointOffsetValue = value; }
		}

		public System.Collections.ArrayList RadiusValues
		{
			get => rebarstrand.RadiusValues;
			set { rebarstrand.RadiusValues = value; }
		}

		public Dynamic.Tekla.Structures.Forming.DeformingType InputPointDeformingState
		{
			get => Dynamic.Tekla.Structures.Forming.DeformingType_.FromTSObject(rebarstrand.InputPointDeformingState);
			set { rebarstrand.InputPointDeformingState = Dynamic.Tekla.Structures.Forming.DeformingType_.FromTSObject(value); }
		}

		public System.DateTime ModificationTime
		{
			get => rebarstrand.ModificationTime;
			set { rebarstrand.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => rebarstrand.IsUpToDate;
			set { rebarstrand.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => new Dynamic.Tekla.Structures.Identifier(rebarstrand.Identifier.GetTSObject());
			set { rebarstrand.Identifier = value.GetTSObject(); }
		}

        

        dynamic rebarstrand;
        
        public RebarStrand()
        {
            this.rebarstrand =  TSActivator.CreateInstance("Tekla.Structures.Model.RebarStrand");
        }

        public RebarStrand(dynamic tsObject)
        {
            this.rebarstrand = tsObject;
			this.Size = rebarstrand.Size;
			this.PullPerStrand = rebarstrand.PullPerStrand;
			this.Patterns = rebarstrand.Patterns;
			this.Unbondings = rebarstrand.Unbondings;
			this.StartPoint = new Dynamic.Tekla.Structures.Geometry3d.Point(rebarstrand.StartPoint);
			this.EndPoint = new Dynamic.Tekla.Structures.Geometry3d.Point(rebarstrand.EndPoint);
			this.OnPlaneOffsets = rebarstrand.OnPlaneOffsets;
			this.Father = new Dynamic.Tekla.Structures.Model.ModelObject(rebarstrand.Father);
			this.Grade = rebarstrand.Grade;
			this.Name = rebarstrand.Name;
			this.Class = rebarstrand.Class;
			this.NumberingSeries = new Dynamic.Tekla.Structures.Model.NumberingSeries(rebarstrand.NumberingSeries);
			this.FromPlaneOffset = rebarstrand.FromPlaneOffset;
			this.StartPointOffsetType = Dynamic.Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum_.FromTSObject(rebarstrand.StartPointOffsetType);
			this.StartPointOffsetValue = rebarstrand.StartPointOffsetValue;
			this.EndPointOffsetType = Dynamic.Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum_.FromTSObject(rebarstrand.EndPointOffsetType);
			this.EndPointOffsetValue = rebarstrand.EndPointOffsetValue;
			this.RadiusValues = rebarstrand.RadiusValues;
			this.InputPointDeformingState = Dynamic.Tekla.Structures.Forming.DeformingType_.FromTSObject(rebarstrand.InputPointDeformingState);
			this.ModificationTime = rebarstrand.ModificationTime;
			this.IsUpToDate = rebarstrand.IsUpToDate;
			this.Identifier = new Dynamic.Tekla.Structures.Identifier(rebarstrand.Identifier);

        }


        public dynamic GetTSObject() => rebarstrand;

		public System.Boolean Insert()
			 => rebarstrand.Insert();

		public System.Boolean Select()
			 => rebarstrand.Select();

		public System.Boolean Modify()
			 => rebarstrand.Modify();

		public System.Boolean Delete()
			 => rebarstrand.Delete();

		public System.Collections.ArrayList GetRebarGeometries(System.Boolean withHooks)
			 => rebarstrand.GetRebarGeometries(withHooks);

		public System.Collections.ArrayList GetRebarGeometriesWithoutClashes(System.Boolean withHooks)
			 => rebarstrand.GetRebarGeometriesWithoutClashes(withHooks);

		public System.Boolean IsGeometryValid()
			 => rebarstrand.IsGeometryValid();

		public System.Int32 GetNumberOfRebars()
			 => rebarstrand.GetNumberOfRebars();

		public Dynamic.Tekla.Structures.Model.RebarGeometry GetSingleRebar(System.Int32 index, System.Boolean withHooks)
			 => new Dynamic.Tekla.Structures.Model.RebarGeometry(rebarstrand.GetSingleRebar(index, withHooks));

		public Dynamic.Tekla.Structures.Model.RebarGeometry GetSingleRebarWithoutClash(System.Int32 index, System.Boolean withHooks)
			 => new Dynamic.Tekla.Structures.Model.RebarGeometry(rebarstrand.GetSingleRebarWithoutClash(index, withHooks));

		public Dynamic.Tekla.Structures.Model.Solid GetSolid()
			 => new Dynamic.Tekla.Structures.Model.Solid(rebarstrand.GetSolid());

		public Dynamic.Tekla.Structures.Model.PourObject GetFatherPour()
			 => new Dynamic.Tekla.Structures.Model.PourObject(rebarstrand.GetFatherPour());

		public Dynamic.Tekla.Structures.Model.PourUnit GetFatherPourUnit()
			 => new Dynamic.Tekla.Structures.Model.PourUnit(rebarstrand.GetFatherPourUnit());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(rebarstrand.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => new Dynamic.Tekla.Structures.Model.BaseComponent(rebarstrand.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(rebarstrand.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(System.Collections.Hashtable values)
			 => rebarstrand.GetAllUserProperties(values);

		public System.Boolean GetIntegerUserProperties(System.Collections.Hashtable values)
			 => rebarstrand.GetIntegerUserProperties(values);

		public System.Boolean GetDoubleUserProperties(System.Collections.Hashtable values)
			 => rebarstrand.GetDoubleUserProperties(values);

		public System.Boolean GetStringUserProperties(System.Collections.Hashtable values)
			 => rebarstrand.GetStringUserProperties(values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, System.Collections.Hashtable values)
			 => rebarstrand.GetAllReportProperties(stringNames, doubleNames, integerNames, values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => rebarstrand.GetIntegerReportProperties(names, values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => rebarstrand.GetDoubleReportProperties(names, values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => rebarstrand.GetStringReportProperties(names, values);

		public System.Boolean GetUserProperty(System.String name, System.String value)
			 => rebarstrand.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.String value)
			 => rebarstrand.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Double value)
			 => rebarstrand.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Double value)
			 => rebarstrand.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Int32 value)
			 => rebarstrand.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Int32 value)
			 => rebarstrand.GetReportProperty(name, value);

		public System.Boolean GetDynamicStringProperty(System.String name, System.String value)
			 => rebarstrand.GetDynamicStringProperty(name, value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => rebarstrand.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => rebarstrand.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => rebarstrand.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => rebarstrand.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(rebarstrand.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => rebarstrand.SetPhase(phase.GetTSObject());

		public System.Boolean GetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => rebarstrand.GetPhase(phase.GetTSObject());

		public System.Boolean SetLabel(System.String label)
			 => rebarstrand.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => rebarstrand.CompareTo(obj);





    }

}
    
