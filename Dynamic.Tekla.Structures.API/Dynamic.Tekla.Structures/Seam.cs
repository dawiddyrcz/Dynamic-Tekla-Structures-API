//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class Seam 
    {

		public Dynamic.Tekla.Structures.Geometry3d.Vector UpVector
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Vector(seam.UpVector.GetTSObject());
			set { seam.UpVector = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.AutoDirectionTypeEnum AutoDirectionType
		{
			get => Dynamic.Tekla.Structures.AutoDirectionTypeEnum_.FromTSObject(seam.AutoDirectionType);
			set { seam.AutoDirectionType = Dynamic.Tekla.Structures.AutoDirectionTypeEnum_.FromTSObject(value); }
		}

		public System.Boolean AutoPosition
		{
			get => seam.AutoPosition;
			set { seam.AutoPosition = value; }
		}

		public System.String Code
		{
			get => seam.Code;
			set { seam.Code = value; }
		}

		public System.Int32 Class
		{
			get => seam.Class;
			set { seam.Class = value; }
		}

		public Dynamic.Tekla.Structures.ConnectionStatusEnum Status
		{
			get => Dynamic.Tekla.Structures.ConnectionStatusEnum_.FromTSObject(seam.Status);
			set { seam.Status = Dynamic.Tekla.Structures.ConnectionStatusEnum_.FromTSObject(value); }
		}

		public System.String Name
		{
			get => seam.Name;
			set { seam.Name = value; }
		}

		public System.Int32 Number
		{
			get => seam.Number;
			set { seam.Number = value; }
		}

		public System.DateTime ModificationTime
		{
			get => seam.ModificationTime;
			set { seam.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => seam.IsUpToDate;
			set { seam.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => new Dynamic.Tekla.Structures.Identifier(seam.Identifier.GetTSObject());
			set { seam.Identifier = value.GetTSObject(); }
		}

        

        dynamic seam;
        
        public Seam()
        {
            this.seam =  new Tekla.Structures.Model.Seam();
        }

        public Seam(dynamic tsObject)
        {
            this.seam = tsObject;
			this.UpVector = new Dynamic.Tekla.Structures.Geometry3d.Vector(seam.UpVector);
			this.AutoDirectionType = Dynamic.Tekla.Structures.AutoDirectionTypeEnum_.FromTSObject(seam.AutoDirectionType);
			this.AutoPosition = seam.AutoPosition;
			this.Code = seam.Code;
			this.Class = seam.Class;
			this.Status = Dynamic.Tekla.Structures.ConnectionStatusEnum_.FromTSObject(seam.Status);
			this.Name = seam.Name;
			this.Number = seam.Number;
			this.ModificationTime = seam.ModificationTime;
			this.IsUpToDate = seam.IsUpToDate;
			this.Identifier = new Dynamic.Tekla.Structures.Identifier(seam.Identifier);

        }


        public dynamic GetTSObject() => seam;

		public System.Boolean SetPrimaryObject(Dynamic.Tekla.Structures.Model.ModelObject M)
			 => seam.SetPrimaryObject(M.GetTSObject());

		public Dynamic.Tekla.Structures.Model.ModelObject GetPrimaryObject()
			 => new Dynamic.Tekla.Structures.Model.ModelObject(seam.GetPrimaryObject());

		public System.Boolean SetSecondaryObject(Dynamic.Tekla.Structures.Model.ModelObject M)
			 => seam.SetSecondaryObject(M.GetTSObject());

		public System.Boolean SetSecondaryObjects(System.Collections.ArrayList Secondaries)
			 => seam.SetSecondaryObjects(Secondaries);

		public System.Collections.ArrayList GetSecondaryObjects()
			 => seam.GetSecondaryObjects();

		public System.Boolean SetInputPositions(Dynamic.Tekla.Structures.Geometry3d.Point StartPoint, Dynamic.Tekla.Structures.Geometry3d.Point EndPoint)
			 => seam.SetInputPositions(StartPoint.GetTSObject(), EndPoint.GetTSObject());

		public System.Boolean GetStartAndEndPositions(ref Dynamic.Tekla.Structures.Geometry3d.Point StartPoint, ref Dynamic.Tekla.Structures.Geometry3d.Point EndPoint)
			 => seam.GetStartAndEndPositions(ref StartPoint.GetTSObject(), ref EndPoint.GetTSObject());

		public System.Boolean SetInputPolygon(Dynamic.Tekla.Structures.Model.Polygon InputPolygon)
			 => seam.SetInputPolygon(InputPolygon.GetTSObject());

		public Dynamic.Tekla.Structures.Model.Polygon GetInputPolygon()
			 => new Dynamic.Tekla.Structures.Model.Polygon(seam.GetInputPolygon());

		public System.Boolean Insert()
			 => seam.Insert();

		public System.Boolean Select()
			 => seam.Select();

		public System.Boolean Modify()
			 => seam.Modify();

		public System.Boolean Delete()
			 => seam.Delete();

		public void SetAttribute(System.String AttrName, System.String StrValue)
			 => seam.SetAttribute(AttrName, StrValue);

		public void SetAttribute(System.String AttrName, System.Int32 Value)
			 => seam.SetAttribute(AttrName, Value);

		public void SetAttribute(System.String AttrName, System.Double DValue)
			 => seam.SetAttribute(AttrName, DValue);

		public System.Boolean GetAttribute(System.String AttrName, ref System.String StrValue)
			 => seam.GetAttribute(AttrName, ref StrValue);

		public System.Boolean GetAttribute(System.String AttrName, ref System.Int32 Value)
			 => seam.GetAttribute(AttrName, ref Value);

		public System.Boolean GetAttribute(System.String AttrName, ref System.Double DValue)
			 => seam.GetAttribute(AttrName, ref DValue);

		public System.Boolean LoadAttributesFromFile(System.String Filename)
			 => seam.LoadAttributesFromFile(Filename);

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(seam.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => new Dynamic.Tekla.Structures.Model.BaseComponent(seam.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(seam.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(ref System.Collections.Hashtable values)
			 => seam.GetAllUserProperties(ref values);

		public System.Boolean GetIntegerUserProperties(ref System.Collections.Hashtable values)
			 => seam.GetIntegerUserProperties(ref values);

		public System.Boolean GetDoubleUserProperties(ref System.Collections.Hashtable values)
			 => seam.GetDoubleUserProperties(ref values);

		public System.Boolean GetStringUserProperties(ref System.Collections.Hashtable values)
			 => seam.GetStringUserProperties(ref values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, ref System.Collections.Hashtable values)
			 => seam.GetAllReportProperties(stringNames, doubleNames, integerNames, ref values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => seam.GetIntegerReportProperties(names, ref values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => seam.GetDoubleReportProperties(names, ref values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => seam.GetStringReportProperties(names, ref values);

		public System.Boolean GetUserProperty(System.String name, ref System.String value)
			 => seam.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.String value)
			 => seam.GetReportProperty(name, ref value);

		public System.Boolean GetUserProperty(System.String name, ref System.Double value)
			 => seam.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.Double value)
			 => seam.GetReportProperty(name, ref value);

		public System.Boolean GetUserProperty(System.String name, ref System.Int32 value)
			 => seam.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.Int32 value)
			 => seam.GetReportProperty(name, ref value);

		public System.Boolean GetDynamicStringProperty(System.String name, ref System.String value)
			 => seam.GetDynamicStringProperty(name, ref value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => seam.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => seam.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => seam.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => seam.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(seam.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => seam.SetPhase(phase.GetTSObject());

		public System.Boolean GetPhase(ref Dynamic.Tekla.Structures.Model.Phase phase)
			 => seam.GetPhase(ref phase.GetTSObject());

		public System.Boolean SetLabel(System.String label)
			 => seam.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => seam.CompareTo(obj);

		public System.Boolean Equals(Dynamic.Tekla.Structures.Model.ModelObject other)
			 => seam.Equals(other.GetTSObject());

		public System.Boolean Equals(System.Object obj)
			 => seam.Equals(obj);

		public System.Int32 GetHashCode()
			 => seam.GetHashCode();

		public System.Type GetType()
			 => seam.GetType();

		public System.String ToString()
			 => seam.ToString();





    }

}
    
