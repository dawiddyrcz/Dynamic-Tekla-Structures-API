//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class SingleRebar 
    {

		public System.String Size
		{
			get => singlerebar.Size;
			set { singlerebar.Size = value; }
		}

		public Dynamic.Tekla.Structures.Model.RebarHookData StartHook
		{
			get => new Dynamic.Tekla.Structures.Model.RebarHookData(singlerebar.StartHook.GetTSObject());
			set { singlerebar.StartHook = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.RebarHookData EndHook
		{
			get => new Dynamic.Tekla.Structures.Model.RebarHookData(singlerebar.EndHook.GetTSObject());
			set { singlerebar.EndHook = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.Polygon Polygon
		{
			get => new Dynamic.Tekla.Structures.Model.Polygon(singlerebar.Polygon.GetTSObject());
			set { singlerebar.Polygon = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.ModelObject Father
		{
			get => new Dynamic.Tekla.Structures.Model.ModelObject(singlerebar.Father.GetTSObject());
			set { singlerebar.Father = value.GetTSObject(); }
		}

		public System.String Grade
		{
			get => singlerebar.Grade;
			set { singlerebar.Grade = value; }
		}

		public System.String Name
		{
			get => singlerebar.Name;
			set { singlerebar.Name = value; }
		}

		public System.Int32 Class
		{
			get => singlerebar.Class;
			set { singlerebar.Class = value; }
		}

		public Dynamic.Tekla.Structures.Model.NumberingSeries NumberingSeries
		{
			get => new Dynamic.Tekla.Structures.Model.NumberingSeries(singlerebar.NumberingSeries.GetTSObject());
			set { singlerebar.NumberingSeries = value.GetTSObject(); }
		}

		public System.Collections.ArrayList OnPlaneOffsets
		{
			get => singlerebar.OnPlaneOffsets;
			set { singlerebar.OnPlaneOffsets = value; }
		}

		public System.Double FromPlaneOffset
		{
			get => singlerebar.FromPlaneOffset;
			set { singlerebar.FromPlaneOffset = value; }
		}

		public Dynamic.Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum StartPointOffsetType
		{
			get => Dynamic.Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum_.FromTSObject(singlerebar.StartPointOffsetType);
			set { singlerebar.StartPointOffsetType = Dynamic.Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum_.FromTSObject(value); }
		}

		public System.Double StartPointOffsetValue
		{
			get => singlerebar.StartPointOffsetValue;
			set { singlerebar.StartPointOffsetValue = value; }
		}

		public Dynamic.Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum EndPointOffsetType
		{
			get => Dynamic.Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum_.FromTSObject(singlerebar.EndPointOffsetType);
			set { singlerebar.EndPointOffsetType = Dynamic.Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum_.FromTSObject(value); }
		}

		public System.Double EndPointOffsetValue
		{
			get => singlerebar.EndPointOffsetValue;
			set { singlerebar.EndPointOffsetValue = value; }
		}

		public System.Collections.ArrayList RadiusValues
		{
			get => singlerebar.RadiusValues;
			set { singlerebar.RadiusValues = value; }
		}

		public Dynamic.Tekla.Structures.Forming.DeformingType InputPointDeformingState
		{
			get => Dynamic.Tekla.Structures.Forming.DeformingType_.FromTSObject(singlerebar.InputPointDeformingState);
			set { singlerebar.InputPointDeformingState = Dynamic.Tekla.Structures.Forming.DeformingType_.FromTSObject(value); }
		}

		public System.NullableSystem.DateTime, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089<System.DateTime> ModificationTime
		{
			get => singlerebar.ModificationTime;
			set { singlerebar.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => singlerebar.IsUpToDate;
			set { singlerebar.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => new Dynamic.Tekla.Structures.Identifier(singlerebar.Identifier.GetTSObject());
			set { singlerebar.Identifier = value.GetTSObject(); }
		}

        

        dynamic singlerebar;
        
        public SingleRebar()
        {
            this.singlerebar =  new Tekla.Structures.Model.SingleRebar();
        }

        public SingleRebar(dynamic tsObject)
        {
            this.singlerebar = tsObject;
			this.Size = singlerebar.Size;
			this.StartHook = new Dynamic.Tekla.Structures.Model.RebarHookData(singlerebar.StartHook);
			this.EndHook = new Dynamic.Tekla.Structures.Model.RebarHookData(singlerebar.EndHook);
			this.Polygon = new Dynamic.Tekla.Structures.Model.Polygon(singlerebar.Polygon);
			this.Father = new Dynamic.Tekla.Structures.Model.ModelObject(singlerebar.Father);
			this.Grade = singlerebar.Grade;
			this.Name = singlerebar.Name;
			this.Class = singlerebar.Class;
			this.NumberingSeries = new Dynamic.Tekla.Structures.Model.NumberingSeries(singlerebar.NumberingSeries);
			this.OnPlaneOffsets = singlerebar.OnPlaneOffsets;
			this.FromPlaneOffset = singlerebar.FromPlaneOffset;
			this.StartPointOffsetType = Dynamic.Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum_.FromTSObject(singlerebar.StartPointOffsetType);
			this.StartPointOffsetValue = singlerebar.StartPointOffsetValue;
			this.EndPointOffsetType = Dynamic.Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum_.FromTSObject(singlerebar.EndPointOffsetType);
			this.EndPointOffsetValue = singlerebar.EndPointOffsetValue;
			this.RadiusValues = singlerebar.RadiusValues;
			this.InputPointDeformingState = Dynamic.Tekla.Structures.Forming.DeformingType_.FromTSObject(singlerebar.InputPointDeformingState);
			this.ModificationTime = singlerebar.ModificationTime;
			this.IsUpToDate = singlerebar.IsUpToDate;
			this.Identifier = new Dynamic.Tekla.Structures.Identifier(singlerebar.Identifier);

        }


        public dynamic GetTSObject() => singlerebar;

		public System.Boolean Insert()
			 => singlerebar.Insert();

		public System.Boolean Select()
			 => singlerebar.Select();

		public System.Boolean Modify()
			 => singlerebar.Modify();

		public System.Boolean Delete()
			 => singlerebar.Delete();

		public Dynamic.Tekla.Structures.Model.RebarSet GetRebarSet()
			 => new Dynamic.Tekla.Structures.Model.RebarSet(singlerebar.GetRebarSet());

		public System.Collections.ArrayList GetRebarGeometries(Dynamic.Tekla.Structures.Model.Reinforcement.RebarGeometryOptionEnum options)
			 => singlerebar.GetRebarGeometries(options.GetTSObject());

		public System.Collections.ArrayList GetRebarGeometries(System.Boolean withHooks)
			 => singlerebar.GetRebarGeometries(withHooks);

		public System.Collections.ArrayList GetRebarGeometriesWithoutClashes(System.Boolean withHooks)
			 => singlerebar.GetRebarGeometriesWithoutClashes(withHooks);

		public System.Boolean IsGeometryValid()
			 => singlerebar.IsGeometryValid();

		public System.Int32 GetNumberOfRebars()
			 => singlerebar.GetNumberOfRebars();

		public Dynamic.Tekla.Structures.Model.RebarGeometry GetSingleRebar(System.Int32 index, System.Boolean withHooks)
			 => new Dynamic.Tekla.Structures.Model.RebarGeometry(singlerebar.GetSingleRebar(index, withHooks));

		public Dynamic.Tekla.Structures.Model.RebarGeometry GetSingleRebarWithoutClash(System.Int32 index, System.Boolean withHooks)
			 => new Dynamic.Tekla.Structures.Model.RebarGeometry(singlerebar.GetSingleRebarWithoutClash(index, withHooks));

		public Dynamic.Tekla.Structures.Model.Solid GetSolid()
			 => new Dynamic.Tekla.Structures.Model.Solid(singlerebar.GetSolid());

		public Dynamic.Tekla.Structures.Model.PourObject GetFatherPour()
			 => new Dynamic.Tekla.Structures.Model.PourObject(singlerebar.GetFatherPour());

		public Dynamic.Tekla.Structures.Model.PourUnit GetFatherPourUnit()
			 => new Dynamic.Tekla.Structures.Model.PourUnit(singlerebar.GetFatherPourUnit());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(singlerebar.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => new Dynamic.Tekla.Structures.Model.BaseComponent(singlerebar.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(singlerebar.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(ref System.Collections.Hashtable values)
			 => singlerebar.GetAllUserProperties(ref values);

		public System.Boolean GetIntegerUserProperties(ref System.Collections.Hashtable values)
			 => singlerebar.GetIntegerUserProperties(ref values);

		public System.Boolean GetDoubleUserProperties(ref System.Collections.Hashtable values)
			 => singlerebar.GetDoubleUserProperties(ref values);

		public System.Boolean GetStringUserProperties(ref System.Collections.Hashtable values)
			 => singlerebar.GetStringUserProperties(ref values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, ref System.Collections.Hashtable values)
			 => singlerebar.GetAllReportProperties(stringNames, doubleNames, integerNames, ref values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => singlerebar.GetIntegerReportProperties(names, ref values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => singlerebar.GetDoubleReportProperties(names, ref values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, ref System.Collections.Hashtable values)
			 => singlerebar.GetStringReportProperties(names, ref values);

		public System.Boolean GetUserProperty(System.String name, ref System.String value)
			 => singlerebar.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.String value)
			 => singlerebar.GetReportProperty(name, ref value);

		public System.Boolean GetUserProperty(System.String name, ref System.Double value)
			 => singlerebar.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.Double value)
			 => singlerebar.GetReportProperty(name, ref value);

		public System.Boolean GetUserProperty(System.String name, ref System.Int32 value)
			 => singlerebar.GetUserProperty(name, ref value);

		public System.Boolean GetReportProperty(System.String name, ref System.Int32 value)
			 => singlerebar.GetReportProperty(name, ref value);

		public System.Boolean GetDynamicStringProperty(System.String name, ref System.String value)
			 => singlerebar.GetDynamicStringProperty(name, ref value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => singlerebar.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => singlerebar.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => singlerebar.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => singlerebar.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(singlerebar.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => singlerebar.SetPhase(phase.GetTSObject());

		public System.Boolean GetPhase(ref Dynamic.Tekla.Structures.Model.Phase phase)
			 => singlerebar.GetPhase(ref phase.GetTSObject());

		public System.Boolean SetLabel(System.String label)
			 => singlerebar.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => singlerebar.CompareTo(obj);

		public System.Boolean Equals(Dynamic.Tekla.Structures.Model.ModelObject other)
			 => singlerebar.Equals(other.GetTSObject());

		public System.Boolean Equals(System.Object obj)
			 => singlerebar.Equals(obj);

		public System.Int32 GetHashCode()
			 => singlerebar.GetHashCode();

		public System.Type GetType()
			 => singlerebar.GetType();

		public System.String ToString()
			 => singlerebar.ToString();





    }

}
    
