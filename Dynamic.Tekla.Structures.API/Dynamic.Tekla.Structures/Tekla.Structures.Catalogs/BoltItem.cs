/*Copyright (C) Yury Isachenkov 2023
* This program is free software. You may use, distribute and modify 
* this code under the terms of the LGPL3 license. This program is distributed 
* in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
* without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
* For more details see GNU LESSER GENERAL PUBLIC LICENSE Version 3, 29 June 2007
* 
* This library connects with the Tekla Structures Software which is protected by copyright.
* To use this library you have to obtain commercial license for Tekla Structures Software. 
*/
//This file is generated by CodeGenerator

namespace Dynamic.Tekla.Structures.Catalogs
{

    public  class BoltItem 
    {


        public System.String Standard
        {
            get
            {
                try
                {
                return teklaObject.Standard;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(Standard), ex); 
                }
            }
            set
            {
                try
                {
                teklaObject.Standard = value;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(Standard), ex); 
                }
            }
        }

        public Dynamic.Tekla.Structures.Catalogs.BoltItem.BoltItemTypeEnum Type
        {
            get
            {
                try
                {
                var value = teklaObject.Type;
                var value_ = Dynamic.Tekla.Structures.Catalogs.BoltItem.BoltItemTypeEnum_.FromTSObject(value);
                return (Dynamic.Tekla.Structures.Catalogs.BoltItem.BoltItemTypeEnum) value_;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(Type), ex); 
                }
            }
            set
            {
                try
                {
                var value_ = Dynamic.Tekla.Structures.Catalogs.BoltItem.BoltItemTypeEnum_.GetTSObject(value);
                teklaObject.Type = value_;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(Type), ex); 
                }
            }
        }

        public System.Double Size
        {
            get
            {
                try
                {
                return teklaObject.Size;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(Size), ex); 
                }
            }
            set
            {
                try
                {
                teklaObject.Size = value;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(Size), ex); 
                }
            }
        }

        public System.Collections.Generic.List<System.Double> Lengths
        {
            get
            {
                try
                {
                return teklaObject.Lengths;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(Lengths), ex); 
                }
            }
            
        }
        

        internal dynamic teklaObject;

		public BoltItem()
		{
			this.teklaObject = TSActivator.CreateInstance("Tekla.Structures.Catalogs.BoltItem");
		}
		//This constructor creates wrapper object using teklaObject. DateTime is never used but it is here to avoid conflicts with constructors with one argument
		public BoltItem(dynamic tsObject, System.DateTime nonConflictParameter)
		{
			this.teklaObject = tsObject;
		}


        public System.Boolean ExportBoltStandard(
			ref System.String filename)
        {
            
            try
            {
                var result = (System.Boolean) teklaObject.ExportBoltStandard(ref filename);
            
                return result;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(ExportBoltStandard), ex);
            }
        }





    public enum BoltItemTypeEnum
    {
			BOLT_UNKNOWN,
			BOLT,
			STUD        
    }

    internal static class BoltItemTypeEnum_
    {
        public static dynamic GetTSObject(BoltItemTypeEnum dynEnum)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Catalogs.BoltItem.BoltItemTypeEnum").GetType();

            switch (dynEnum)
            {
				case BoltItemTypeEnum.BOLT_UNKNOWN:
					return System.Enum.Parse(tsType, "BOLT_UNKNOWN");
				case BoltItemTypeEnum.BOLT:
					return System.Enum.Parse(tsType, "BOLT");
				case BoltItemTypeEnum.STUD:
					return System.Enum.Parse(tsType, "STUD");

                default:
                    throw new DynamicAPIException(dynEnum.ToString() + "- enum value is not implemented");
            }
        }
    
        public static BoltItemTypeEnum FromTSObject(dynamic tsEnum)
        {
            string tsEnumValue = tsEnum.ToString("G", System.Globalization.CultureInfo.InvariantCulture);
            
			if (tsEnumValue.Equals("BOLT_UNKNOWN", System.StringComparison.InvariantCulture))
				return BoltItemTypeEnum.BOLT_UNKNOWN;
			else if (tsEnumValue.Equals("BOLT", System.StringComparison.InvariantCulture))
				return BoltItemTypeEnum.BOLT;
			else if (tsEnumValue.Equals("STUD", System.StringComparison.InvariantCulture))
				return BoltItemTypeEnum.STUD;

            else 
                throw new DynamicAPIException(tsEnumValue + "- enum value is not implemented");
            
        }
    }



    }

    internal static class BoltItem_
    {
        public static dynamic GetTSObject(BoltItem dynObject)
        {
            if (dynObject is null) return null;
            return dynObject.teklaObject;
        }

        public static BoltItem FromTSObject(dynamic tsObject)
        {
            if (tsObject is null) return null;
            var typeName = "Dynamic." + tsObject.GetType().FullName;
            var type = System.Reflection.Assembly.GetExecutingAssembly().GetType(typeName);
            
            var parameters = new object[2];
            parameters[0] = tsObject;
            parameters[1] = new System.DateTime();

            var dynObject = (Dynamic.Tekla.Structures.Catalogs.BoltItem)System.Activator.CreateInstance(type, parameters);
            dynObject.teklaObject = tsObject;
            return dynObject;
        }
    }

    internal static class BoltItemArray_
    {
        public static dynamic GetTSObject(BoltItem[] dynArray)
        {
            if (dynArray is null) return null;
            var list = new System.Collections.Generic.List<dynamic>();
            foreach(var dynItem in dynArray)
            {
                list.Add(BoltItem_.GetTSObject(dynItem));
            }
            return list.ToArray();
        }

        public static BoltItem[] FromTSObject(dynamic[] tsArray)
        {
            if (tsArray is null) return null;
            var list = new System.Collections.Generic.List<BoltItem>();
            foreach(var tsItem in tsArray)
            {
                list.Add(BoltItem_.FromTSObject(tsItem));
            }
            return list.ToArray();
        }
    }


}
    
