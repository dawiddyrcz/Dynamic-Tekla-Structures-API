/*Copyright (C) Dawid Dyrcz 2020
* This program is free software. You may use, distribute and modify 
* this code under the terms of the LGPL3 license. This program is distributed 
* in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
* without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
* For more details see GNU LESSER GENERAL PUBLIC LICENSE Version 3, 29 June 2007
* 
* This library connects with the Tekla Structures Software which is protected by copyright.
* To use this library you have to obtain commercial license for Tekla Structures Software. 
*/
//This file is generated by CodeGenerator

namespace Dynamic.Tekla.Structures.Catalogs
{

    public  class RebarItem 
    {


        public System.String Grade
        {
            get
            {
                try
                {
                return teklaObject.Grade;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(Grade), ex); 
                }
            }
            set
            {
                try
                {
                teklaObject.Grade = value;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(Grade), ex); 
                }
            }
        }

        public System.String Size
        {
            get
            {
                try
                {
                return teklaObject.Size;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(Size), ex); 
                }
            }
            set
            {
                try
                {
                teklaObject.Size = value;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(Size), ex); 
                }
            }
        }

        public System.String Usage
        {
            get
            {
                try
                {
                return teklaObject.Usage;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(Usage), ex); 
                }
            }
            set
            {
                try
                {
                teklaObject.Usage = value;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(Usage), ex); 
                }
            }
        }

        public System.Double BendRadius
        {
            get
            {
                try
                {
                return teklaObject.BendRadius;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(BendRadius), ex); 
                }
            }
            set
            {
                try
                {
                teklaObject.BendRadius = value;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(BendRadius), ex); 
                }
            }
        }

        public System.String Code
        {
            get
            {
                try
                {
                return teklaObject.Code;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(Code), ex); 
                }
            }
            set
            {
                try
                {
                teklaObject.Code = value;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(Code), ex); 
                }
            }
        }

        public System.Double NominalDiameter
        {
            get
            {
                try
                {
                return teklaObject.NominalDiameter;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(NominalDiameter), ex); 
                }
            }
            set
            {
                try
                {
                teklaObject.NominalDiameter = value;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(NominalDiameter), ex); 
                }
            }
        }

        public System.Double ActualDiameter
        {
            get
            {
                try
                {
                return teklaObject.ActualDiameter;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(ActualDiameter), ex); 
                }
            }
            set
            {
                try
                {
                teklaObject.ActualDiameter = value;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(ActualDiameter), ex); 
                }
            }
        }

        public System.Double WeightPerLenght
        {
            get
            {
                try
                {
                return teklaObject.WeightPerLenght;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(WeightPerLenght), ex); 
                }
            }
            set
            {
                try
                {
                teklaObject.WeightPerLenght = value;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(WeightPerLenght), ex); 
                }
            }
        }

        public System.Double CrossSectionArea
        {
            get
            {
                try
                {
                return teklaObject.CrossSectionArea;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(CrossSectionArea), ex); 
                }
            }
            set
            {
                try
                {
                teklaObject.CrossSectionArea = value;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(CrossSectionArea), ex); 
                }
            }
        }

        public System.Double HookRadius90Degrees
        {
            get
            {
                try
                {
                return teklaObject.HookRadius90Degrees;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(HookRadius90Degrees), ex); 
                }
            }
            set
            {
                try
                {
                teklaObject.HookRadius90Degrees = value;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(HookRadius90Degrees), ex); 
                }
            }
        }

        public System.Double HookLength90Degrees
        {
            get
            {
                try
                {
                return teklaObject.HookLength90Degrees;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(HookLength90Degrees), ex); 
                }
            }
            set
            {
                try
                {
                teklaObject.HookLength90Degrees = value;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(HookLength90Degrees), ex); 
                }
            }
        }

        public System.Double HookRadius135Degrees
        {
            get
            {
                try
                {
                return teklaObject.HookRadius135Degrees;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(HookRadius135Degrees), ex); 
                }
            }
            set
            {
                try
                {
                teklaObject.HookRadius135Degrees = value;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(HookRadius135Degrees), ex); 
                }
            }
        }

        public System.Double HookLength135Degrees
        {
            get
            {
                try
                {
                return teklaObject.HookLength135Degrees;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(HookLength135Degrees), ex); 
                }
            }
            set
            {
                try
                {
                teklaObject.HookLength135Degrees = value;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(HookLength135Degrees), ex); 
                }
            }
        }

        public System.Double HookRadius180Degrees
        {
            get
            {
                try
                {
                return teklaObject.HookRadius180Degrees;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(HookRadius180Degrees), ex); 
                }
            }
            set
            {
                try
                {
                teklaObject.HookRadius180Degrees = value;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(HookRadius180Degrees), ex); 
                }
            }
        }

        public System.Double HookLength180Degrees
        {
            get
            {
                try
                {
                return teklaObject.HookLength180Degrees;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(HookLength180Degrees), ex); 
                }
            }
            set
            {
                try
                {
                teklaObject.HookLength180Degrees = value;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(HookLength180Degrees), ex); 
                }
            }
        }

        public System.Double LapLength
        {
            get
            {
                try
                {
                return teklaObject.LapLength;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(LapLength), ex); 
                }
            }
            set
            {
                try
                {
                teklaObject.LapLength = value;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(LapLength), ex); 
                }
            }
        }

        public System.Double CrankStraightLength
        {
            get
            {
                try
                {
                return teklaObject.CrankStraightLength;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(CrankStraightLength), ex); 
                }
            }
            set
            {
                try
                {
                teklaObject.CrankStraightLength = value;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(CrankStraightLength), ex); 
                }
            }
        }

        public System.String CrankedLengthType
        {
            get
            {
                try
                {
                return teklaObject.CrankedLengthType;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(CrankedLengthType), ex); 
                }
            }
            set
            {
                try
                {
                teklaObject.CrankedLengthType = value;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(CrankedLengthType), ex); 
                }
            }
        }

        public System.Double CrankedLength
        {
            get
            {
                try
                {
                return teklaObject.CrankedLength;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(CrankedLength), ex); 
                }
            }
            set
            {
                try
                {
                teklaObject.CrankedLength = value;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(CrankedLength), ex); 
                }
            }
        }

        public System.Double CrankExtraOffset
        {
            get
            {
                try
                {
                return teklaObject.CrankExtraOffset;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(CrankExtraOffset), ex); 
                }
            }
            set
            {
                try
                {
                teklaObject.CrankExtraOffset = value;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(CrankExtraOffset), ex); 
                }
            }
        }

        public static System.String MAIN_USAGE
        {
            get
            {
                var value = PropertyInvoker.GetStaticPropertyOrFieldValue("Tekla.Structures.Catalogs.RebarItem", "MAIN_USAGE");
                return (System.String) value;
            }
            
        }
        public static System.String TIE_STIRRUP_USAGE
        {
            get
            {
                var value = PropertyInvoker.GetStaticPropertyOrFieldValue("Tekla.Structures.Catalogs.RebarItem", "TIE_STIRRUP_USAGE");
                return (System.String) value;
            }
            
        }
        public static System.String DIAGONAL_RATIO_STRING
        {
            get
            {
                var value = PropertyInvoker.GetStaticPropertyOrFieldValue("Tekla.Structures.Catalogs.RebarItem", "DIAGONAL_RATIO_STRING");
                return (System.String) value;
            }
            
        }
        public static System.String DIAGONAL_DISTANCE_STRING
        {
            get
            {
                var value = PropertyInvoker.GetStaticPropertyOrFieldValue("Tekla.Structures.Catalogs.RebarItem", "DIAGONAL_DISTANCE_STRING");
                return (System.String) value;
            }
            
        }
        public static System.String HORIZONTAL_RATIO_STRING
        {
            get
            {
                var value = PropertyInvoker.GetStaticPropertyOrFieldValue("Tekla.Structures.Catalogs.RebarItem", "HORIZONTAL_RATIO_STRING");
                return (System.String) value;
            }
            
        }
        public static System.String HORIZONTAL_DISTANCE_STRING
        {
            get
            {
                var value = PropertyInvoker.GetStaticPropertyOrFieldValue("Tekla.Structures.Catalogs.RebarItem", "HORIZONTAL_DISTANCE_STRING");
                return (System.String) value;
            }
            
        }        

        internal dynamic teklaObject;

		public RebarItem()
		{
			this.teklaObject = TSActivator.CreateInstance("Tekla.Structures.Catalogs.RebarItem");
		}
		//This constructor creates wrapper object using teklaObject. DateTime is never used but it is here to avoid conflicts with constructors with one argument
		public RebarItem(dynamic tsObject, System.DateTime nonConflictParameter)
		{
			this.teklaObject = tsObject;
		}


        public System.Boolean Select(
			System.String Grade,
			System.String Size,
			System.Double BendRadius)
        {

            try
            {
                var result = (System.Boolean) teklaObject.Select(Grade, Size, BendRadius);
            
                return result;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(Select), ex);
            }
        }



        public System.Boolean Select(
			System.String Grade,
			System.Double Diameter,
			System.Double BendRadius,
			System.Boolean UseNominalDiameter)
        {

            try
            {
                var result = (System.Boolean) teklaObject.Select(Grade, Diameter, BendRadius, UseNominalDiameter);
            
                return result;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(Select), ex);
            }
        }



        public System.Boolean Select(
			System.String Grade,
			System.String Size,
			System.String Usage)
        {

            try
            {
                var result = (System.Boolean) teklaObject.Select(Grade, Size, Usage);
            
                return result;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(Select), ex);
            }
        }



        public System.Boolean Select(
			System.String Grade,
			System.Double Diameter,
			System.String Usage,
			System.Boolean UseNominalDiameter)
        {

            try
            {
                var result = (System.Boolean) teklaObject.Select(Grade, Diameter, Usage, UseNominalDiameter);
            
                return result;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(Select), ex);
            }
        }



        public System.Boolean Select(
			System.String Grade,
			System.String Size)
        {
            try
            {
                var result = (System.Boolean) teklaObject.Select(Grade, Size);
            
                return result;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(Select), ex);
            }
        }



        public System.Boolean Select(
			System.String Grade,
			System.Double NominalDiameter,
			System.Boolean UseNominalDiameter)
        {

            try
            {
                var result = (System.Boolean) teklaObject.Select(Grade, NominalDiameter, UseNominalDiameter);
            
                return result;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(Select), ex);
            }
        }



        public System.Boolean Export(
			ref System.String filename)
        {
            
            try
            {
                var result = (System.Boolean) teklaObject.Export(ref filename);
            
                return result;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(Export), ex);
            }
        }






    }

    internal static class RebarItem_
    {
        public static dynamic GetTSObject(RebarItem dynObject)
        {
            if (dynObject is null) return null;
            return dynObject.teklaObject;
        }

        public static RebarItem FromTSObject(dynamic tsObject)
        {
            if (tsObject is null) return null;
            var typeName = "Dynamic." + tsObject.GetType().FullName;
            var type = System.Reflection.Assembly.GetExecutingAssembly().GetType(typeName);
            
            var parameters = new object[2];
            parameters[0] = tsObject;
            parameters[1] = new System.DateTime();

            var dynObject = (Dynamic.Tekla.Structures.Catalogs.RebarItem)System.Activator.CreateInstance(type, parameters);
            dynObject.teklaObject = tsObject;
            return dynObject;
        }
    }

    internal static class RebarItemArray_
    {
        public static dynamic GetTSObject(RebarItem[] dynArray)
        {
            if (dynArray is null) return null;
            var list = new System.Collections.Generic.List<dynamic>();
            foreach(var dynItem in dynArray)
            {
                list.Add(RebarItem_.GetTSObject(dynItem));
            }
            return list.ToArray();
        }

        public static RebarItem[] FromTSObject(dynamic[] tsArray)
        {
            if (tsArray is null) return null;
            var list = new System.Collections.Generic.List<RebarItem>();
            foreach(var tsItem in tsArray)
            {
                list.Add(RebarItem_.FromTSObject(tsItem));
            }
            return list.ToArray();
        }
    }


}
    
