/*Copyright (C) Dawid Dyrcz 2020
* This program is free software. You may use, distribute and modify 
* this code under the terms of the LGPL3 license. This program is distributed 
* in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
* without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
* For more details see GNU LESSER GENERAL PUBLIC LICENSE Version 3, 29 June 2007
*/
//This file is generated by CodeGenerator

namespace Dynamic.Tekla.Structures.Dialog
{

    public  class Localization  : System.MarshalByRefObject
    {


        public static System.String DefaultLocalizationFile
        {
            get
            {
                var value = PropertyInvoker.GetStaticPropertyOrFieldValue("Tekla.Structures.Dialog.Localization", "DefaultLocalizationFile");
                return (System.String) value;
            }
            
        }
        public static System.String DefaultLocalizationPath
        {
            get
            {
                var value = PropertyInvoker.GetStaticPropertyOrFieldValue("Tekla.Structures.Dialog.Localization", "DefaultLocalizationPath");
                return (System.String) value;
            }
            
        }
        public System.String Language
        {
            get
            {
                try
                {
                return teklaObject.Language;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(Language), ex); 
                }
            }
            set
            {
                try
                {
                teklaObject.Language = value;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(Language), ex); 
                }
            }
        }
        

        internal dynamic teklaObject;

		public Localization()
		{
			this.teklaObject = TSActivator.CreateInstance("Tekla.Structures.Dialog.Localization");
		}
		//This constructor creates wrapper object using teklaObject. DateTime is never used but it is here to avoid conflicts with constructors with one argument
		public Localization(dynamic tsObject, System.DateTime nonConflictParameter)
		{
			this.teklaObject = tsObject;
		}
		public Localization(System.String fileName, System.String language)
		{
			var args = new object[2];
			args[0] = fileName;
			args[1] = language;
			this.teklaObject = TSActivator.CreateInstance("Tekla.Structures.Dialog.Localization", args);
		}


        public void LoadFile(
			System.String fileName)
        {
            
            try
            {
                teklaObject.LoadFile(fileName);
            
                
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(LoadFile), ex);
            }
        }



        public void LoadAidFile(
			System.String fileName)
        {
            
            try
            {
                teklaObject.LoadAidFile(fileName);
            
                
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(LoadAidFile), ex);
            }
        }



        public void LoadAilFile(
			System.String fileName)
        {
            
            try
            {
                teklaObject.LoadAilFile(fileName);
            
                
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(LoadAilFile), ex);
            }
        }



        public void LoadXMLFile(
			System.String fileName)
        {
            
            try
            {
                teklaObject.LoadXMLFile(fileName);
            
                
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(LoadXMLFile), ex);
            }
        }



        public void LocalizeToolTip(
			System.Windows.Forms.Control control,
			System.Windows.Forms.ToolTip toolTip)
        {
            try
            {
                teklaObject.LocalizeToolTip(control, toolTip);
            
                
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(LocalizeToolTip), ex);
            }
        }



        public void Localize(
			System.Windows.Forms.MenuItem menuItem)
        {
            
            try
            {
                teklaObject.Localize(menuItem);
            
                
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(Localize), ex);
            }
        }



        public void Localize(
			System.Windows.Forms.Control control)
        {
            
            try
            {
                teklaObject.Localize(control);
            
                
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(Localize), ex);
            }
        }



        public void Localize(
			System.Configuration.ApplicationSettingsBase applicationSettings)
        {
            
            try
            {
                teklaObject.Localize(applicationSettings);
            
                
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(Localize), ex);
            }
        }



        public System.String GetText(
			System.String name)
        {
            
            try
            {
                var result = (System.String) teklaObject.GetText(name);
            
                return result;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(GetText), ex);
            }
        }






    public  class Util 
    {

        

        internal dynamic teklaObject;

		public Util()
		{
			this.teklaObject = TSActivator.CreateInstance("Tekla.Structures.Dialog.Localization.Util");
		}
		//This constructor creates wrapper object using teklaObject. DateTime is never used but it is here to avoid conflicts with constructors with one argument
		public Util(dynamic tsObject, System.DateTime nonConflictParameter)
		{
			this.teklaObject = tsObject;
		}


        public static void LocalizeListControl(
			Dynamic.Tekla.Structures.Dialog.Localization localization_,
			System.Object obj)
        {
            var localization = Dynamic.Tekla.Structures.Dialog.Localization_.GetTSObject(localization_);
            MethodInvoker.InvokeStaticMethod("Tekla.Structures.Dialog.Localization.Util", "LocalizeListControl", localization, obj);
            
        }



        public static void LocalizeDataGridView(
			Dynamic.Tekla.Structures.Dialog.Localization localization_,
			System.Object obj)
        {
            var localization = Dynamic.Tekla.Structures.Dialog.Localization_.GetTSObject(localization_);
            MethodInvoker.InvokeStaticMethod("Tekla.Structures.Dialog.Localization.Util", "LocalizeDataGridView", localization, obj);
            
        }



        public static void LocalizeToolStrip(
			Dynamic.Tekla.Structures.Dialog.Localization localization_,
			System.Object obj)
        {
            var localization = Dynamic.Tekla.Structures.Dialog.Localization_.GetTSObject(localization_);
            MethodInvoker.InvokeStaticMethod("Tekla.Structures.Dialog.Localization.Util", "LocalizeToolStrip", localization, obj);
            
        }



        public static void LocalizeImageListComboBox(
			Dynamic.Tekla.Structures.Dialog.Localization localization_,
			System.Object obj)
        {
            var localization = Dynamic.Tekla.Structures.Dialog.Localization_.GetTSObject(localization_);
            MethodInvoker.InvokeStaticMethod("Tekla.Structures.Dialog.Localization.Util", "LocalizeImageListComboBox", localization, obj);
            
        }





    public  class PropertyLocalizer 
    {

        

        internal dynamic teklaObject;

		internal PropertyLocalizer() {}
		//This constructor creates wrapper object using teklaObject. DateTime is never used but it is here to avoid conflicts with constructors with one argument
		public PropertyLocalizer(dynamic tsObject, System.DateTime nonConflictParameter)
		{
			this.teklaObject = tsObject;
		}
		public PropertyLocalizer(System.String propertyName)
		{
			var args = new object[1];
			args[0] = propertyName;
			this.teklaObject = TSActivator.CreateInstance("Tekla.Structures.Dialog.Localization.Util.PropertyLocalizer", args);
		}


        public void Localize(
			Dynamic.Tekla.Structures.Dialog.Localization localization_,
			System.Object obj)
        {
            var localization = Dynamic.Tekla.Structures.Dialog.Localization_.GetTSObject(localization_);
            try
            {
                teklaObject.Localize(localization, obj);
            
                
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(Localize), ex);
            }
        }






    }

    internal static class PropertyLocalizer_
    {
        public static dynamic GetTSObject(PropertyLocalizer dynObject)
        {
            if (dynObject is null) return null;
            return dynObject.teklaObject;
        }

        public static PropertyLocalizer FromTSObject(dynamic tsObject)
        {
            if (tsObject is null) return null;
            var typeName = "Dynamic." + tsObject.GetType().FullName;
            var type = System.Reflection.Assembly.GetExecutingAssembly().GetType(typeName);
            
            var parameters = new object[2];
            parameters[0] = tsObject;
            parameters[1] = new System.DateTime();

            var dynObject = (Dynamic.Tekla.Structures.Dialog.Localization.Util.PropertyLocalizer)System.Activator.CreateInstance(type, parameters);
            dynObject.teklaObject = tsObject;
            return dynObject;
        }
    }

    internal static class PropertyLocalizerArray_
    {
        public static dynamic GetTSObject(PropertyLocalizer[] dynArray)
        {
            if (dynArray is null) return null;
            var list = new System.Collections.Generic.List<dynamic>();
            foreach(var dynItem in dynArray)
            {
                list.Add(PropertyLocalizer_.GetTSObject(dynItem));
            }
            return list.ToArray();
        }

        public static PropertyLocalizer[] FromTSObject(dynamic[] tsArray)
        {
            if (tsArray is null) return null;
            var list = new System.Collections.Generic.List<PropertyLocalizer>();
            foreach(var tsItem in tsArray)
            {
                list.Add(PropertyLocalizer_.FromTSObject(tsItem));
            }
            return list.ToArray();
        }
    }




    }

    internal static class Util_
    {
        public static dynamic GetTSObject(Util dynObject)
        {
            if (dynObject is null) return null;
            return dynObject.teklaObject;
        }

        public static Util FromTSObject(dynamic tsObject)
        {
            if (tsObject is null) return null;
            var typeName = "Dynamic." + tsObject.GetType().FullName;
            var type = System.Reflection.Assembly.GetExecutingAssembly().GetType(typeName);
            
            var parameters = new object[2];
            parameters[0] = tsObject;
            parameters[1] = new System.DateTime();

            var dynObject = (Dynamic.Tekla.Structures.Dialog.Localization.Util)System.Activator.CreateInstance(type, parameters);
            dynObject.teklaObject = tsObject;
            return dynObject;
        }
    }

    internal static class UtilArray_
    {
        public static dynamic GetTSObject(Util[] dynArray)
        {
            if (dynArray is null) return null;
            var list = new System.Collections.Generic.List<dynamic>();
            foreach(var dynItem in dynArray)
            {
                list.Add(Util_.GetTSObject(dynItem));
            }
            return list.ToArray();
        }

        public static Util[] FromTSObject(dynamic[] tsArray)
        {
            if (tsArray is null) return null;
            var list = new System.Collections.Generic.List<Util>();
            foreach(var tsItem in tsArray)
            {
                list.Add(Util_.FromTSObject(tsItem));
            }
            return list.ToArray();
        }
    }




    }

    internal static class Localization_
    {
        public static dynamic GetTSObject(Localization dynObject)
        {
            if (dynObject is null) return null;
            return dynObject.teklaObject;
        }

        public static Localization FromTSObject(dynamic tsObject)
        {
            if (tsObject is null) return null;
            var typeName = "Dynamic." + tsObject.GetType().FullName;
            var type = System.Reflection.Assembly.GetExecutingAssembly().GetType(typeName);
            
            var parameters = new object[2];
            parameters[0] = tsObject;
            parameters[1] = new System.DateTime();

            var dynObject = (Dynamic.Tekla.Structures.Dialog.Localization)System.Activator.CreateInstance(type, parameters);
            dynObject.teklaObject = tsObject;
            return dynObject;
        }
    }

    internal static class LocalizationArray_
    {
        public static dynamic GetTSObject(Localization[] dynArray)
        {
            if (dynArray is null) return null;
            var list = new System.Collections.Generic.List<dynamic>();
            foreach(var dynItem in dynArray)
            {
                list.Add(Localization_.GetTSObject(dynItem));
            }
            return list.ToArray();
        }

        public static Localization[] FromTSObject(dynamic[] tsArray)
        {
            if (tsArray is null) return null;
            var list = new System.Collections.Generic.List<Localization>();
            foreach(var tsItem in tsArray)
            {
                list.Add(Localization_.FromTSObject(tsItem));
            }
            return list.ToArray();
        }
    }


}
    
