/*Copyright (C) Dawid Dyrcz 2020
* This program is free software. You may use, distribute and modify 
* this code under the terms of the LGPL3 license. This program is distributed 
* in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
* without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
* For more details see GNU LESSER GENERAL PUBLIC LICENSE Version 3, 29 June 2007
*/
//This file is generated by CodeGenerator

namespace Dynamic.Tekla.Structures.Drawing
{

    public  class DPMPrinterAttributes  : Dynamic.Tekla.Structures.Drawing.GenericAttributesBase
    {


    public Dynamic.Tekla.Structures.Drawing.DotPrintOutputType OutputType
    {
        get
        {
            try
            {
                var value = teklaObject.OutputType;
                var value_ = Dynamic.Tekla.Structures.Drawing.DotPrintOutputType_.FromTSObject(value);
                return (Dynamic.Tekla.Structures.Drawing.DotPrintOutputType) value_;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(OutputType), ex); 
            }
        }
        set
        {
            try
            {
                var value_ = Dynamic.Tekla.Structures.Drawing.DotPrintOutputType_.GetTSObject(value);
                teklaObject.OutputType = value_;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(OutputType), ex); 
            }
        }
    }

    public System.String PrinterName
    {
        get
        {
            try
            {
                return teklaObject.PrinterName;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(PrinterName), ex); 
            }
        }
        set
        {
            try
            {
                teklaObject.PrinterName = value;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(PrinterName), ex); 
            }
        }
    }

    public Dynamic.Tekla.Structures.Drawing.DotPrintPaperSize PaperSize
    {
        get
        {
            try
            {
                var value = teklaObject.PaperSize;
                var value_ = Dynamic.Tekla.Structures.Drawing.DotPrintPaperSize_.FromTSObject(value);
                return (Dynamic.Tekla.Structures.Drawing.DotPrintPaperSize) value_;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(PaperSize), ex); 
            }
        }
        set
        {
            try
            {
                var value_ = Dynamic.Tekla.Structures.Drawing.DotPrintPaperSize_.GetTSObject(value);
                teklaObject.PaperSize = value_;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(PaperSize), ex); 
            }
        }
    }

    public Dynamic.Tekla.Structures.Drawing.DotPrintScalingType ScalingMethod
    {
        get
        {
            try
            {
                var value = teklaObject.ScalingMethod;
                var value_ = Dynamic.Tekla.Structures.Drawing.DotPrintScalingType_.FromTSObject(value);
                return (Dynamic.Tekla.Structures.Drawing.DotPrintScalingType) value_;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(ScalingMethod), ex); 
            }
        }
        set
        {
            try
            {
                var value_ = Dynamic.Tekla.Structures.Drawing.DotPrintScalingType_.GetTSObject(value);
                teklaObject.ScalingMethod = value_;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(ScalingMethod), ex); 
            }
        }
    }

    public System.Double ScaleFactor
    {
        get
        {
            try
            {
                return teklaObject.ScaleFactor;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(ScaleFactor), ex); 
            }
        }
        set
        {
            try
            {
                teklaObject.ScaleFactor = value;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(ScaleFactor), ex); 
            }
        }
    }

    public Dynamic.Tekla.Structures.Drawing.DotPrintOrientationType Orientation
    {
        get
        {
            try
            {
                var value = teklaObject.Orientation;
                var value_ = Dynamic.Tekla.Structures.Drawing.DotPrintOrientationType_.FromTSObject(value);
                return (Dynamic.Tekla.Structures.Drawing.DotPrintOrientationType) value_;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(Orientation), ex); 
            }
        }
        set
        {
            try
            {
                var value_ = Dynamic.Tekla.Structures.Drawing.DotPrintOrientationType_.GetTSObject(value);
                teklaObject.Orientation = value_;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(Orientation), ex); 
            }
        }
    }

    public System.Int32 NumberOfCopies
    {
        get
        {
            try
            {
                return teklaObject.NumberOfCopies;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(NumberOfCopies), ex); 
            }
        }
        set
        {
            try
            {
                teklaObject.NumberOfCopies = value;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(NumberOfCopies), ex); 
            }
        }
    }

    public Dynamic.Tekla.Structures.Drawing.DotPrintColor ColorMode
    {
        get
        {
            try
            {
                var value = teklaObject.ColorMode;
                var value_ = Dynamic.Tekla.Structures.Drawing.DotPrintColor_.FromTSObject(value);
                return (Dynamic.Tekla.Structures.Drawing.DotPrintColor) value_;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(ColorMode), ex); 
            }
        }
        set
        {
            try
            {
                var value_ = Dynamic.Tekla.Structures.Drawing.DotPrintColor_.GetTSObject(value);
                teklaObject.ColorMode = value_;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(ColorMode), ex); 
            }
        }
    }

    public System.String OutputFileName
    {
        get
        {
            try
            {
                return teklaObject.OutputFileName;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(OutputFileName), ex); 
            }
        }
        set
        {
            try
            {
                teklaObject.OutputFileName = value;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(OutputFileName), ex); 
            }
        }
    }

    public System.Boolean OpenFileWhenFinished
    {
        get
        {
            try
            {
                return teklaObject.OpenFileWhenFinished;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(OpenFileWhenFinished), ex); 
            }
        }
        set
        {
            try
            {
                teklaObject.OpenFileWhenFinished = value;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(OpenFileWhenFinished), ex); 
            }
        }
    }

    public Dynamic.Tekla.Structures.Drawing.DotPrintToMultipleSheet PrintToMultipleSheet
    {
        get
        {
            try
            {
                var value = teklaObject.PrintToMultipleSheet;
                var value_ = Dynamic.Tekla.Structures.Drawing.DotPrintToMultipleSheet_.FromTSObject(value);
                return (Dynamic.Tekla.Structures.Drawing.DotPrintToMultipleSheet) value_;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(PrintToMultipleSheet), ex); 
            }
        }
        set
        {
            try
            {
                var value_ = Dynamic.Tekla.Structures.Drawing.DotPrintToMultipleSheet_.GetTSObject(value);
                teklaObject.PrintToMultipleSheet = value_;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(PrintToMultipleSheet), ex); 
            }
        }
    }
        

        

		public DPMPrinterAttributes()
		{
			this.teklaObject = TSActivator.CreateInstance("Tekla.Structures.Drawing.DPMPrinterAttributes");
		}
		//This constructor creates wrapper object using teklaObject. DateTime is never used but it is here to avoid conflicts with constructors with one argument
		public DPMPrinterAttributes(dynamic tsObject, System.DateTime nonConflictParameter)
		{
			this.teklaObject = tsObject;
		}





    }

    internal static class DPMPrinterAttributes_
    {
        public static dynamic GetTSObject(DPMPrinterAttributes dynObject)
        {
            if (dynObject is null) return null;
            return dynObject.teklaObject;
        }

        public static DPMPrinterAttributes FromTSObject(dynamic tsObject)
        {
            if (tsObject is null) return null;
            var typeName = "Dynamic." + tsObject.GetType().FullName;
            var type = System.Reflection.Assembly.GetExecutingAssembly().GetType(typeName);
            
            var parameters = new object[2];
            parameters[0] = tsObject;
            parameters[1] = new System.DateTime();

            var dynObject = (Dynamic.Tekla.Structures.Drawing.DPMPrinterAttributes)System.Activator.CreateInstance(type, parameters);
            dynObject.teklaObject = tsObject;
            return dynObject;
        }
    }

    internal static class DPMPrinterAttributesArray_
    {
        public static dynamic GetTSObject(DPMPrinterAttributes[] dynArray)
        {
            if (dynArray is null) return null;
            var list = new System.Collections.Generic.List<dynamic>();
            foreach(var dynItem in dynArray)
            {
                list.Add(DPMPrinterAttributes_.GetTSObject(dynItem));
            }
            return list.ToArray();
        }

        public static DPMPrinterAttributes[] FromTSObject(dynamic[] tsArray)
        {
            if (tsArray is null) return null;
            var list = new System.Collections.Generic.List<DPMPrinterAttributes>();
            foreach(var tsItem in tsArray)
            {
                list.Add(DPMPrinterAttributes_.FromTSObject(tsItem));
            }
            return list.ToArray();
        }
    }


}
    
