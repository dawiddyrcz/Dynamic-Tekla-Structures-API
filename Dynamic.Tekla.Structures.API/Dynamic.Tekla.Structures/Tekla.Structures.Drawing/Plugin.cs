/*Copyright (C) Yury Isachenkov 2023
* This program is free software. You may use, distribute and modify 
* this code under the terms of the LGPL3 license. This program is distributed 
* in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
* without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
* For more details see GNU LESSER GENERAL PUBLIC LICENSE Version 3, 29 June 2007
* 
* This library connects with the Tekla Structures Software which is protected by copyright.
* To use this library you have to obtain commercial license for Tekla Structures Software. 
*/
//This file is generated by CodeGenerator

namespace Dynamic.Tekla.Structures.Drawing
{

    public  class Plugin  : Dynamic.Tekla.Structures.Drawing.DrawingObject
    {


        public System.String Name
        {
            get
            {
                try
                {
                return teklaObject.Name;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(Name), ex); 
                }
            }
            set
            {
                try
                {
                teklaObject.Name = value;
                }
                catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
                {
                    throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(Name), ex); 
                }
            }
        }
        

        

		internal Plugin() {}
		//This constructor creates wrapper object using teklaObject. DateTime is never used but it is here to avoid conflicts with constructors with one argument
		public Plugin(dynamic tsObject, System.DateTime nonConflictParameter)
		{
			this.teklaObject = tsObject;
		}
		public Plugin(Dynamic.Tekla.Structures.Drawing.ViewBase View, System.String Name)
		{
			var args = new object[2];
			args[0] = Dynamic.Tekla.Structures.Drawing.ViewBase_.GetTSObject(View);
			args[1] = Name;
			this.teklaObject = TSActivator.CreateInstance("Tekla.Structures.Drawing.Plugin", args);
		}


        public void SetPickerInput(
			Dynamic.Tekla.Structures.Drawing.PluginPickerInput Input_)
        {
            var Input = Dynamic.Tekla.Structures.Drawing.PluginPickerInput_.GetTSObject(Input_);
            try
            {
                teklaObject.SetPickerInput(Input);
            
                
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(SetPickerInput), ex);
            }
        }



        public System.Boolean ApplyStandardValues(
			System.String Filename)
        {
            
            try
            {
                var result = (System.Boolean) teklaObject.ApplyStandardValues(Filename);
            
                return result;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(ApplyStandardValues), ex);
            }
        }



        public System.Boolean LoadStandardValues(
			System.String Filename)
        {
            
            try
            {
                var result = (System.Boolean) teklaObject.LoadStandardValues(Filename);
            
                return result;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(LoadStandardValues), ex);
            }
        }



        public System.Boolean TrySetAttribute(
			System.String FieldName,
			System.Int32 fieldValue)
        {
            try
            {
                var result = (System.Boolean) teklaObject.TrySetAttribute(FieldName, fieldValue);
            
                return result;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(TrySetAttribute), ex);
            }
        }



        public System.Boolean TrySetAttribute(
			System.String FieldName,
			System.String fieldValue)
        {
            try
            {
                var result = (System.Boolean) teklaObject.TrySetAttribute(FieldName, fieldValue);
            
                return result;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(TrySetAttribute), ex);
            }
        }



        public System.Boolean TrySetAttribute(
			System.String FieldName,
			System.Double fieldValue)
        {
            try
            {
                var result = (System.Boolean) teklaObject.TrySetAttribute(FieldName, fieldValue);
            
                return result;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(TrySetAttribute), ex);
            }
        }



        public void SetAttribute(
			System.String FieldName,
			System.Int32 fieldValue)
        {
            try
            {
                teklaObject.SetAttribute(FieldName, fieldValue);
            
                
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(SetAttribute), ex);
            }
        }



        public void SetAttribute(
			System.String FieldName,
			System.Double fieldValue)
        {
            try
            {
                teklaObject.SetAttribute(FieldName, fieldValue);
            
                
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(SetAttribute), ex);
            }
        }



        public void SetAttribute(
			System.String FieldName,
			System.String fieldValue)
        {
            try
            {
                teklaObject.SetAttribute(FieldName, fieldValue);
            
                
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(SetAttribute), ex);
            }
        }



        public System.Boolean TryGetAttribute(
			System.String FieldName,
			ref System.Int32 FieldValue)
        {
            try
            {
                var result = (System.Boolean) teklaObject.TryGetAttribute(FieldName, ref FieldValue);
            
                return result;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(TryGetAttribute), ex);
            }
        }



        public System.Int32 GetIntAttribute(
			System.String FieldName)
        {
            
            try
            {
                var result = (System.Int32) teklaObject.GetIntAttribute(FieldName);
            
                return result;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(GetIntAttribute), ex);
            }
        }



        public System.Boolean TryGetAttribute(
			System.String FieldName,
			ref System.Double FieldValue)
        {
            try
            {
                var result = (System.Boolean) teklaObject.TryGetAttribute(FieldName, ref FieldValue);
            
                return result;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(TryGetAttribute), ex);
            }
        }



        public System.Double GetDoubleAttribute(
			System.String FieldName)
        {
            
            try
            {
                var result = (System.Double) teklaObject.GetDoubleAttribute(FieldName);
            
                return result;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(GetDoubleAttribute), ex);
            }
        }



        public System.Boolean TryGetAttribute(
			System.String FieldName,
			ref System.String FieldValue)
        {
            try
            {
                var result = (System.Boolean) teklaObject.TryGetAttribute(FieldName, ref FieldValue);
            
                return result;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(TryGetAttribute), ex);
            }
        }



        public System.String GetStringAttribute(
			System.String FieldName)
        {
            
            try
            {
                var result = (System.String) teklaObject.GetStringAttribute(FieldName);
            
                return result;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(GetStringAttribute), ex);
            }
        }






    }

    internal static class Plugin_
    {
        public static dynamic GetTSObject(Plugin dynObject)
        {
            if (dynObject is null) return null;
            return dynObject.teklaObject;
        }

        public static Plugin FromTSObject(dynamic tsObject)
        {
            if (tsObject is null) return null;
            var typeName = "Dynamic." + tsObject.GetType().FullName;
            var type = System.Reflection.Assembly.GetExecutingAssembly().GetType(typeName);
            
            var parameters = new object[2];
            parameters[0] = tsObject;
            parameters[1] = new System.DateTime();

            var dynObject = (Dynamic.Tekla.Structures.Drawing.Plugin)System.Activator.CreateInstance(type, parameters);
            dynObject.teklaObject = tsObject;
            return dynObject;
        }
    }

    internal static class PluginArray_
    {
        public static dynamic GetTSObject(Plugin[] dynArray)
        {
            if (dynArray is null) return null;
            var list = new System.Collections.Generic.List<dynamic>();
            foreach(var dynItem in dynArray)
            {
                list.Add(Plugin_.GetTSObject(dynItem));
            }
            return list.ToArray();
        }

        public static Plugin[] FromTSObject(dynamic[] tsArray)
        {
            if (tsArray is null) return null;
            var list = new System.Collections.Generic.List<Plugin>();
            foreach(var tsItem in tsArray)
            {
                list.Add(Plugin_.FromTSObject(tsItem));
            }
            return list.ToArray();
        }
    }


}
    
