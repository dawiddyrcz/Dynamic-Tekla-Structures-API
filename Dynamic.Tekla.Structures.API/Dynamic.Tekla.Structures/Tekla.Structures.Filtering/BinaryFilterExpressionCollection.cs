/*Copyright (C) Dawid Dyrcz 2020
* This program is free software. You may use, distribute and modify 
* this code under the terms of the LGPL3 license. This program is distributed 
* in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
* without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
* For more details see GNU LESSER GENERAL PUBLIC LICENSE Version 3, 29 June 2007
*/
//This file is generated by CodeGenerator

namespace Dynamic.Tekla.Structures.Filtering
{

    public  class BinaryFilterExpressionCollection  : Dynamic.Tekla.Structures.Filtering.FilterExpression
    {


    public System.Boolean IsSynchronized
    {
        get
        {
            try
            {
                return teklaObject.IsSynchronized;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(IsSynchronized), ex); 
            }
        }
        
    }

    public System.Object SyncRoot
    {
        get
        {
            try
            {
                return teklaObject.SyncRoot;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(SyncRoot), ex); 
            }
        }
        
    }

    public System.Int32 Count
    {
        get
        {
            try
            {
                return teklaObject.Count;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(Count), ex); 
            }
        }
        
    }

    public System.Boolean IsReadOnly
    {
        get
        {
            try
            {
                return teklaObject.IsReadOnly;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(IsReadOnly), ex); 
            }
        }
        
    }

    public Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem Item
    {
        get
        {
            try
            {
                var value = teklaObject.Item;
                var value_ = Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem_.FromTSObject(value);
                return (Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem) value_;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(Item), ex); 
            }
        }
        set
        {
            try
            {
                var value_ = Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem_.GetTSObject(value);
                teklaObject.Item = value_;
            }
            catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
            {
                throw DynamicAPINotFoundException.CouldNotFindProperty(nameof(Item), ex); 
            }
        }
    }
        

        

		public BinaryFilterExpressionCollection()
		{
			this.teklaObject = TSActivator.CreateInstance("Tekla.Structures.Filtering.BinaryFilterExpressionCollection");
		}
		//This constructor creates wrapper object using teklaObject. DateTime is never used but it is here to avoid conflicts with constructors with one argument
		public BinaryFilterExpressionCollection(dynamic tsObject, System.DateTime nonConflictParameter)
		{
			this.teklaObject = tsObject;
		}


public System.Int32 IndexOf(
	Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem Item_
	)
{
	var Item = Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem_.GetTSObject(Item_);
    try
    {
        	var result = (System.Int32) teklaObject.IndexOf(Item);

        	return result;
    }
    catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
    {
        throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(IndexOf), ex);
    }
}



public void Add(
	Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem Item_
	)
{
	var Item = Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem_.GetTSObject(Item_);
    try
    {
        	teklaObject.Add(Item);

        
    }
    catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
    {
        throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(Add), ex);
    }
}



public void Insert(
	System.Int32 Index,
	Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem Item_
	)
{
	
	var Item = Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem_.GetTSObject(Item_);
    try
    {
        	teklaObject.Insert(Index, Item);

        
    }
    catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
    {
        throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(Insert), ex);
    }
}



public System.Boolean Remove(
	Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem Item_
	)
{
	var Item = Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem_.GetTSObject(Item_);
    try
    {
        	var result = (System.Boolean) teklaObject.Remove(Item);

        	return result;
    }
    catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
    {
        throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(Remove), ex);
    }
}



public void RemoveAt(
	System.Int32 Index
	)
{
	
    try
    {
        	teklaObject.RemoveAt(Index);

        
    }
    catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
    {
        throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(RemoveAt), ex);
    }
}



public void Clear()
{

    try
    {
        	teklaObject.Clear();

        
    }
    catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
    {
        throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(Clear), ex);
    }
}



public System.Boolean Contains(
	Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem Item_
	)
{
	var Item = Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem_.GetTSObject(Item_);
    try
    {
        	var result = (System.Boolean) teklaObject.Contains(Item);

        	return result;
    }
    catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
    {
        throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(Contains), ex);
    }
}



public System.Boolean IsFirst(
	Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem BinaryFilterExpressionItem_
	)
{
	var BinaryFilterExpressionItem = Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem_.GetTSObject(BinaryFilterExpressionItem_);
    try
    {
        	var result = (System.Boolean) teklaObject.IsFirst(BinaryFilterExpressionItem);

        	return result;
    }
    catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
    {
        throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(IsFirst), ex);
    }
}



public System.Boolean IsLast(
	Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem BinaryFilterExpressionItem_
	)
{
	var BinaryFilterExpressionItem = Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem_.GetTSObject(BinaryFilterExpressionItem_);
    try
    {
        	var result = (System.Boolean) teklaObject.IsLast(BinaryFilterExpressionItem);

        	return result;
    }
    catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
    {
        throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(IsLast), ex);
    }
}



public Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem GetFirst()
{

    try
    {
        	var result = teklaObject.GetFirst();

        	var _result = Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem_.FromTSObject(result);
	return _result;
    }
    catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
    {
        throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(GetFirst), ex);
    }
}



public Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem GetLast()
{

    try
    {
        	var result = teklaObject.GetLast();

        	var _result = Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem_.FromTSObject(result);
	return _result;
    }
    catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException ex)
    {
        throw DynamicAPINotFoundException.CouldNotFindMethod(nameof(GetLast), ex);
    }
}






    }

    internal static class BinaryFilterExpressionCollection_
    {
        public static dynamic GetTSObject(BinaryFilterExpressionCollection dynObject)
        {
            if (dynObject is null) return null;
            return dynObject.teklaObject;
        }

        public static BinaryFilterExpressionCollection FromTSObject(dynamic tsObject)
        {
            if (tsObject is null) return null;
            var typeName = "Dynamic." + tsObject.GetType().FullName;
            var type = System.Reflection.Assembly.GetExecutingAssembly().GetType(typeName);
            
            var parameters = new object[2];
            parameters[0] = tsObject;
            parameters[1] = new System.DateTime();

            var dynObject = (Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionCollection)System.Activator.CreateInstance(type, parameters);
            dynObject.teklaObject = tsObject;
            return dynObject;
        }
    }

    internal static class BinaryFilterExpressionCollectionArray_
    {
        public static dynamic GetTSObject(BinaryFilterExpressionCollection[] dynArray)
        {
            if (dynArray is null) return null;
            var list = new System.Collections.Generic.List<dynamic>();
            foreach(var dynItem in dynArray)
            {
                list.Add(BinaryFilterExpressionCollection_.GetTSObject(dynItem));
            }
            return list.ToArray();
        }

        public static BinaryFilterExpressionCollection[] FromTSObject(dynamic[] tsArray)
        {
            if (tsArray is null) return null;
            var list = new System.Collections.Generic.List<BinaryFilterExpressionCollection>();
            foreach(var tsItem in tsArray)
            {
                list.Add(BinaryFilterExpressionCollection_.FromTSObject(tsItem));
            }
            return list.ToArray();
        }
    }


}
    
