//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Filtering
{

    public sealed class BinaryFilterExpressionCollection 
    {

		public System.Boolean IsSynchronized
		{
			get => binaryfilterexpressioncollection.IsSynchronized;
			set { binaryfilterexpressioncollection.IsSynchronized = value; }
		}

		public System.Object SyncRoot
		{
			get => binaryfilterexpressioncollection.SyncRoot;
			set { binaryfilterexpressioncollection.SyncRoot = value; }
		}

		public System.Int32 Count
		{
			get => binaryfilterexpressioncollection.Count;
			set { binaryfilterexpressioncollection.Count = value; }
		}

		public System.Boolean IsReadOnly
		{
			get => binaryfilterexpressioncollection.IsReadOnly;
			set { binaryfilterexpressioncollection.IsReadOnly = value; }
		}

		public Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem Item
		{
			get => Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem_.FromTSObject(binaryfilterexpressioncollection.Item);
			set { binaryfilterexpressioncollection.Item = Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem_.GetTSObject(value); }
		}

		public System.Boolean IsEnable
		{
			get => binaryfilterexpressioncollection.IsEnable;
			set { binaryfilterexpressioncollection.IsEnable = value; }
		}

        

        internal dynamic binaryfilterexpressioncollection;
        
        public BinaryFilterExpressionCollection()
        {
            this.binaryfilterexpressioncollection =  TSActivator.CreateInstance("Tekla.Structures.Filtering.BinaryFilterExpressionCollection");
        }

        internal BinaryFilterExpressionCollection(dynamic tsObject)
        {
            this.binaryfilterexpressioncollection = tsObject;
        }

		public System.Int32 IndexOf(Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem Item)
			 => binaryfilterexpressioncollection.IndexOf(Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem_.GetTSObject(Item));

		public void Add(Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem Item)
			 => binaryfilterexpressioncollection.Add(Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem_.GetTSObject(Item));

		public void Insert(System.Int32 Index, Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem Item)
			 => binaryfilterexpressioncollection.Insert(Index, Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem_.GetTSObject(Item));

		public System.Boolean Remove(Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem Item)
			 => binaryfilterexpressioncollection.Remove(Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem_.GetTSObject(Item));

		public void RemoveAt(System.Int32 Index)
			 => binaryfilterexpressioncollection.RemoveAt(Index);

		public void Clear()
			 => binaryfilterexpressioncollection.Clear();

		public System.Boolean Contains(Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem Item)
			 => binaryfilterexpressioncollection.Contains(Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem_.GetTSObject(Item));

		public void CopyTo(Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem Array, System.Int32 ArrayIndex)
			 => binaryfilterexpressioncollection.CopyTo(Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem_.GetTSObject(Array), ArrayIndex);

		public System.Boolean IsFirst(Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem BinaryFilterExpressionItem)
			 => binaryfilterexpressioncollection.IsFirst(Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem_.GetTSObject(BinaryFilterExpressionItem));

		public System.Boolean IsLast(Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem BinaryFilterExpressionItem)
			 => binaryfilterexpressioncollection.IsLast(Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem_.GetTSObject(BinaryFilterExpressionItem));

		public Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem GetFirst()
			 => Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem_.FromTSObject(binaryfilterexpressioncollection.GetFirst());

		public Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem GetLast()
			 => Dynamic.Tekla.Structures.Filtering.BinaryFilterExpressionItem_.FromTSObject(binaryfilterexpressioncollection.GetLast());





    }

    internal static class BinaryFilterExpressionCollection_
    {
        public static dynamic GetTSObject(BinaryFilterExpressionCollection dynObject)
        {
            return dynObject.binaryfilterexpressioncollection;
        }

        public static BinaryFilterExpressionCollection FromTSObject(dynamic tsObject)
        {
            return new BinaryFilterExpressionCollection(tsObject);
        }
    }


}
    
