//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Filtering
{

    public  class BinaryFilterExpressionItem  : Dynamic.Tekla.Structures.Filtering.Expression
    {

        

        internal dynamic teklaObject;

		public BinaryFilterExpressionItem() {}
		public BinaryFilterExpressionItem(Dynamic.Tekla.Structures.Filtering.FilterExpression FilterExpression)
		{
			var args = new object[1];
			args[0] = Dynamic.Tekla.Structures.Filtering.FilterExpression_.GetTSObject(FilterExpression);
			this.teklaObject = TSActivator.CreateInstance("Tekla.Structures.Filtering.BinaryFilterExpressionItem", args);
		}
		public BinaryFilterExpressionItem(Dynamic.Tekla.Structures.Filtering.FilterExpression FilterExpression, Dynamic.Tekla.Structures.Filtering.BinaryFilterOperatorType BinaryFilterItemOperatorType)
		{
			var args = new object[2];
			args[0] = Dynamic.Tekla.Structures.Filtering.FilterExpression_.GetTSObject(FilterExpression);
			args[1] = Dynamic.Tekla.Structures.Filtering.BinaryFilterOperatorType_.GetTSObject(BinaryFilterItemOperatorType);
			this.teklaObject = TSActivator.CreateInstance("Tekla.Structures.Filtering.BinaryFilterExpressionItem", args);
		}





    }

    internal static class BinaryFilterExpressionItem_
    {
        public static dynamic GetTSObject(BinaryFilterExpressionItem dynObject)
        {
            return dynObject.teklaObject;
        }

        public static BinaryFilterExpressionItem FromTSObject(dynamic tsObject)
        {
            var typeName = "Dynamic." + tsObject.GetType().FullName;
            var type = System.Reflection.Assembly.GetExecutingAssembly().GetType(typeName);
            var dynObject = (Tekla.Structures.Filtering.BinaryFilterExpressionItem)System.Activator.CreateInstance(type);
            dynObject.teklaObject = tsObject;
            return dynObject;
        }
    }


}
    
