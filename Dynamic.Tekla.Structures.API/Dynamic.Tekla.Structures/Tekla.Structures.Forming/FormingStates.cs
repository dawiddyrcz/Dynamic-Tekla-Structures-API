//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Forming
{

    public sealed class FormingStates 
    {

		public Dynamic.Tekla.Structures.Forming.DeformingType Deforming
		{
			get => Dynamic.Tekla.Structures.Forming.DeformingType_.FromTSObject(formingstates.Deforming);
			set { formingstates.Deforming = Dynamic.Tekla.Structures.Forming.DeformingType_.GetTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Forming.FoldingType Folding
		{
			get => Dynamic.Tekla.Structures.Forming.FoldingType_.FromTSObject(formingstates.Folding);
			set { formingstates.Folding = Dynamic.Tekla.Structures.Forming.FoldingType_.GetTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Forming.WrappingType Wrapping
		{
			get => Dynamic.Tekla.Structures.Forming.WrappingType_.FromTSObject(formingstates.Wrapping);
			set { formingstates.Wrapping = Dynamic.Tekla.Structures.Forming.WrappingType_.GetTSObject(value); }
		}

        

        internal dynamic formingstates;
        
        public FormingStates()
        {
            this.formingstates =  TSActivator.CreateInstance("Tekla.Structures.Forming.FormingStates");
        }

        internal FormingStates(dynamic tsObject)
        {
            this.formingstates = tsObject;
        }

		public System.Object Clone()
			 => formingstates.Clone();





    }

    internal static class FormingStates_
    {
        public static dynamic GetTSObject(FormingStates dynObject)
        {
            return dynObject.formingstates;
        }

        public static FormingStates FromTSObject(dynamic tsObject)
        {
            return new FormingStates(tsObject);
        }
    }


}
    
