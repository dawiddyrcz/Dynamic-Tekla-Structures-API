//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Geometry3d
{

    public  class FacetedBrep 
    {

		public System.Collections.Generic.ICollection<Dynamic.Tekla.Structures.Geometry3d.FacetedBrepFace> Faces
		{
			get => teklaObject.Faces;
			set { teklaObject.Faces = value; }
		}

		public System.Collections.Generic.IDictionary<System.Int32, System.Int32> InnerWires
		{
			get => teklaObject.InnerWires;
			set { teklaObject.InnerWires = value; }
		}

		public System.Int32 OuterWires
		{
			get => teklaObject.OuterWires;
			set { teklaObject.OuterWires = value; }
		}

		public System.Collections.Generic.IList<Dynamic.Tekla.Structures.Geometry3d.IndirectPolymeshEdge> GetEdges
		{
			get => teklaObject.GetEdges;
			set { teklaObject.GetEdges = value; }
		}

		public System.Collections.Generic.IList<Dynamic.Tekla.Structures.Geometry3d.Vector> Vertices
		{
			get => teklaObject.Vertices;
			set { teklaObject.Vertices = value; }
		}

        

        internal dynamic teklaObject;

		public FacetedBrep() {}
		public FacetedBrep(Dynamic.Tekla.Structures.Geometry3d.Vector vertices, System.Int32 outerWires, System.Collections.Generic.IDictionary<System.Int32, System.Int32> innerWires)
		{
			var args = new object[3];
			args[0] = Dynamic.Tekla.Structures.Geometry3d.Vector_.GetTSObject(vertices);
			args[1] = outerWires;
			args[2] = innerWires;
			this.teklaObject = TSActivator.CreateInstance("Tekla.Structures.Geometry3d.FacetedBrep", args);
		}
		public FacetedBrep(Dynamic.Tekla.Structures.Geometry3d.Vector vertices, System.Int32 outerWires, System.Collections.Generic.IDictionary<System.Int32, System.Int32> innerWires, System.Collections.Generic.IList<Dynamic.Tekla.Structures.Geometry3d.IndirectPolymeshEdge> edges)
		{
			var args = new object[4];
			args[0] = Dynamic.Tekla.Structures.Geometry3d.Vector_.GetTSObject(vertices);
			args[1] = outerWires;
			args[2] = innerWires;
			args[3] = edges;
			this.teklaObject = TSActivator.CreateInstance("Tekla.Structures.Geometry3d.FacetedBrep", args);
		}

		public System.Boolean CheckForTwoManifold()
			 => teklaObject.CheckForTwoManifold();

		public System.Int32 GetInnerFace(System.Int32 faceIndex)
			 => teklaObject.GetInnerFace(faceIndex);

		public System.Int32 GetInnerFaceCount(System.Int32 faceIndex)
			 => teklaObject.GetInnerFaceCount(faceIndex);

		public System.Int32 GetOuterFace(System.Int32 faceIndex)
			 => teklaObject.GetOuterFace(faceIndex);





    }

    internal static class FacetedBrep_
    {
        public static dynamic GetTSObject(FacetedBrep dynObject)
        {
            return dynObject.teklaObject;
        }

        public static FacetedBrep FromTSObject(dynamic tsObject)
        {
            var typeName = "Dynamic." + tsObject.GetType().FullName;
            var type = System.Reflection.Assembly.GetExecutingAssembly().GetType(typeName);
            var dynObject = (Tekla.Structures.Geometry3d.FacetedBrep)System.Activator.CreateInstance(type);
            dynObject.teklaObject = tsObject;
            return dynObject;
        }
    }


}
    
