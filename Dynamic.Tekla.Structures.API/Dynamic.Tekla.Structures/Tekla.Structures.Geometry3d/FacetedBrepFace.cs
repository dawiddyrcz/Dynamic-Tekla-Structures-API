//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Geometry3d
{

    public sealed class FacetedBrepFace 
    {

		public System.Boolean HasHoles
		{
			get => facetedbrepface.HasHoles;
			set { facetedbrepface.HasHoles = value; }
		}

		public System.Collections.Generic.IList<Dynamic.Tekla.Structures.Geometry3d.FacetedBrepFaceHole> Holes
		{
			get => facetedbrepface.Holes;
			set { facetedbrepface.Holes = value; }
		}

		public System.Boolean IsReadOnly
		{
			get => facetedbrepface.IsReadOnly;
			set { facetedbrepface.IsReadOnly = value; }
		}

		public System.Collections.Generic.IList<System.Int32> VerticeIndexes
		{
			get => facetedbrepface.VerticeIndexes;
			set { facetedbrepface.VerticeIndexes = value; }
		}

		public System.Collections.Generic.IList<Dynamic.Tekla.Structures.Geometry3d.Vector> Vertices
		{
			get => facetedbrepface.Vertices;
			set { facetedbrepface.Vertices = value; }
		}

        

        internal dynamic facetedbrepface;
        
        public FacetedBrepFace()
        {
            this.facetedbrepface =  TSActivator.CreateInstance("Tekla.Structures.Geometry3d.FacetedBrepFace");
        }

        internal FacetedBrepFace(dynamic tsObject)
        {
            this.facetedbrepface = tsObject;
        }





    }

    internal static class FacetedBrepFace_
    {
        public static dynamic GetTSObject(FacetedBrepFace dynObject)
        {
            return dynObject.facetedbrepface;
        }

        public static FacetedBrepFace FromTSObject(dynamic tsObject)
        {
            return new FacetedBrepFace(tsObject);
        }
    }


}
    
