//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Geometry3d
{

    public  class FacetedBrepWithNormals  : Dynamic.Tekla.Structures.Geometry3d.FacetedBrep
    {

		public Dynamic.Tekla.Structures.Geometry3d.Vector Normals
		{
			get => Dynamic.Tekla.Structures.Geometry3d.Vector_.FromTSObject(teklaObject.Normals);
			set { teklaObject.Normals = Dynamic.Tekla.Structures.Geometry3d.Vector_.GetTSObject(value); }
		}

        

        

		public FacetedBrepWithNormals() {}
		public FacetedBrepWithNormals(Dynamic.Tekla.Structures.Geometry3d.Vector vertices, System.Int32 outerWires, System.Collections.Generic.IDictionary<System.Int32, System.Int32> innerWires, Dynamic.Tekla.Structures.Geometry3d.Vector normals)
		{
			var args = new object[4];
			args[0] = Dynamic.Tekla.Structures.Geometry3d.Vector_.GetTSObject(vertices);
			args[1] = outerWires;
			args[2] = innerWires;
			args[3] = Dynamic.Tekla.Structures.Geometry3d.Vector_.GetTSObject(normals);
			this.teklaObject = TSActivator.CreateInstance("Tekla.Structures.Geometry3d.FacetedBrepWithNormals", args);
		}





    }

    internal static class FacetedBrepWithNormals_
    {
        public static dynamic GetTSObject(FacetedBrepWithNormals dynObject)
        {
            return dynObject.teklaObject;
        }

        public static FacetedBrepWithNormals FromTSObject(dynamic tsObject)
        {
            var typeName = "Dynamic." + tsObject.GetType().FullName;
            var type = System.Reflection.Assembly.GetExecutingAssembly().GetType(typeName);
            var dynObject = (Tekla.Structures.Geometry3d.FacetedBrepWithNormals)System.Activator.CreateInstance(type);
            dynObject.teklaObject = tsObject;
            return dynObject;
        }
    }


}
    
