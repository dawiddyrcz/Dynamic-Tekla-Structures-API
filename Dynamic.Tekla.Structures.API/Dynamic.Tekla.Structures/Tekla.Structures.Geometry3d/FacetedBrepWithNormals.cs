//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Geometry3d
{

    public  class FacetedBrepWithNormals  : Dynamic.Tekla.Structures.Geometry3d.FacetedBrep
    {

		public Dynamic.Tekla.Structures.Geometry3d.Vector Normals
		{
			get => Dynamic.Tekla.Structures.Geometry3d.Vector_.FromTSObject(teklaObject.Normals);
			set { teklaObject.Normals = Dynamic.Tekla.Structures.Geometry3d.Vector_.GetTSObject(value); }
		}

		public System.Collections.Generic.ICollection<Dynamic.Tekla.Structures.Geometry3d.FacetedBrepFace> Faces
		{
			get => teklaObject.Faces;
			set { teklaObject.Faces = value; }
		}

		public System.Collections.Generic.IDictionary<System.Int32, System.Int32> InnerWires
		{
			get => teklaObject.InnerWires;
			set { teklaObject.InnerWires = value; }
		}

		public System.Int32 OuterWires
		{
			get => teklaObject.OuterWires;
			set { teklaObject.OuterWires = value; }
		}

		public System.Collections.Generic.IList<Dynamic.Tekla.Structures.Geometry3d.IndirectPolymeshEdge> GetEdges
		{
			get => teklaObject.GetEdges;
			set { teklaObject.GetEdges = value; }
		}

		public System.Collections.Generic.IList<Dynamic.Tekla.Structures.Geometry3d.Vector> Vertices
		{
			get => teklaObject.Vertices;
			set { teklaObject.Vertices = value; }
		}

        

        internal dynamic teklaObject;

		internal FacetedBrepWithNormals() {}
		public FacetedBrepWithNormals(Dynamic.Tekla.Structures.Geometry3d.Vector vertices, System.Int32 outerWires, System.Collections.Generic.IDictionary<System.Int32, System.Int32> innerWires, Dynamic.Tekla.Structures.Geometry3d.Vector normals)
		{
			var args = new object[4];
			args[0] = Dynamic.Tekla.Structures.Geometry3d.Vector_.GetTSObject(vertices);
			args[1] = outerWires;
			args[2] = innerWires;
			args[3] = Dynamic.Tekla.Structures.Geometry3d.Vector_.GetTSObject(normals);
			this.teklaObject = TSActivator.CreateInstance("Tekla.Structures.Geometry3d.FacetedBrepWithNormals", args);
		}

		public System.Boolean CheckForTwoManifold()
			 => teklaObject.CheckForTwoManifold();

		public System.Int32 GetInnerFace(System.Int32 faceIndex)
			 => teklaObject.GetInnerFace(faceIndex);

		public System.Int32 GetInnerFaceCount(System.Int32 faceIndex)
			 => teklaObject.GetInnerFaceCount(faceIndex);

		public System.Int32 GetOuterFace(System.Int32 faceIndex)
			 => teklaObject.GetOuterFace(faceIndex);





    }

    internal static class FacetedBrepWithNormals_
    {
        public static dynamic GetTSObject(FacetedBrepWithNormals dynObject)
        {
            return dynObject.teklaObject;
        }

        public static FacetedBrepWithNormals FromTSObject(dynamic tsObject)
        {
            return new FacetedBrepWithNormals() { teklaObject = tsObject };
        }
    }


}
    
