//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Geometry3d
{

    public sealed class FacetedBrepWithNormals 
    {

		public Dynamic.Tekla.Structures.Geometry3d.Vector Normals
		{
			get => Dynamic.Tekla.Structures.Geometry3d.Vector_.FromTSObject(facetedbrepwithnormals.Normals);
			set { facetedbrepwithnormals.Normals = Dynamic.Tekla.Structures.Geometry3d.Vector_.GetTSObject(value); }
		}

		public System.Collections.Generic.ICollection<Dynamic.Tekla.Structures.Geometry3d.FacetedBrepFace> Faces
		{
			get => facetedbrepwithnormals.Faces;
			set { facetedbrepwithnormals.Faces = value; }
		}

		public System.Collections.Generic.IDictionary<System.Int32, System.Int32> InnerWires
		{
			get => facetedbrepwithnormals.InnerWires;
			set { facetedbrepwithnormals.InnerWires = value; }
		}

		public System.Int32 OuterWires
		{
			get => facetedbrepwithnormals.OuterWires;
			set { facetedbrepwithnormals.OuterWires = value; }
		}

		public System.Collections.Generic.IList<Dynamic.Tekla.Structures.Geometry3d.IndirectPolymeshEdge> GetEdges
		{
			get => facetedbrepwithnormals.GetEdges;
			set { facetedbrepwithnormals.GetEdges = value; }
		}

		public System.Collections.Generic.IList<Dynamic.Tekla.Structures.Geometry3d.Vector> Vertices
		{
			get => facetedbrepwithnormals.Vertices;
			set { facetedbrepwithnormals.Vertices = value; }
		}

        

        internal dynamic facetedbrepwithnormals;
        
        public FacetedBrepWithNormals()
        {
            this.facetedbrepwithnormals =  TSActivator.CreateInstance("Tekla.Structures.Geometry3d.FacetedBrepWithNormals");
        }

        internal FacetedBrepWithNormals(dynamic tsObject)
        {
            this.facetedbrepwithnormals = tsObject;
        }

		public System.Boolean CheckForTwoManifold()
			 => facetedbrepwithnormals.CheckForTwoManifold();

		public System.Int32 GetInnerFace(System.Int32 faceIndex)
			 => facetedbrepwithnormals.GetInnerFace(faceIndex);

		public System.Int32 GetInnerFaceCount(System.Int32 faceIndex)
			 => facetedbrepwithnormals.GetInnerFaceCount(faceIndex);

		public System.Int32 GetOuterFace(System.Int32 faceIndex)
			 => facetedbrepwithnormals.GetOuterFace(faceIndex);





    }

    internal static class FacetedBrepWithNormals_
    {
        public static dynamic GetTSObject(FacetedBrepWithNormals dynObject)
        {
            return dynObject.facetedbrepwithnormals;
        }

        public static FacetedBrepWithNormals FromTSObject(dynamic tsObject)
        {
            return new FacetedBrepWithNormals(tsObject);
        }
    }


}
    
