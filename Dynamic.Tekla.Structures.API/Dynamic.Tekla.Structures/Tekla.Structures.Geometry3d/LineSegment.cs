//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Geometry3d
{

    public sealed class LineSegment 
    {

		public Dynamic.Tekla.Structures.Geometry3d.Point Point1
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Point(linesegment.Point1);
			set { linesegment.Point1 = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Point Point2
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Point(linesegment.Point2);
			set { linesegment.Point2 = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Point StartPoint
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Point(linesegment.StartPoint);
			set { linesegment.StartPoint = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Point EndPoint
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Point(linesegment.EndPoint);
			set { linesegment.EndPoint = value.GetTSObject(); }
		}

        

        dynamic linesegment;
        
        public LineSegment()
        {
            this.linesegment =  TSActivator.CreateInstance("Tekla.Structures.Geometry3d.LineSegment");
        }

        public LineSegment(dynamic tsObject)
        {
            this.linesegment = tsObject;
			this.Point1 = new Dynamic.Tekla.Structures.Geometry3d.Point(linesegment.Point1);
			this.Point2 = new Dynamic.Tekla.Structures.Geometry3d.Point(linesegment.Point2);
			this.StartPoint = new Dynamic.Tekla.Structures.Geometry3d.Point(linesegment.StartPoint);
			this.EndPoint = new Dynamic.Tekla.Structures.Geometry3d.Point(linesegment.EndPoint);

        }


        public dynamic GetTSObject() => linesegment;

		public System.Double Length()
			 => linesegment.Length();

		public Dynamic.Tekla.Structures.Geometry3d.Vector GetDirectionVector()
			 => new Dynamic.Tekla.Structures.Geometry3d.Vector(linesegment.GetDirectionVector());

		public System.Boolean op_Equality(Dynamic.Tekla.Structures.Geometry3d.LineSegment Segment1, Dynamic.Tekla.Structures.Geometry3d.LineSegment Segment2)
			 => linesegment.op_Equality(Segment1.GetTSObject(), Segment2.GetTSObject());

		public System.Boolean op_Inequality(Dynamic.Tekla.Structures.Geometry3d.LineSegment Segment1, Dynamic.Tekla.Structures.Geometry3d.LineSegment Segment2)
			 => linesegment.op_Inequality(Segment1.GetTSObject(), Segment2.GetTSObject());





    }

}
    
