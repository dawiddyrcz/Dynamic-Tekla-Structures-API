//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Geometry3d
{

    public sealed class Matrix 
    {

		public System.Double Item
		{
			get => matrix.Item;
			set { matrix.Item = value; }
		}

        

        dynamic matrix;
        
        public Matrix()
        {
            this.matrix =  TSActivator.CreateInstance("Tekla.Structures.Geometry3d.Matrix");
        }

        public Matrix(dynamic tsObject)
        {
            this.matrix = tsObject;
        }

        internal dynamic GetTSObject() => matrix;

		public void Transpose()
			 => matrix.Transpose();

		public Dynamic.Tekla.Structures.Geometry3d.Matrix GetTranspose()
			 => new Dynamic.Tekla.Structures.Geometry3d.Matrix(matrix.GetTranspose());

		public Dynamic.Tekla.Structures.Geometry3d.Matrix op_Multiply(Dynamic.Tekla.Structures.Geometry3d.Matrix B, Dynamic.Tekla.Structures.Geometry3d.Matrix A)
			 => new Dynamic.Tekla.Structures.Geometry3d.Matrix(matrix.op_Multiply(B.GetTSObject(), A.GetTSObject()));

		public Dynamic.Tekla.Structures.Geometry3d.Point Transform(Dynamic.Tekla.Structures.Geometry3d.Point p)
			 => new Dynamic.Tekla.Structures.Geometry3d.Point(matrix.Transform(p.GetTSObject()));

		public Dynamic.Tekla.Structures.Geometry3d.Point op_Multiply(Dynamic.Tekla.Structures.Geometry3d.Matrix A, Dynamic.Tekla.Structures.Geometry3d.Point p)
			 => new Dynamic.Tekla.Structures.Geometry3d.Point(matrix.op_Multiply(A.GetTSObject(), p.GetTSObject()));





    }

}
    
