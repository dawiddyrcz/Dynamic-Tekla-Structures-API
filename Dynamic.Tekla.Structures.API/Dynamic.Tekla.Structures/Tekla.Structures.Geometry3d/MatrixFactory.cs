//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Geometry3d
{

    public sealed class MatrixFactory 
    {

        

        dynamic matrixfactory;
        
        private MatrixFactory()
        {
            this.matrixfactory =  TSActivator.CreateInstance("Tekla.Structures.Geometry3d.MatrixFactory");
        }

        public MatrixFactory(dynamic tsObject)
        {
            this.matrixfactory = tsObject;
        }

        internal dynamic GetTSObject() => matrixfactory;

		public Dynamic.Tekla.Structures.Geometry3d.Matrix Rotate(System.Double Angle, Dynamic.Tekla.Structures.Geometry3d.Vector Axis)
			 => new Dynamic.Tekla.Structures.Geometry3d.Matrix(matrixfactory.Rotate(Angle, Axis.GetTSObject()));

		public Dynamic.Tekla.Structures.Geometry3d.Matrix ToCoordinateSystem(Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem CoordSys)
			 => new Dynamic.Tekla.Structures.Geometry3d.Matrix(matrixfactory.ToCoordinateSystem(CoordSys.GetTSObject()));

		public Dynamic.Tekla.Structures.Geometry3d.Matrix FromCoordinateSystem(Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem CoordSys)
			 => new Dynamic.Tekla.Structures.Geometry3d.Matrix(matrixfactory.FromCoordinateSystem(CoordSys.GetTSObject()));

		public Dynamic.Tekla.Structures.Geometry3d.Matrix ByCoordinateSystems(Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem CoordSys1, Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem CoordSys2)
			 => new Dynamic.Tekla.Structures.Geometry3d.Matrix(matrixfactory.ByCoordinateSystems(CoordSys1.GetTSObject(), CoordSys2.GetTSObject()));





    }

}
    
