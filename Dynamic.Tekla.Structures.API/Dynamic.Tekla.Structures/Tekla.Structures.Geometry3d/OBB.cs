//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Geometry3d
{

    public sealed class OBB 
    {

		public Dynamic.Tekla.Structures.Geometry3d.Point Center
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Point(obb.Center);
			set { obb.Center = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Vector Axis0
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Vector(obb.Axis0);
			set { obb.Axis0 = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Vector Axis1
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Vector(obb.Axis1);
			set { obb.Axis1 = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Vector Axis2
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Vector(obb.Axis2);
			set { obb.Axis2 = value.GetTSObject(); }
		}

		public System.Double Extent0
		{
			get => obb.Extent0;
			set { obb.Extent0 = value; }
		}

		public System.Double Extent1
		{
			get => obb.Extent1;
			set { obb.Extent1 = value; }
		}

		public System.Double Extent2
		{
			get => obb.Extent2;
			set { obb.Extent2 = value; }
		}

        

        dynamic obb;
        
        public OBB()
        {
            this.obb =  TSActivator.CreateInstance("Tekla.Structures.Geometry3d.OBB");
        }

        public OBB(dynamic tsObject)
        {
            this.obb = tsObject;
			this.Center = new Dynamic.Tekla.Structures.Geometry3d.Point(obb.Center);
			this.Axis0 = new Dynamic.Tekla.Structures.Geometry3d.Vector(obb.Axis0);
			this.Axis1 = new Dynamic.Tekla.Structures.Geometry3d.Vector(obb.Axis1);
			this.Axis2 = new Dynamic.Tekla.Structures.Geometry3d.Vector(obb.Axis2);
			this.Extent0 = obb.Extent0;
			this.Extent1 = obb.Extent1;
			this.Extent2 = obb.Extent2;

        }


        public dynamic GetTSObject() => obb;

		public void SetAxis(Dynamic.Tekla.Structures.Geometry3d.Vector axis0, Dynamic.Tekla.Structures.Geometry3d.Vector axis1, Dynamic.Tekla.Structures.Geometry3d.Vector axis2)
			 => obb.SetAxis(axis0.GetTSObject(), axis1.GetTSObject(), axis2.GetTSObject());

		public void SetAxis(Dynamic.Tekla.Structures.Geometry3d.Vector axis)
			 => obb.SetAxis(axis.GetTSObject());

		public void SetExtent(System.Double extent0, System.Double extent1, System.Double extent2)
			 => obb.SetExtent(extent0, extent1, extent2);

		public void SetExtent(System.Double extent)
			 => obb.SetExtent(extent);

		public Dynamic.Tekla.Structures.Geometry3d.Point ComputeVertices()
			 => new Dynamic.Tekla.Structures.Geometry3d.Point(obb.ComputeVertices());

		public Dynamic.Tekla.Structures.Geometry3d.Point ClosestPointTo(Dynamic.Tekla.Structures.Geometry3d.Point point)
			 => new Dynamic.Tekla.Structures.Geometry3d.Point(obb.ClosestPointTo(point.GetTSObject()));

		public Dynamic.Tekla.Structures.Geometry3d.Point ClosestPointTo(Dynamic.Tekla.Structures.Geometry3d.Line line)
			 => new Dynamic.Tekla.Structures.Geometry3d.Point(obb.ClosestPointTo(line.GetTSObject()));

		public Dynamic.Tekla.Structures.Geometry3d.Point ClosestPointTo(Dynamic.Tekla.Structures.Geometry3d.LineSegment lineSegment)
			 => new Dynamic.Tekla.Structures.Geometry3d.Point(obb.ClosestPointTo(lineSegment.GetTSObject()));

		public System.Double DistanceTo(Dynamic.Tekla.Structures.Geometry3d.Point point)
			 => obb.DistanceTo(point.GetTSObject());

		public System.Double DistanceTo(Dynamic.Tekla.Structures.Geometry3d.Line line)
			 => obb.DistanceTo(line.GetTSObject());

		public System.Double DistanceTo(Dynamic.Tekla.Structures.Geometry3d.LineSegment lineSegment)
			 => obb.DistanceTo(lineSegment.GetTSObject());

		public Dynamic.Tekla.Structures.Geometry3d.Point IntersectionPointsWith(Dynamic.Tekla.Structures.Geometry3d.Line line)
			 => new Dynamic.Tekla.Structures.Geometry3d.Point(obb.IntersectionPointsWith(line.GetTSObject()));

		public Dynamic.Tekla.Structures.Geometry3d.Point IntersectionPointsWith(Dynamic.Tekla.Structures.Geometry3d.LineSegment lineSegment)
			 => new Dynamic.Tekla.Structures.Geometry3d.Point(obb.IntersectionPointsWith(lineSegment.GetTSObject()));

		public Dynamic.Tekla.Structures.Geometry3d.LineSegment IntersectionWith(Dynamic.Tekla.Structures.Geometry3d.Line line)
			 => new Dynamic.Tekla.Structures.Geometry3d.LineSegment(obb.IntersectionWith(line.GetTSObject()));

		public Dynamic.Tekla.Structures.Geometry3d.LineSegment IntersectionWith(Dynamic.Tekla.Structures.Geometry3d.LineSegment lineSegment)
			 => new Dynamic.Tekla.Structures.Geometry3d.LineSegment(obb.IntersectionWith(lineSegment.GetTSObject()));

		public System.Boolean Intersects(Dynamic.Tekla.Structures.Geometry3d.OBB obb)
			 => obb.Intersects(obb.GetTSObject());

		public System.Boolean Intersects(Dynamic.Tekla.Structures.Geometry3d.Line line)
			 => obb.Intersects(line.GetTSObject());

		public System.Boolean Intersects(Dynamic.Tekla.Structures.Geometry3d.LineSegment lineSegment)
			 => obb.Intersects(lineSegment.GetTSObject());

		public System.Boolean Intersects(Dynamic.Tekla.Structures.Geometry3d.GeometricPlane geometricPlane)
			 => obb.Intersects(geometricPlane.GetTSObject());

		public Dynamic.Tekla.Structures.Geometry3d.LineSegment ShortestSegmentTo(Dynamic.Tekla.Structures.Geometry3d.Line line)
			 => new Dynamic.Tekla.Structures.Geometry3d.LineSegment(obb.ShortestSegmentTo(line.GetTSObject()));

		public Dynamic.Tekla.Structures.Geometry3d.LineSegment ShortestSegmentTo(Dynamic.Tekla.Structures.Geometry3d.LineSegment lineSegment)
			 => new Dynamic.Tekla.Structures.Geometry3d.LineSegment(obb.ShortestSegmentTo(lineSegment.GetTSObject()));

		public Dynamic.Tekla.Structures.Geometry3d.LineSegment ShortestSegmentTo(Dynamic.Tekla.Structures.Geometry3d.Point point)
			 => new Dynamic.Tekla.Structures.Geometry3d.LineSegment(obb.ShortestSegmentTo(point.GetTSObject()));





    }

}
    
