//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Geometry3d
{

    public sealed class Point 
    {

		public System.Double X
		{
			get => point.X;
			set { point.X = value; }
		}

		public System.Double Y
		{
			get => point.Y;
			set { point.Y = value; }
		}

		public System.Double Z
		{
			get => point.Z;
			set { point.Z = value; }
		}

        

        internal dynamic point;
        
        public Point()
        {
            this.point =  TSActivator.CreateInstance("Tekla.Structures.Geometry3d.Point");
        }

        internal Point(dynamic tsObject)
        {
            this.point = tsObject;
        }
		public Point(System.Double X, System.Double Y, System.Double Z)
		{
			var args = new object[3];
			args[0] = X;
			args[1] = Y;
			args[2] = Z;
			this.point = TSActivator.CreateInstance("Tekla.Structures.Geometry3d.Point", args);
		}
		public Point(System.Double X, System.Double Y)
		{
			var args = new object[2];
			args[0] = X;
			args[1] = Y;
			this.point = TSActivator.CreateInstance("Tekla.Structures.Geometry3d.Point", args);
		}
		public Point(Dynamic.Tekla.Structures.Geometry3d.Point Point)
		{
			var args = new object[1];
			args[0] = Dynamic.Tekla.Structures.Geometry3d.Point_.GetTSObject(Point);
			this.point = TSActivator.CreateInstance("Tekla.Structures.Geometry3d.Point", args);
		}

		public void Zero()
			 => point.Zero();

		public void Translate(System.Double X, System.Double Y, System.Double Z)
			 => point.Translate(X, Y, Z);

		public Dynamic.Tekla.Structures.Geometry3d.Point op_Addition(Dynamic.Tekla.Structures.Geometry3d.Point p1, Dynamic.Tekla.Structures.Geometry3d.Point p2)
			 => Dynamic.Tekla.Structures.Geometry3d.Point_.FromTSObject(point.op_Addition(Dynamic.Tekla.Structures.Geometry3d.Point_.GetTSObject(p1), Dynamic.Tekla.Structures.Geometry3d.Point_.GetTSObject(p2)));

		public Dynamic.Tekla.Structures.Geometry3d.Point op_Subtraction(Dynamic.Tekla.Structures.Geometry3d.Point p1, Dynamic.Tekla.Structures.Geometry3d.Point p2)
			 => Dynamic.Tekla.Structures.Geometry3d.Point_.FromTSObject(point.op_Subtraction(Dynamic.Tekla.Structures.Geometry3d.Point_.GetTSObject(p1), Dynamic.Tekla.Structures.Geometry3d.Point_.GetTSObject(p2)));

		public System.Boolean op_Equality(Dynamic.Tekla.Structures.Geometry3d.Point p1, Dynamic.Tekla.Structures.Geometry3d.Point p2)
			 => point.op_Equality(Dynamic.Tekla.Structures.Geometry3d.Point_.GetTSObject(p1), Dynamic.Tekla.Structures.Geometry3d.Point_.GetTSObject(p2));

		public System.Boolean op_Inequality(Dynamic.Tekla.Structures.Geometry3d.Point p1, Dynamic.Tekla.Structures.Geometry3d.Point p2)
			 => point.op_Inequality(Dynamic.Tekla.Structures.Geometry3d.Point_.GetTSObject(p1), Dynamic.Tekla.Structures.Geometry3d.Point_.GetTSObject(p2));

		public System.Boolean AreEqual(Dynamic.Tekla.Structures.Geometry3d.Point Point1, Dynamic.Tekla.Structures.Geometry3d.Point Point2)
			 => point.AreEqual(Dynamic.Tekla.Structures.Geometry3d.Point_.GetTSObject(Point1), Dynamic.Tekla.Structures.Geometry3d.Point_.GetTSObject(Point2));

		public System.Int32 CompareTo(System.Object obj)
			 => point.CompareTo(obj);





    }

    internal static class Point_
    {
        public static dynamic GetTSObject(Point dynObject)
        {
            return dynObject.point;
        }

        public static Point FromTSObject(dynamic tsObject)
        {
            return new Point(tsObject);
        }
    }


}
    
