//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Geometry3d
{

    public sealed class Vector 
    {

		public System.Double X
		{
			get => vector.X;
			set { vector.X = value; }
		}

		public System.Double Y
		{
			get => vector.Y;
			set { vector.Y = value; }
		}

		public System.Double Z
		{
			get => vector.Z;
			set { vector.Z = value; }
		}

        

        internal dynamic vector;
        
        public Vector()
        {
            this.vector =  TSActivator.CreateInstance("Tekla.Structures.Geometry3d.Vector");
        }

        internal Vector(dynamic tsObject)
        {
            this.vector = tsObject;
        }

		public System.Double Normalize()
			 => vector.Normalize();

		public System.Double Normalize(System.Double NewLength)
			 => vector.Normalize(NewLength);

		public System.Double GetLength()
			 => vector.GetLength();

		public System.Double GetAngleBetween(Dynamic.Tekla.Structures.Geometry3d.Vector Vector)
			 => vector.GetAngleBetween(Dynamic.Tekla.Structures.Geometry3d.Vector_.GetTSObject(Vector));

		public Dynamic.Tekla.Structures.Geometry3d.Vector GetNormal()
			 => Dynamic.Tekla.Structures.Geometry3d.Vector_.FromTSObject(vector.GetNormal());

		public System.Double Dot(Dynamic.Tekla.Structures.Geometry3d.Vector Vector)
			 => vector.Dot(Dynamic.Tekla.Structures.Geometry3d.Vector_.GetTSObject(Vector));

		public System.Double Dot(Dynamic.Tekla.Structures.Geometry3d.Vector Vector1, Dynamic.Tekla.Structures.Geometry3d.Vector Vector2)
			 => vector.Dot(Dynamic.Tekla.Structures.Geometry3d.Vector_.GetTSObject(Vector1), Dynamic.Tekla.Structures.Geometry3d.Vector_.GetTSObject(Vector2));

		public Dynamic.Tekla.Structures.Geometry3d.Vector Cross(Dynamic.Tekla.Structures.Geometry3d.Vector Vector)
			 => Dynamic.Tekla.Structures.Geometry3d.Vector_.FromTSObject(vector.Cross(Dynamic.Tekla.Structures.Geometry3d.Vector_.GetTSObject(Vector)));

		public Dynamic.Tekla.Structures.Geometry3d.Vector Cross(Dynamic.Tekla.Structures.Geometry3d.Vector Vector1, Dynamic.Tekla.Structures.Geometry3d.Vector Vector2)
			 => Dynamic.Tekla.Structures.Geometry3d.Vector_.FromTSObject(vector.Cross(Dynamic.Tekla.Structures.Geometry3d.Vector_.GetTSObject(Vector1), Dynamic.Tekla.Structures.Geometry3d.Vector_.GetTSObject(Vector2)));

		public Dynamic.Tekla.Structures.Geometry3d.Vector op_Multiply(Dynamic.Tekla.Structures.Geometry3d.Vector Vector, System.Double Multiplier)
			 => Dynamic.Tekla.Structures.Geometry3d.Vector_.FromTSObject(vector.op_Multiply(Dynamic.Tekla.Structures.Geometry3d.Vector_.GetTSObject(Vector), Multiplier));

		public Dynamic.Tekla.Structures.Geometry3d.Vector op_Multiply(System.Double Multiplier, Dynamic.Tekla.Structures.Geometry3d.Vector Vector)
			 => Dynamic.Tekla.Structures.Geometry3d.Vector_.FromTSObject(vector.op_Multiply(Multiplier, Dynamic.Tekla.Structures.Geometry3d.Vector_.GetTSObject(Vector)));

		public void Zero()
			 => vector.Zero();

		public void Translate(System.Double X, System.Double Y, System.Double Z)
			 => vector.Translate(X, Y, Z);

		public System.Int32 CompareTo(System.Object obj)
			 => vector.CompareTo(obj);





    }

    internal static class Vector_
    {
        public static dynamic GetTSObject(Vector dynObject)
        {
            return dynObject.vector;
        }

        public static Vector FromTSObject(dynamic tsObject)
        {
            return new Vector(tsObject);
        }
    }


}
    
