//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model.History
{

    public  class ModificationStamp 
    {

		public System.Int32 LocalStamp
		{
			get => teklaObject.LocalStamp;
			set { teklaObject.LocalStamp = value; }
		}

		public System.Int32 ServerStamp
		{
			get => teklaObject.ServerStamp;
			set { teklaObject.ServerStamp = value; }
		}

		public System.String Guid
		{
			get => teklaObject.Guid;
			set { teklaObject.Guid = value; }
		}

        

        internal dynamic teklaObject;

		public ModificationStamp()
		{
			this.teklaObject = TSActivator.CreateInstance("Tekla.Structures.Model.History.ModificationStamp");
		}
		public ModificationStamp(System.Int32 LocalStamp, System.Int32 ServerStamp)
		{
			var args = new object[2];
			args[0] = LocalStamp;
			args[1] = ServerStamp;
			this.teklaObject = TSActivator.CreateInstance("Tekla.Structures.Model.History.ModificationStamp", args);
		}





    }

    internal static class ModificationStamp_
    {
        public static dynamic GetTSObject(ModificationStamp dynObject)
        {
            return dynObject.teklaObject;
        }

        public static ModificationStamp FromTSObject(dynamic tsObject)
        {
            var typeName = "Dynamic." + tsObject.GetType().FullName;
            var type = System.Reflection.Assembly.GetExecutingAssembly().GetType(typeName);
            var dynObject = (Tekla.Structures.Model.History.ModificationStamp)System.Activator.CreateInstance(type);
            dynObject.teklaObject = tsObject;
            return dynObject;
        }
    }


}
    
