/*Copyright (C) Dawid Dyrcz 2020
* This program is free software. You may use, distribute and modify 
* this code under the terms of the LGPL3 license. This program is distributed 
* in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
* without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
* For more details see GNU LESSER GENERAL PUBLIC LICENSE Version 3, 29 June 2007
*/
//This file is generated by CodeGenerator

namespace Dynamic.Tekla.Structures.Model.UI
{

    public abstract class ModelObjectVisualization 
    {

        

        internal dynamic teklaObject;



public static System.Boolean SetTemporaryStateForAll(
	Dynamic.Tekla.Structures.Model.UI.Color color_
	)
{
	var color = Dynamic.Tekla.Structures.Model.UI.Color_.GetTSObject(color_);
	var result = (System.Boolean) MethodInvoker.InvokeStaticMethod("Tekla.Structures.Model.UI.ModelObjectVisualization", "SetTemporaryStateForAll", color);
	return result;
}



public static System.Boolean SetTemporaryState(
	System.Collections.Generic.List<Dynamic.Tekla.Structures.Model.ModelObject> modelObjects_,
	Dynamic.Tekla.Structures.Model.UI.Color color_
	)
{
	var modelObjects = ListConverter.ToTSObjects(modelObjects_);
	var color = Dynamic.Tekla.Structures.Model.UI.Color_.GetTSObject(color_);
	var result = (System.Boolean) MethodInvoker.InvokeStaticMethod("Tekla.Structures.Model.UI.ModelObjectVisualization", "SetTemporaryState", modelObjects, color);
	return result;
}



public static System.Boolean SetTransparencyForAll(
	Dynamic.Tekla.Structures.Model.UI.TemporaryTransparency transparency_
	)
{
	var transparency = Dynamic.Tekla.Structures.Model.UI.TemporaryTransparency_.GetTSObject(transparency_);
	var result = (System.Boolean) MethodInvoker.InvokeStaticMethod("Tekla.Structures.Model.UI.ModelObjectVisualization", "SetTransparencyForAll", transparency);
	return result;
}



public static System.Boolean SetTransparency(
	System.Collections.Generic.List<Dynamic.Tekla.Structures.Model.ModelObject> modelObjects_,
	Dynamic.Tekla.Structures.Model.UI.TemporaryTransparency transparency_
	)
{
	var modelObjects = ListConverter.ToTSObjects(modelObjects_);
	var transparency = Dynamic.Tekla.Structures.Model.UI.TemporaryTransparency_.GetTSObject(transparency_);
	var result = (System.Boolean) MethodInvoker.InvokeStaticMethod("Tekla.Structures.Model.UI.ModelObjectVisualization", "SetTransparency", modelObjects, transparency);
	return result;
}



public static System.Boolean SetTransparency(
	System.Collections.Generic.List<Dynamic.Tekla.Structures.Identifier> identifiers_,
	Dynamic.Tekla.Structures.Model.UI.TemporaryTransparency transparency_
	)
{
	var identifiers = ListConverter.ToTSObjects(identifiers_);
	var transparency = Dynamic.Tekla.Structures.Model.UI.TemporaryTransparency_.GetTSObject(transparency_);
	var result = (System.Boolean) MethodInvoker.InvokeStaticMethod("Tekla.Structures.Model.UI.ModelObjectVisualization", "SetTransparency", identifiers, transparency);
	return result;
}



public static System.Boolean SetTemporaryState(
	System.Collections.Generic.List<Dynamic.Tekla.Structures.Identifier> identifiers_,
	Dynamic.Tekla.Structures.Model.UI.Color color_
	)
{
	var identifiers = ListConverter.ToTSObjects(identifiers_);
	var color = Dynamic.Tekla.Structures.Model.UI.Color_.GetTSObject(color_);
	var result = (System.Boolean) MethodInvoker.InvokeStaticMethod("Tekla.Structures.Model.UI.ModelObjectVisualization", "SetTemporaryState", identifiers, color);
	return result;
}



public static System.Boolean GetRepresentation(
	Dynamic.Tekla.Structures.Model.ModelObject modelObject_,
	ref Dynamic.Tekla.Structures.Model.UI.Color color_
	)
{
	var modelObject = Dynamic.Tekla.Structures.Model.ModelObject_.GetTSObject(modelObject_);
	var color = Dynamic.Tekla.Structures.Model.UI.Color_.GetTSObject(color_);
	var result = (System.Boolean) MethodInvoker.InvokeStaticMethod("Tekla.Structures.Model.UI.ModelObjectVisualization", "GetRepresentation", modelObject, ref color);
	color_ = Dynamic.Tekla.Structures.Model.UI.Color_.FromTSObject(color);
	return result;
}



public static System.Boolean ClearAllTemporaryStates()
{
	var result = (System.Boolean) MethodInvoker.InvokeStaticMethod("Tekla.Structures.Model.UI.ModelObjectVisualization", "ClearAllTemporaryStates");
	return result;
}






    }

    internal static class ModelObjectVisualization_
    {
        public static dynamic GetTSObject(ModelObjectVisualization dynObject)
        {
            if (dynObject is null) return null;
            return dynObject.teklaObject;
        }

        public static ModelObjectVisualization FromTSObject(dynamic tsObject)
        {
            if (tsObject is null) return null;
            var typeName = "Dynamic." + tsObject.GetType().FullName;
            var type = System.Reflection.Assembly.GetExecutingAssembly().GetType(typeName);
            
            var parameters = new object[2];
            parameters[0] = tsObject;
            parameters[1] = new System.DateTime();

            var dynObject = (Dynamic.Tekla.Structures.Model.UI.ModelObjectVisualization)System.Activator.CreateInstance(type, parameters);
            dynObject.teklaObject = tsObject;
            return dynObject;
        }
    }

    internal static class ModelObjectVisualizationArray_
    {
        public static dynamic GetTSObject(ModelObjectVisualization[] dynArray)
        {
            if (dynArray is null) return null;
            var list = new System.Collections.Generic.List<dynamic>();
            foreach(var dynItem in dynArray)
            {
                list.Add(ModelObjectVisualization_.GetTSObject(dynItem));
            }
            return list.ToArray();
        }

        public static ModelObjectVisualization[] FromTSObject(dynamic[] tsArray)
        {
            if (tsArray is null) return null;
            var list = new System.Collections.Generic.List<ModelObjectVisualization>();
            foreach(var tsItem in tsArray)
            {
                list.Add(ModelObjectVisualization_.FromTSObject(tsItem));
            }
            return list.ToArray();
        }
    }


}
    
