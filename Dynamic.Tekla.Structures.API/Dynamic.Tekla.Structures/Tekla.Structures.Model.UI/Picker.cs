//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model.UI
{

    public sealed class Picker 
    {

        

        dynamic picker;
        
        public Picker()
        {
            this.picker =  TSActivator.CreateInstance("Tekla.Structures.Model.UI.Picker");
        }

        public Picker(dynamic tsObject)
        {
            this.picker = tsObject;
        }

        internal dynamic GetTSObject() => picker;

		public Dynamic.Tekla.Structures.Geometry3d.Point PickPoint()
			 => new Dynamic.Tekla.Structures.Geometry3d.Point(picker.PickPoint());

		public Dynamic.Tekla.Structures.Geometry3d.Point PickPoint(System.String Prompt)
			 => new Dynamic.Tekla.Structures.Geometry3d.Point(picker.PickPoint(Prompt));

		public System.Collections.ArrayList PickPoints(Dynamic.Tekla.Structures.Model.UI.Picker.PickPointEnum Enum)
			 => picker.PickPoints(Enum.GetTSObject());

		public System.Collections.ArrayList PickPoints(Dynamic.Tekla.Structures.Model.UI.Picker.PickPointEnum Enum, System.String Prompt)
			 => picker.PickPoints(Enum.GetTSObject(), Prompt);

		public System.Collections.ArrayList PickLine()
			 => picker.PickLine();

		public System.Collections.ArrayList PickLine(System.String Prompt)
			 => picker.PickLine(Prompt);

		public Dynamic.Tekla.Structures.Model.UI.PickInput PickFace()
			 => new Dynamic.Tekla.Structures.Model.UI.PickInput(picker.PickFace());

		public Dynamic.Tekla.Structures.Model.UI.PickInput PickFace(System.String Prompt)
			 => new Dynamic.Tekla.Structures.Model.UI.PickInput(picker.PickFace(Prompt));

		public Dynamic.Tekla.Structures.Model.ModelObject PickObject(Dynamic.Tekla.Structures.Model.UI.Picker.PickObjectEnum Enum)
			 => new Dynamic.Tekla.Structures.Model.ModelObject(picker.PickObject(Enum.GetTSObject()));

		public Dynamic.Tekla.Structures.Model.ModelObject PickObject(Dynamic.Tekla.Structures.Model.UI.Picker.PickObjectEnum Enum, System.String Prompt)
			 => new Dynamic.Tekla.Structures.Model.ModelObject(picker.PickObject(Enum.GetTSObject(), Prompt));

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator PickObjects(Dynamic.Tekla.Structures.Model.UI.Picker.PickObjectsEnum Enum)
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(picker.PickObjects(Enum.GetTSObject()));

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator PickObjects(Dynamic.Tekla.Structures.Model.UI.Picker.PickObjectsEnum Enum, System.String Prompt)
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(picker.PickObjects(Enum.GetTSObject(), Prompt));




    public struct PickPointEnum
    {
       
    }

    internal static class PickPointEnum_
    {
        public static dynamic GetTSObject(PickPointEnum dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.UI.PickPointEnum");

            return tsType;
        }
    
        public static PickPointEnum FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new PickPointEnum();
 
            return dynStruct;
        }
    }


    public struct PickObjectEnum
    {
       
    }

    internal static class PickObjectEnum_
    {
        public static dynamic GetTSObject(PickObjectEnum dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.UI.PickObjectEnum");

            return tsType;
        }
    
        public static PickObjectEnum FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new PickObjectEnum();
 
            return dynStruct;
        }
    }


    public struct PickObjectsEnum
    {
       
    }

    internal static class PickObjectsEnum_
    {
        public static dynamic GetTSObject(PickObjectsEnum dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.UI.PickObjectsEnum");

            return tsType;
        }
    
        public static PickObjectsEnum FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new PickObjectsEnum();
 
            return dynStruct;
        }
    }



    }

}
    
