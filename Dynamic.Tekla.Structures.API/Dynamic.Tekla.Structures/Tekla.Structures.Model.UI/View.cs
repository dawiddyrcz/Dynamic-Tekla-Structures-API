//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model.UI
{

    public sealed class View 
    {

		public System.String CurrentRepresentation
		{
			get => view.CurrentRepresentation;
			set { view.CurrentRepresentation = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => new Dynamic.Tekla.Structures.Identifier(view.Identifier);
			set { view.Identifier = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem ViewCoordinateSystem
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(view.ViewCoordinateSystem);
			set { view.ViewCoordinateSystem = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem DisplayCoordinateSystem
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(view.DisplayCoordinateSystem);
			set { view.DisplayCoordinateSystem = value.GetTSObject(); }
		}

		public System.String Name
		{
			get => view.Name;
			set { view.Name = value; }
		}

		public Dynamic.Tekla.Structures.Geometry3d.AABB WorkArea
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.AABB(view.WorkArea);
			set { view.WorkArea = value.GetTSObject(); }
		}

		public System.Double ViewDepthUp
		{
			get => view.ViewDepthUp;
			set { view.ViewDepthUp = value; }
		}

		public System.Double ViewDepthDown
		{
			get => view.ViewDepthDown;
			set { view.ViewDepthDown = value; }
		}

		public Dynamic.Tekla.Structures.Model.UI.View.ViewProjectionType ViewProjection
		{
			get => Dynamic.Tekla.Structures.Model.UI.View.ViewProjectionType_.FromTSObject(view.ViewProjection);
			set { view.ViewProjection = Dynamic.Tekla.Structures.Model.UI.View.ViewProjectionType_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.UI.View.DisplayOrientationType DisplayType
		{
			get => Dynamic.Tekla.Structures.Model.UI.View.DisplayOrientationType_.FromTSObject(view.DisplayType);
			set { view.DisplayType = Dynamic.Tekla.Structures.Model.UI.View.DisplayOrientationType_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.UI.View.ViewRenderingType ViewRendering
		{
			get => Dynamic.Tekla.Structures.Model.UI.View.ViewRenderingType_.FromTSObject(view.ViewRendering);
			set { view.ViewRendering = Dynamic.Tekla.Structures.Model.UI.View.ViewRenderingType_.FromTSObject(value); }
		}

		public System.String ViewFilter
		{
			get => view.ViewFilter;
			set { view.ViewFilter = value; }
		}

		public System.Boolean SharedView
		{
			get => view.SharedView;
			set { view.SharedView = value; }
		}

		public Dynamic.Tekla.Structures.Model.UI.ViewVisibilitySettings VisibilitySettings
		{
			get => new Dynamic.Tekla.Structures.Model.UI.ViewVisibilitySettings(view.VisibilitySettings);
			set { view.VisibilitySettings = value.GetTSObject(); }
		}

        

        dynamic view;
        
        public View()
        {
            this.view =  TSActivator.CreateInstance("Tekla.Structures.Model.UI.View");
        }

        public View(dynamic tsObject)
        {
            this.view = tsObject;
        }

        internal dynamic GetTSObject() => view;

		public System.Boolean Insert()
			 => view.Insert();

		public System.Boolean Modify()
			 => view.Modify();

		public System.Boolean Select()
			 => view.Select();

		public System.Boolean Delete()
			 => view.Delete();

		public System.Boolean IsPerspectiveViewProjection()
			 => view.IsPerspectiveViewProjection();

		public System.Boolean IsVisible()
			 => view.IsVisible();

		public Dynamic.Tekla.Structures.Model.UI.ClipPlaneCollection GetClipPlanes()
			 => new Dynamic.Tekla.Structures.Model.UI.ClipPlaneCollection(view.GetClipPlanes());




    public struct ViewProjectionType
    {
       
    }

    internal static class ViewProjectionType_
    {
        public static dynamic GetTSObject(ViewProjectionType dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.UI.ViewProjectionType");

            return tsType;
        }
    
        public static ViewProjectionType FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new ViewProjectionType();
 
            return dynStruct;
        }
    }


    public struct DisplayOrientationType
    {
       
    }

    internal static class DisplayOrientationType_
    {
        public static dynamic GetTSObject(DisplayOrientationType dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.UI.DisplayOrientationType");

            return tsType;
        }
    
        public static DisplayOrientationType FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new DisplayOrientationType();
 
            return dynStruct;
        }
    }


    public struct ViewRenderingType
    {
       
    }

    internal static class ViewRenderingType_
    {
        public static dynamic GetTSObject(ViewRenderingType dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.UI.ViewRenderingType");

            return tsType;
        }
    
        public static ViewRenderingType FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new ViewRenderingType();
 
            return dynStruct;
        }
    }



    }

}
    
