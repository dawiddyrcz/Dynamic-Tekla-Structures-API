//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class Assembly 
    {

		public System.String Name
		{
			get => assembly.Name;
			set { assembly.Name = value; }
		}

		public Dynamic.Tekla.Structures.Model.NumberingSeries AssemblyNumber
		{
			get => new Dynamic.Tekla.Structures.Model.NumberingSeries(assembly.AssemblyNumber);
			set { assembly.AssemblyNumber = value.GetTSObject(); }
		}

		public System.DateTime ModificationTime
		{
			get => assembly.ModificationTime;
			set { assembly.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => assembly.IsUpToDate;
			set { assembly.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => new Dynamic.Tekla.Structures.Identifier(assembly.Identifier);
			set { assembly.Identifier = value.GetTSObject(); }
		}

        

        dynamic assembly;
        
        public Assembly()
        {
            this.assembly =  TSActivator.CreateInstance("Tekla.Structures.Model.Assembly");
        }

        public Assembly(dynamic tsObject)
        {
            this.assembly = tsObject;
			this.Name = assembly.Name;
			this.AssemblyNumber = new Dynamic.Tekla.Structures.Model.NumberingSeries(assembly.AssemblyNumber);
			this.ModificationTime = assembly.ModificationTime;
			this.IsUpToDate = assembly.IsUpToDate;
			this.Identifier = new Dynamic.Tekla.Structures.Identifier(assembly.Identifier);

        }


        public dynamic GetTSObject() => assembly;

		public Dynamic.Tekla.Structures.Model.ModelObject GetMainPart()
			 => new Dynamic.Tekla.Structures.Model.ModelObject(assembly.GetMainPart());

		public System.Boolean SetMainPart(Dynamic.Tekla.Structures.Model.Part Part)
			 => assembly.SetMainPart(Part.GetTSObject());

		public System.Collections.ArrayList GetSecondaries()
			 => assembly.GetSecondaries();

		public System.Boolean Add(Dynamic.Tekla.Structures.Model.IAssemblable Object)
			 => assembly.Add(Object.GetTSObject());

		public System.Boolean Add(System.Collections.ArrayList Assemblables)
			 => assembly.Add(Assemblables);

		public System.Boolean Remove(Dynamic.Tekla.Structures.Model.ModelObject Object)
			 => assembly.Remove(Object.GetTSObject());

		public System.Boolean Insert()
			 => assembly.Insert();

		public System.Boolean Select()
			 => assembly.Select();

		public System.Boolean Modify()
			 => assembly.Modify();

		public System.Boolean Delete()
			 => assembly.Delete();

		public System.Boolean Add(Dynamic.Tekla.Structures.Model.Assembly Assembly)
			 => assembly.Add(Assembly.GetTSObject());

		public Dynamic.Tekla.Structures.Model.Assembly GetAssembly()
			 => new Dynamic.Tekla.Structures.Model.Assembly(assembly.GetAssembly());

		public System.Collections.ArrayList GetSubAssemblies()
			 => assembly.GetSubAssemblies();

		public Dynamic.Tekla.Structures.Model.Assembly.AssemblyTypeEnum GetAssemblyType()
			 => new Dynamic.Tekla.Structures.Model.Assembly.AssemblyTypeEnum(assembly.GetAssemblyType());

		public Dynamic.Tekla.Structures.Model.PourObject GetFatherPour()
			 => new Dynamic.Tekla.Structures.Model.PourObject(assembly.GetFatherPour());

		public Dynamic.Tekla.Structures.Model.PourUnit GetFatherPourUnit()
			 => new Dynamic.Tekla.Structures.Model.PourUnit(assembly.GetFatherPourUnit());

		public System.Boolean CompareTo(Dynamic.Tekla.Structures.Model.Assembly AssemblyToCompare)
			 => assembly.CompareTo(AssemblyToCompare.GetTSObject());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(assembly.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => new Dynamic.Tekla.Structures.Model.BaseComponent(assembly.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(assembly.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(System.Collections.Hashtable values)
			 => assembly.GetAllUserProperties(values);

		public System.Boolean GetIntegerUserProperties(System.Collections.Hashtable values)
			 => assembly.GetIntegerUserProperties(values);

		public System.Boolean GetDoubleUserProperties(System.Collections.Hashtable values)
			 => assembly.GetDoubleUserProperties(values);

		public System.Boolean GetStringUserProperties(System.Collections.Hashtable values)
			 => assembly.GetStringUserProperties(values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, System.Collections.Hashtable values)
			 => assembly.GetAllReportProperties(stringNames, doubleNames, integerNames, values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => assembly.GetIntegerReportProperties(names, values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => assembly.GetDoubleReportProperties(names, values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => assembly.GetStringReportProperties(names, values);

		public System.Boolean GetUserProperty(System.String name, System.String value)
			 => assembly.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.String value)
			 => assembly.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Double value)
			 => assembly.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Double value)
			 => assembly.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Int32 value)
			 => assembly.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Int32 value)
			 => assembly.GetReportProperty(name, value);

		public System.Boolean GetDynamicStringProperty(System.String name, System.String value)
			 => assembly.GetDynamicStringProperty(name, value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => assembly.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => assembly.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => assembly.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => assembly.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(assembly.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => assembly.SetPhase(phase.GetTSObject());

		public System.Boolean GetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => assembly.GetPhase(phase.GetTSObject());

		public System.Boolean SetLabel(System.String label)
			 => assembly.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => assembly.CompareTo(obj);




    public enum AssemblyTypeEnum
    {
			STEEL_ASSEMBLY,
			PRECAST_ASSEMBLY,
			IN_SITU_ASSEMBLY,
			TIMBER_ASSEMBLY,
			UNKNOWN_ASSEMBLY        
    }

    public static class AssemblyTypeEnum_
    {
        public static dynamic GetTSObject(AssemblyTypeEnum dynEnum)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.AssemblyTypeEnum");

            switch (dynEnum)
            {
				case AssemblyTypeEnum.STEEL_ASSEMBLY:
					return System.Enum.Parse(tsType, "STEEL_ASSEMBLY");
				case AssemblyTypeEnum.PRECAST_ASSEMBLY:
					return System.Enum.Parse(tsType, "PRECAST_ASSEMBLY");
				case AssemblyTypeEnum.IN_SITU_ASSEMBLY:
					return System.Enum.Parse(tsType, "IN_SITU_ASSEMBLY");
				case AssemblyTypeEnum.TIMBER_ASSEMBLY:
					return System.Enum.Parse(tsType, "TIMBER_ASSEMBLY");
				case AssemblyTypeEnum.UNKNOWN_ASSEMBLY:
					return System.Enum.Parse(tsType, "UNKNOWN_ASSEMBLY");

                default:
                    throw new System.NotImplementedException(dynEnum.ToString() + "- enum value is not implemented");
            }
        }
    
        public static AssemblyTypeEnum FromTSObject(dynamic tsEnum)
        {
            string tsEnumValue = tsEnum.ToString("G", System.Globalization.CultureInfo.InvariantCulture);
            
			if (tsEnumValue.Equals("STEEL_ASSEMBLY", System.StringComparison.InvariantCulture))
				return AssemblyTypeEnum.STEEL_ASSEMBLY;
			else if (tsEnumValue.Equals("PRECAST_ASSEMBLY", System.StringComparison.InvariantCulture))
				return AssemblyTypeEnum.PRECAST_ASSEMBLY;
			else if (tsEnumValue.Equals("IN_SITU_ASSEMBLY", System.StringComparison.InvariantCulture))
				return AssemblyTypeEnum.IN_SITU_ASSEMBLY;
			else if (tsEnumValue.Equals("TIMBER_ASSEMBLY", System.StringComparison.InvariantCulture))
				return AssemblyTypeEnum.TIMBER_ASSEMBLY;
			else if (tsEnumValue.Equals("UNKNOWN_ASSEMBLY", System.StringComparison.InvariantCulture))
				return AssemblyTypeEnum.UNKNOWN_ASSEMBLY;

            else 
                throw new System.NotImplementedException(tsEnumValue + "- enum value is not implemented");
            
        }
    }



    }

}
    
