//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class BaseRebarModifier 
    {

		public Dynamic.Tekla.Structures.Model.RebarSet Father
		{
			get => Dynamic.Tekla.Structures.Model.RebarSet_.FromTSObject(baserebarmodifier.Father);
			set { baserebarmodifier.Father = Dynamic.Tekla.Structures.Model.RebarSet_.GetTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.Contour Curve
		{
			get => Dynamic.Tekla.Structures.Model.Contour_.FromTSObject(baserebarmodifier.Curve);
			set { baserebarmodifier.Curve = Dynamic.Tekla.Structures.Model.Contour_.GetTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.BaseRebarModifier.BarsAffectedEnum BarsAffected
		{
			get => Dynamic.Tekla.Structures.Model.BaseRebarModifier.BarsAffectedEnum_.FromTSObject(baserebarmodifier.BarsAffected);
			set { baserebarmodifier.BarsAffected = Dynamic.Tekla.Structures.Model.BaseRebarModifier.BarsAffectedEnum_.GetTSObject(value); }
		}

		public System.Int32 FirstAffectedBar
		{
			get => baserebarmodifier.FirstAffectedBar;
			set { baserebarmodifier.FirstAffectedBar = value; }
		}

		public System.DateTime ModificationTime
		{
			get => baserebarmodifier.ModificationTime;
			set { baserebarmodifier.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => baserebarmodifier.IsUpToDate;
			set { baserebarmodifier.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => Dynamic.Tekla.Structures.Identifier_.FromTSObject(baserebarmodifier.Identifier);
			set { baserebarmodifier.Identifier = Dynamic.Tekla.Structures.Identifier_.GetTSObject(value); }
		}

        

        internal dynamic baserebarmodifier;
        
        private BaseRebarModifier()
        {
            this.baserebarmodifier =  TSActivator.CreateInstance("Tekla.Structures.Model.BaseRebarModifier");
        }

        internal BaseRebarModifier(dynamic tsObject)
        {
            this.baserebarmodifier = tsObject;
        }

		public System.Boolean Insert()
			 => baserebarmodifier.Insert();

		public System.Boolean Modify()
			 => baserebarmodifier.Modify();

		public System.Boolean Delete()
			 => baserebarmodifier.Delete();

		public System.Boolean Select()
			 => baserebarmodifier.Select();

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => Dynamic.Tekla.Structures.Model.ModelObjectEnumerator_.FromTSObject(baserebarmodifier.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => Dynamic.Tekla.Structures.Model.BaseComponent_.FromTSObject(baserebarmodifier.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => Dynamic.Tekla.Structures.Model.ModelObjectEnumerator_.FromTSObject(baserebarmodifier.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(System.Collections.Hashtable values)
			 => baserebarmodifier.GetAllUserProperties(values);

		public System.Boolean GetIntegerUserProperties(System.Collections.Hashtable values)
			 => baserebarmodifier.GetIntegerUserProperties(values);

		public System.Boolean GetDoubleUserProperties(System.Collections.Hashtable values)
			 => baserebarmodifier.GetDoubleUserProperties(values);

		public System.Boolean GetStringUserProperties(System.Collections.Hashtable values)
			 => baserebarmodifier.GetStringUserProperties(values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, System.Collections.Hashtable values)
			 => baserebarmodifier.GetAllReportProperties(stringNames, doubleNames, integerNames, values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => baserebarmodifier.GetIntegerReportProperties(names, values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => baserebarmodifier.GetDoubleReportProperties(names, values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => baserebarmodifier.GetStringReportProperties(names, values);

		public System.Boolean GetUserProperty(System.String name, System.String value)
			 => baserebarmodifier.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.String value)
			 => baserebarmodifier.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Double value)
			 => baserebarmodifier.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Double value)
			 => baserebarmodifier.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Int32 value)
			 => baserebarmodifier.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Int32 value)
			 => baserebarmodifier.GetReportProperty(name, value);

		public System.Boolean GetDynamicStringProperty(System.String name, System.String value)
			 => baserebarmodifier.GetDynamicStringProperty(name, value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => baserebarmodifier.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => baserebarmodifier.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => baserebarmodifier.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => baserebarmodifier.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem_.FromTSObject(baserebarmodifier.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => baserebarmodifier.SetPhase(Dynamic.Tekla.Structures.Model.Phase_.GetTSObject(phase));

		public System.Boolean GetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => baserebarmodifier.GetPhase(Dynamic.Tekla.Structures.Model.Phase_.GetTSObject(phase));

		public System.Boolean SetLabel(System.String label)
			 => baserebarmodifier.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => baserebarmodifier.CompareTo(obj);




    public enum AffectedRebarEnum
    {
			START,
			END,
			EITHER        
    }

    internal static class AffectedRebarEnum_
    {
        public static dynamic GetTSObject(AffectedRebarEnum dynEnum)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.BaseRebarModifier.AffectedRebarEnum").GetType();

            switch (dynEnum)
            {
				case AffectedRebarEnum.START:
					return System.Enum.Parse(tsType, "START");
				case AffectedRebarEnum.END:
					return System.Enum.Parse(tsType, "END");
				case AffectedRebarEnum.EITHER:
					return System.Enum.Parse(tsType, "EITHER");

                default:
                    throw new System.NotImplementedException(dynEnum.ToString() + "- enum value is not implemented");
            }
        }
    
        public static AffectedRebarEnum FromTSObject(dynamic tsEnum)
        {
            string tsEnumValue = tsEnum.ToString("G", System.Globalization.CultureInfo.InvariantCulture);
            
			if (tsEnumValue.Equals("START", System.StringComparison.InvariantCulture))
				return AffectedRebarEnum.START;
			else if (tsEnumValue.Equals("END", System.StringComparison.InvariantCulture))
				return AffectedRebarEnum.END;
			else if (tsEnumValue.Equals("EITHER", System.StringComparison.InvariantCulture))
				return AffectedRebarEnum.EITHER;

            else 
                throw new System.NotImplementedException(tsEnumValue + "- enum value is not implemented");
            
        }
    }


    public enum BarsAffectedEnum
    {
			ALL_BARS,
			EVERY_SECOND_BAR,
			EVERY_THIRD_BAR,
			EVERY_FOURTH_BAR        
    }

    internal static class BarsAffectedEnum_
    {
        public static dynamic GetTSObject(BarsAffectedEnum dynEnum)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.BaseRebarModifier.BarsAffectedEnum").GetType();

            switch (dynEnum)
            {
				case BarsAffectedEnum.ALL_BARS:
					return System.Enum.Parse(tsType, "ALL_BARS");
				case BarsAffectedEnum.EVERY_SECOND_BAR:
					return System.Enum.Parse(tsType, "EVERY_SECOND_BAR");
				case BarsAffectedEnum.EVERY_THIRD_BAR:
					return System.Enum.Parse(tsType, "EVERY_THIRD_BAR");
				case BarsAffectedEnum.EVERY_FOURTH_BAR:
					return System.Enum.Parse(tsType, "EVERY_FOURTH_BAR");

                default:
                    throw new System.NotImplementedException(dynEnum.ToString() + "- enum value is not implemented");
            }
        }
    
        public static BarsAffectedEnum FromTSObject(dynamic tsEnum)
        {
            string tsEnumValue = tsEnum.ToString("G", System.Globalization.CultureInfo.InvariantCulture);
            
			if (tsEnumValue.Equals("ALL_BARS", System.StringComparison.InvariantCulture))
				return BarsAffectedEnum.ALL_BARS;
			else if (tsEnumValue.Equals("EVERY_SECOND_BAR", System.StringComparison.InvariantCulture))
				return BarsAffectedEnum.EVERY_SECOND_BAR;
			else if (tsEnumValue.Equals("EVERY_THIRD_BAR", System.StringComparison.InvariantCulture))
				return BarsAffectedEnum.EVERY_THIRD_BAR;
			else if (tsEnumValue.Equals("EVERY_FOURTH_BAR", System.StringComparison.InvariantCulture))
				return BarsAffectedEnum.EVERY_FOURTH_BAR;

            else 
                throw new System.NotImplementedException(tsEnumValue + "- enum value is not implemented");
            
        }
    }



    }

    internal static class BaseRebarModifier_
    {
        public static dynamic GetTSObject(BaseRebarModifier dynObject)
        {
            return dynObject.baserebarmodifier;
        }

        public static BaseRebarModifier FromTSObject(dynamic tsObject)
        {
            return new BaseRebarModifier(tsObject);
        }
    }


}
    
