//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class BaseWeld 
    {

		public Dynamic.Tekla.Structures.Model.ModelObject MainObject
		{
			get => new Dynamic.Tekla.Structures.Model.ModelObject(baseweld.MainObject);
			set { baseweld.MainObject = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.ModelObject SecondaryObject
		{
			get => new Dynamic.Tekla.Structures.Model.ModelObject(baseweld.SecondaryObject);
			set { baseweld.SecondaryObject = value.GetTSObject(); }
		}

		public System.Double SizeAbove
		{
			get => baseweld.SizeAbove;
			set { baseweld.SizeAbove = value; }
		}

		public System.Double AdditionalSizeAbove
		{
			get => baseweld.AdditionalSizeAbove;
			set { baseweld.AdditionalSizeAbove = value; }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldTypeEnum TypeAbove
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldTypeEnum_.FromTSObject(baseweld.TypeAbove);
			set { baseweld.TypeAbove = Dynamic.Tekla.Structures.Model.BaseWeld.WeldTypeEnum_.FromTSObject(value); }
		}

		public System.Double AngleAbove
		{
			get => baseweld.AngleAbove;
			set { baseweld.AngleAbove = value; }
		}

		public System.Double LengthAbove
		{
			get => baseweld.LengthAbove;
			set { baseweld.LengthAbove = value; }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldContourEnum ContourAbove
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldContourEnum_.FromTSObject(baseweld.ContourAbove);
			set { baseweld.ContourAbove = Dynamic.Tekla.Structures.Model.BaseWeld.WeldContourEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldFinishEnum FinishAbove
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldFinishEnum_.FromTSObject(baseweld.FinishAbove);
			set { baseweld.FinishAbove = Dynamic.Tekla.Structures.Model.BaseWeld.WeldFinishEnum_.FromTSObject(value); }
		}

		public System.Double PitchAbove
		{
			get => baseweld.PitchAbove;
			set { baseweld.PitchAbove = value; }
		}

		public System.Double SizeBelow
		{
			get => baseweld.SizeBelow;
			set { baseweld.SizeBelow = value; }
		}

		public System.Double AdditionalSizeBelow
		{
			get => baseweld.AdditionalSizeBelow;
			set { baseweld.AdditionalSizeBelow = value; }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldTypeEnum TypeBelow
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldTypeEnum_.FromTSObject(baseweld.TypeBelow);
			set { baseweld.TypeBelow = Dynamic.Tekla.Structures.Model.BaseWeld.WeldTypeEnum_.FromTSObject(value); }
		}

		public System.Double AngleBelow
		{
			get => baseweld.AngleBelow;
			set { baseweld.AngleBelow = value; }
		}

		public System.Double LengthBelow
		{
			get => baseweld.LengthBelow;
			set { baseweld.LengthBelow = value; }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldContourEnum ContourBelow
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldContourEnum_.FromTSObject(baseweld.ContourBelow);
			set { baseweld.ContourBelow = Dynamic.Tekla.Structures.Model.BaseWeld.WeldContourEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldFinishEnum FinishBelow
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldFinishEnum_.FromTSObject(baseweld.FinishBelow);
			set { baseweld.FinishBelow = Dynamic.Tekla.Structures.Model.BaseWeld.WeldFinishEnum_.FromTSObject(value); }
		}

		public System.Double PitchBelow
		{
			get => baseweld.PitchBelow;
			set { baseweld.PitchBelow = value; }
		}

		public System.Boolean ShopWeld
		{
			get => baseweld.ShopWeld;
			set { baseweld.ShopWeld = value; }
		}

		public System.Boolean AroundWeld
		{
			get => baseweld.AroundWeld;
			set { baseweld.AroundWeld = value; }
		}

		public System.Boolean StitchWeld
		{
			get => baseweld.StitchWeld;
			set { baseweld.StitchWeld = value; }
		}

		public System.Double RootOpeningAbove
		{
			get => baseweld.RootOpeningAbove;
			set { baseweld.RootOpeningAbove = value; }
		}

		public System.Double RootFaceAbove
		{
			get => baseweld.RootFaceAbove;
			set { baseweld.RootFaceAbove = value; }
		}

		public System.Double EffectiveThroatAbove
		{
			get => baseweld.EffectiveThroatAbove;
			set { baseweld.EffectiveThroatAbove = value; }
		}

		public System.Int32 IncrementAmountAbove
		{
			get => baseweld.IncrementAmountAbove;
			set { baseweld.IncrementAmountAbove = value; }
		}

		public System.Double RootOpeningBelow
		{
			get => baseweld.RootOpeningBelow;
			set { baseweld.RootOpeningBelow = value; }
		}

		public System.Double RootFaceBelow
		{
			get => baseweld.RootFaceBelow;
			set { baseweld.RootFaceBelow = value; }
		}

		public System.Double EffectiveThroatBelow
		{
			get => baseweld.EffectiveThroatBelow;
			set { baseweld.EffectiveThroatBelow = value; }
		}

		public System.Int32 IncrementAmountBelow
		{
			get => baseweld.IncrementAmountBelow;
			set { baseweld.IncrementAmountBelow = value; }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldElectrodeClassificationEnum ElectrodeClassification
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldElectrodeClassificationEnum_.FromTSObject(baseweld.ElectrodeClassification);
			set { baseweld.ElectrodeClassification = Dynamic.Tekla.Structures.Model.BaseWeld.WeldElectrodeClassificationEnum_.FromTSObject(value); }
		}

		public System.Double ElectrodeStrength
		{
			get => baseweld.ElectrodeStrength;
			set { baseweld.ElectrodeStrength = value; }
		}

		public System.Double ElectrodeCoefficient
		{
			get => baseweld.ElectrodeCoefficient;
			set { baseweld.ElectrodeCoefficient = value; }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldProcessTypeEnum ProcessType
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldProcessTypeEnum_.FromTSObject(baseweld.ProcessType);
			set { baseweld.ProcessType = Dynamic.Tekla.Structures.Model.BaseWeld.WeldProcessTypeEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldNDTInspectionEnum NDTInspection
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldNDTInspectionEnum_.FromTSObject(baseweld.NDTInspection);
			set { baseweld.NDTInspection = Dynamic.Tekla.Structures.Model.BaseWeld.WeldNDTInspectionEnum_.FromTSObject(value); }
		}

		public System.Boolean ConnectAssemblies
		{
			get => baseweld.ConnectAssemblies;
			set { baseweld.ConnectAssemblies = value; }
		}

		public System.String ReferenceText
		{
			get => baseweld.ReferenceText;
			set { baseweld.ReferenceText = value; }
		}

		public System.String PrefixAboveLine
		{
			get => baseweld.PrefixAboveLine;
			set { baseweld.PrefixAboveLine = value; }
		}

		public System.String PrefixBelowLine
		{
			get => baseweld.PrefixBelowLine;
			set { baseweld.PrefixBelowLine = value; }
		}

		public System.String Standard
		{
			get => baseweld.Standard;
			set { baseweld.Standard = value; }
		}

		public System.Int32 WeldNumber
		{
			get => baseweld.WeldNumber;
			set { baseweld.WeldNumber = value; }
		}

		public System.String WeldNumberPrefix
		{
			get => baseweld.WeldNumberPrefix;
			set { baseweld.WeldNumberPrefix = value; }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldIntermittentTypeEnum IntermittentType
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldIntermittentTypeEnum_.FromTSObject(baseweld.IntermittentType);
			set { baseweld.IntermittentType = Dynamic.Tekla.Structures.Model.BaseWeld.WeldIntermittentTypeEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldPlacementTypeEnum Placement
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldPlacementTypeEnum_.FromTSObject(baseweld.Placement);
			set { baseweld.Placement = Dynamic.Tekla.Structures.Model.BaseWeld.WeldPlacementTypeEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.BaseWeld.WeldPreparationTypeEnum Preparation
		{
			get => Dynamic.Tekla.Structures.Model.BaseWeld.WeldPreparationTypeEnum_.FromTSObject(baseweld.Preparation);
			set { baseweld.Preparation = Dynamic.Tekla.Structures.Model.BaseWeld.WeldPreparationTypeEnum_.FromTSObject(value); }
		}

		public System.DateTime ModificationTime
		{
			get => baseweld.ModificationTime;
			set { baseweld.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => baseweld.IsUpToDate;
			set { baseweld.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => new Dynamic.Tekla.Structures.Identifier(baseweld.Identifier);
			set { baseweld.Identifier = value.GetTSObject(); }
		}

        

        dynamic baseweld;
        
        private BaseWeld()
        {
            this.baseweld =  TSActivator.CreateInstance("Tekla.Structures.Model.BaseWeld");
        }

        public BaseWeld(dynamic tsObject)
        {
            this.baseweld = tsObject;
        }

        internal dynamic GetTSObject() => baseweld;

		public System.Collections.ArrayList GetWeldGeometries()
			 => baseweld.GetWeldGeometries();

		public Dynamic.Tekla.Structures.Model.Solid GetSolid()
			 => new Dynamic.Tekla.Structures.Model.Solid(baseweld.GetSolid());

		public System.Boolean Insert()
			 => baseweld.Insert();

		public System.Boolean Select()
			 => baseweld.Select();

		public System.Boolean Modify()
			 => baseweld.Modify();

		public System.Boolean Delete()
			 => baseweld.Delete();

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(baseweld.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => new Dynamic.Tekla.Structures.Model.BaseComponent(baseweld.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(baseweld.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(System.Collections.Hashtable values)
			 => baseweld.GetAllUserProperties(values);

		public System.Boolean GetIntegerUserProperties(System.Collections.Hashtable values)
			 => baseweld.GetIntegerUserProperties(values);

		public System.Boolean GetDoubleUserProperties(System.Collections.Hashtable values)
			 => baseweld.GetDoubleUserProperties(values);

		public System.Boolean GetStringUserProperties(System.Collections.Hashtable values)
			 => baseweld.GetStringUserProperties(values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, System.Collections.Hashtable values)
			 => baseweld.GetAllReportProperties(stringNames, doubleNames, integerNames, values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => baseweld.GetIntegerReportProperties(names, values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => baseweld.GetDoubleReportProperties(names, values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => baseweld.GetStringReportProperties(names, values);

		public System.Boolean GetUserProperty(System.String name, System.String value)
			 => baseweld.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.String value)
			 => baseweld.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Double value)
			 => baseweld.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Double value)
			 => baseweld.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Int32 value)
			 => baseweld.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Int32 value)
			 => baseweld.GetReportProperty(name, value);

		public System.Boolean GetDynamicStringProperty(System.String name, System.String value)
			 => baseweld.GetDynamicStringProperty(name, value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => baseweld.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => baseweld.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => baseweld.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => baseweld.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(baseweld.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => baseweld.SetPhase(phase.GetTSObject());

		public System.Boolean GetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => baseweld.GetPhase(phase.GetTSObject());

		public System.Boolean SetLabel(System.String label)
			 => baseweld.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => baseweld.CompareTo(obj);




    public struct WeldTypeEnum
    {
       
    }

    internal static class WeldTypeEnum_
    {
        public static dynamic GetTSObject(WeldTypeEnum dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.WeldTypeEnum");

            return tsType;
        }
    
        public static WeldTypeEnum FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new WeldTypeEnum();
 
            return dynStruct;
        }
    }


    public struct WeldContourEnum
    {
       
    }

    internal static class WeldContourEnum_
    {
        public static dynamic GetTSObject(WeldContourEnum dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.WeldContourEnum");

            return tsType;
        }
    
        public static WeldContourEnum FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new WeldContourEnum();
 
            return dynStruct;
        }
    }


    public struct WeldFinishEnum
    {
       
    }

    internal static class WeldFinishEnum_
    {
        public static dynamic GetTSObject(WeldFinishEnum dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.WeldFinishEnum");

            return tsType;
        }
    
        public static WeldFinishEnum FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new WeldFinishEnum();
 
            return dynStruct;
        }
    }


    public struct WeldElectrodeClassificationEnum
    {
       
    }

    internal static class WeldElectrodeClassificationEnum_
    {
        public static dynamic GetTSObject(WeldElectrodeClassificationEnum dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.WeldElectrodeClassificationEnum");

            return tsType;
        }
    
        public static WeldElectrodeClassificationEnum FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new WeldElectrodeClassificationEnum();
 
            return dynStruct;
        }
    }


    public struct WeldProcessTypeEnum
    {
       
    }

    internal static class WeldProcessTypeEnum_
    {
        public static dynamic GetTSObject(WeldProcessTypeEnum dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.WeldProcessTypeEnum");

            return tsType;
        }
    
        public static WeldProcessTypeEnum FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new WeldProcessTypeEnum();
 
            return dynStruct;
        }
    }


    public struct WeldNDTInspectionEnum
    {
       
    }

    internal static class WeldNDTInspectionEnum_
    {
        public static dynamic GetTSObject(WeldNDTInspectionEnum dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.WeldNDTInspectionEnum");

            return tsType;
        }
    
        public static WeldNDTInspectionEnum FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new WeldNDTInspectionEnum();
 
            return dynStruct;
        }
    }


    public struct WeldIntermittentTypeEnum
    {
       
    }

    internal static class WeldIntermittentTypeEnum_
    {
        public static dynamic GetTSObject(WeldIntermittentTypeEnum dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.WeldIntermittentTypeEnum");

            return tsType;
        }
    
        public static WeldIntermittentTypeEnum FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new WeldIntermittentTypeEnum();
 
            return dynStruct;
        }
    }


    public struct WeldPlacementTypeEnum
    {
       
    }

    internal static class WeldPlacementTypeEnum_
    {
        public static dynamic GetTSObject(WeldPlacementTypeEnum dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.WeldPlacementTypeEnum");

            return tsType;
        }
    
        public static WeldPlacementTypeEnum FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new WeldPlacementTypeEnum();
 
            return dynStruct;
        }
    }


    public struct WeldPreparationTypeEnum
    {
       
    }

    internal static class WeldPreparationTypeEnum_
    {
        public static dynamic GetTSObject(WeldPreparationTypeEnum dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.WeldPreparationTypeEnum");

            return tsType;
        }
    
        public static WeldPreparationTypeEnum FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new WeldPreparationTypeEnum();
 
            return dynStruct;
        }
    }



    }

}
    
