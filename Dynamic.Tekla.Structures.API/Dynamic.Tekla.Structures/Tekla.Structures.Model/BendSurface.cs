//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class BendSurface 
    {

		public System.Boolean InwardCurved
		{
			get => bendsurface.InwardCurved;
			set { bendsurface.InwardCurved = value; }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Line IntersectionLine
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Line(bendsurface.IntersectionLine);
			set { bendsurface.IntersectionLine = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Vector EndFaceNormal1
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Vector(bendsurface.EndFaceNormal1);
			set { bendsurface.EndFaceNormal1 = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Vector EndFaceNormal2
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Vector(bendsurface.EndFaceNormal2);
			set { bendsurface.EndFaceNormal2 = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Line CenterLine
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Line(bendsurface.CenterLine);
			set { bendsurface.CenterLine = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Vector RotationAxis
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Vector(bendsurface.RotationAxis);
			set { bendsurface.RotationAxis = value.GetTSObject(); }
		}

		public System.Collections.Generic.List<Dynamic.Tekla.Structures.Geometry3d.Point> LateralBoundary1
		{
			get => bendsurface.LateralBoundary1;
			set { bendsurface.LateralBoundary1 = value; }
		}

		public System.Collections.Generic.List<Dynamic.Tekla.Structures.Geometry3d.Point> LateralBoundary2
		{
			get => bendsurface.LateralBoundary2;
			set { bendsurface.LateralBoundary2 = value; }
		}

		public Dynamic.Tekla.Structures.Geometry3d.LineSegment SideBoundary1
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.LineSegment(bendsurface.SideBoundary1);
			set { bendsurface.SideBoundary1 = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.LineSegment SideBoundary2
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.LineSegment(bendsurface.SideBoundary2);
			set { bendsurface.SideBoundary2 = value.GetTSObject(); }
		}

        

        dynamic bendsurface;
        
        public BendSurface()
        {
            this.bendsurface =  TSActivator.CreateInstance("Tekla.Structures.Model.BendSurface");
        }

        public BendSurface(dynamic tsObject)
        {
            this.bendsurface = tsObject;
			this.InwardCurved = bendsurface.InwardCurved;
			this.IntersectionLine = new Dynamic.Tekla.Structures.Geometry3d.Line(bendsurface.IntersectionLine);
			this.EndFaceNormal1 = new Dynamic.Tekla.Structures.Geometry3d.Vector(bendsurface.EndFaceNormal1);
			this.EndFaceNormal2 = new Dynamic.Tekla.Structures.Geometry3d.Vector(bendsurface.EndFaceNormal2);
			this.CenterLine = new Dynamic.Tekla.Structures.Geometry3d.Line(bendsurface.CenterLine);
			this.RotationAxis = new Dynamic.Tekla.Structures.Geometry3d.Vector(bendsurface.RotationAxis);
			this.LateralBoundary1 = bendsurface.LateralBoundary1;
			this.LateralBoundary2 = bendsurface.LateralBoundary2;
			this.SideBoundary1 = new Dynamic.Tekla.Structures.Geometry3d.LineSegment(bendsurface.SideBoundary1);
			this.SideBoundary2 = new Dynamic.Tekla.Structures.Geometry3d.LineSegment(bendsurface.SideBoundary2);

        }


        public dynamic GetTSObject() => bendsurface;





    }

}
    
