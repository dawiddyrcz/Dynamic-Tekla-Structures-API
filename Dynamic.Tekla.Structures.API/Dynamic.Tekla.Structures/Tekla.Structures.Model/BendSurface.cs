//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class BendSurface 
    {

		public System.Boolean InwardCurved
		{
			get => bendsurface.InwardCurved;
			set { bendsurface.InwardCurved = value; }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Line IntersectionLine
		{
			get => Dynamic.Tekla.Structures.Geometry3d.Line_.FromTSObject(bendsurface.IntersectionLine);
			set { bendsurface.IntersectionLine = Dynamic.Tekla.Structures.Geometry3d.Line_.GetTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Vector EndFaceNormal1
		{
			get => Dynamic.Tekla.Structures.Geometry3d.Vector_.FromTSObject(bendsurface.EndFaceNormal1);
			set { bendsurface.EndFaceNormal1 = Dynamic.Tekla.Structures.Geometry3d.Vector_.GetTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Vector EndFaceNormal2
		{
			get => Dynamic.Tekla.Structures.Geometry3d.Vector_.FromTSObject(bendsurface.EndFaceNormal2);
			set { bendsurface.EndFaceNormal2 = Dynamic.Tekla.Structures.Geometry3d.Vector_.GetTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Line CenterLine
		{
			get => Dynamic.Tekla.Structures.Geometry3d.Line_.FromTSObject(bendsurface.CenterLine);
			set { bendsurface.CenterLine = Dynamic.Tekla.Structures.Geometry3d.Line_.GetTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Vector RotationAxis
		{
			get => Dynamic.Tekla.Structures.Geometry3d.Vector_.FromTSObject(bendsurface.RotationAxis);
			set { bendsurface.RotationAxis = Dynamic.Tekla.Structures.Geometry3d.Vector_.GetTSObject(value); }
		}

		public System.Collections.Generic.List<Dynamic.Tekla.Structures.Geometry3d.Point> LateralBoundary1
		{
			get => bendsurface.LateralBoundary1;
			set { bendsurface.LateralBoundary1 = value; }
		}

		public System.Collections.Generic.List<Dynamic.Tekla.Structures.Geometry3d.Point> LateralBoundary2
		{
			get => bendsurface.LateralBoundary2;
			set { bendsurface.LateralBoundary2 = value; }
		}

		public Dynamic.Tekla.Structures.Geometry3d.LineSegment SideBoundary1
		{
			get => Dynamic.Tekla.Structures.Geometry3d.LineSegment_.FromTSObject(bendsurface.SideBoundary1);
			set { bendsurface.SideBoundary1 = Dynamic.Tekla.Structures.Geometry3d.LineSegment_.GetTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.LineSegment SideBoundary2
		{
			get => Dynamic.Tekla.Structures.Geometry3d.LineSegment_.FromTSObject(bendsurface.SideBoundary2);
			set { bendsurface.SideBoundary2 = Dynamic.Tekla.Structures.Geometry3d.LineSegment_.GetTSObject(value); }
		}

        

        internal dynamic bendsurface;
        
        private BendSurface()
        {
            this.bendsurface =  TSActivator.CreateInstance("Tekla.Structures.Model.BendSurface");
        }

        internal BendSurface(dynamic tsObject)
        {
            this.bendsurface = tsObject;
        }





    }

    internal static class BendSurface_
    {
        public static dynamic GetTSObject(BendSurface dynObject)
        {
            return dynObject.bendsurface;
        }

        public static BendSurface FromTSObject(dynamic tsObject)
        {
            return new BendSurface(tsObject);
        }
    }


}
    
