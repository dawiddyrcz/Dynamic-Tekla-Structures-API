//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class BentPlateGeometrySolver 
    {

        

        dynamic bentplategeometrysolver;
        
        public BentPlateGeometrySolver()
        {
            this.bentplategeometrysolver =  TSActivator.CreateInstance("Tekla.Structures.Model.BentPlateGeometrySolver");
        }

        public BentPlateGeometrySolver(dynamic tsObject)
        {
            this.bentplategeometrysolver = tsObject;
        }

        internal dynamic GetTSObject() => bentplategeometrysolver;

		public Dynamic.Tekla.Structures.Model.ConnectiveGeometry AddLeg(Dynamic.Tekla.Structures.Model.ConnectiveGeometry geometry, Dynamic.Tekla.Structures.Model.Contour polygon, Dynamic.Tekla.Structures.Model.BentPlate.BendShape bendShape)
			 => new Dynamic.Tekla.Structures.Model.ConnectiveGeometry(bentplategeometrysolver.AddLeg(geometry.GetTSObject(), polygon.GetTSObject(), bendShape.GetTSObject()));

		public Dynamic.Tekla.Structures.Model.ConnectiveGeometry AddLeg(Dynamic.Tekla.Structures.Model.ConnectiveGeometry geometry, Dynamic.Tekla.Structures.Model.Contour polygon)
			 => new Dynamic.Tekla.Structures.Model.ConnectiveGeometry(bentplategeometrysolver.AddLeg(geometry.GetTSObject(), polygon.GetTSObject()));

		public Dynamic.Tekla.Structures.Model.ConnectiveGeometry AddLeg(Dynamic.Tekla.Structures.Model.ConnectiveGeometry geometry, Dynamic.Tekla.Structures.Model.Contour polygon, System.Double radius)
			 => new Dynamic.Tekla.Structures.Model.ConnectiveGeometry(bentplategeometrysolver.AddLeg(geometry.GetTSObject(), polygon.GetTSObject(), radius));

		public Dynamic.Tekla.Structures.Model.ConnectiveGeometry AddLeg(Dynamic.Tekla.Structures.Model.ConnectiveGeometry geometry, Dynamic.Tekla.Structures.Model.Contour polygon, System.Double largestRadius, System.Double halfAperture)
			 => new Dynamic.Tekla.Structures.Model.ConnectiveGeometry(bentplategeometrysolver.AddLeg(geometry.GetTSObject(), polygon.GetTSObject(), largestRadius, halfAperture));

		public Dynamic.Tekla.Structures.Model.ConnectiveGeometry AddLeg(Dynamic.Tekla.Structures.Model.ConnectiveGeometry geometry, Dynamic.Tekla.Structures.Geometry3d.LineSegment segment1, Dynamic.Tekla.Structures.Model.Contour polygon, Dynamic.Tekla.Structures.Geometry3d.LineSegment segment2, Dynamic.Tekla.Structures.Model.BentPlate.BendShape bendShape)
			 => new Dynamic.Tekla.Structures.Model.ConnectiveGeometry(bentplategeometrysolver.AddLeg(geometry.GetTSObject(), segment1.GetTSObject(), polygon.GetTSObject(), segment2.GetTSObject(), bendShape.GetTSObject()));

		public Dynamic.Tekla.Structures.Model.ConnectiveGeometry AddLeg(Dynamic.Tekla.Structures.Model.ConnectiveGeometry geometry, Dynamic.Tekla.Structures.Geometry3d.LineSegment segment1, Dynamic.Tekla.Structures.Model.Contour polygon, Dynamic.Tekla.Structures.Geometry3d.LineSegment segment2)
			 => new Dynamic.Tekla.Structures.Model.ConnectiveGeometry(bentplategeometrysolver.AddLeg(geometry.GetTSObject(), segment1.GetTSObject(), polygon.GetTSObject(), segment2.GetTSObject()));

		public Dynamic.Tekla.Structures.Model.ConnectiveGeometry AddLeg(Dynamic.Tekla.Structures.Model.ConnectiveGeometry geometry, Dynamic.Tekla.Structures.Geometry3d.LineSegment segment1, Dynamic.Tekla.Structures.Model.Contour polygon, Dynamic.Tekla.Structures.Geometry3d.LineSegment segment2, System.Double radius)
			 => new Dynamic.Tekla.Structures.Model.ConnectiveGeometry(bentplategeometrysolver.AddLeg(geometry.GetTSObject(), segment1.GetTSObject(), polygon.GetTSObject(), segment2.GetTSObject(), radius));

		public Dynamic.Tekla.Structures.Model.ConnectiveGeometry AddLeg(Dynamic.Tekla.Structures.Model.ConnectiveGeometry geometry, Dynamic.Tekla.Structures.Geometry3d.LineSegment segment1, Dynamic.Tekla.Structures.Model.Contour polygon, Dynamic.Tekla.Structures.Geometry3d.LineSegment segment2, System.Double largestRadius, System.Double halfAperture)
			 => new Dynamic.Tekla.Structures.Model.ConnectiveGeometry(bentplategeometrysolver.AddLeg(geometry.GetTSObject(), segment1.GetTSObject(), polygon.GetTSObject(), segment2.GetTSObject(), largestRadius, halfAperture));

		public Dynamic.Tekla.Structures.Model.ConnectiveGeometry RemoveLeg(Dynamic.Tekla.Structures.Model.ConnectiveGeometry geometry, Dynamic.Tekla.Structures.Model.GeometrySection legSection)
			 => new Dynamic.Tekla.Structures.Model.ConnectiveGeometry(bentplategeometrysolver.RemoveLeg(geometry.GetTSObject(), legSection.GetTSObject()));

		public Dynamic.Tekla.Structures.Model.ConnectiveGeometry ModifyBendSurface(Dynamic.Tekla.Structures.Model.ConnectiveGeometry geometry, Dynamic.Tekla.Structures.Model.GeometrySection bendSection, Dynamic.Tekla.Structures.Model.BendSurface surface)
			 => new Dynamic.Tekla.Structures.Model.ConnectiveGeometry(bentplategeometrysolver.ModifyBendSurface(geometry.GetTSObject(), bendSection.GetTSObject(), surface.GetTSObject()));

		public Dynamic.Tekla.Structures.Model.ConnectiveGeometry ModifyCylindricalSurface(Dynamic.Tekla.Structures.Model.ConnectiveGeometry geometry, Dynamic.Tekla.Structures.Model.GeometrySection cylindricalSection, Dynamic.Tekla.Structures.Model.CylindricalSurface surface)
			 => new Dynamic.Tekla.Structures.Model.ConnectiveGeometry(bentplategeometrysolver.ModifyCylindricalSurface(geometry.GetTSObject(), cylindricalSection.GetTSObject(), surface.GetTSObject()));

		public Dynamic.Tekla.Structures.Model.ConnectiveGeometry ModifyRadius(Dynamic.Tekla.Structures.Model.ConnectiveGeometry geometry, Dynamic.Tekla.Structures.Model.GeometrySection cylindricalSection, System.Double radius)
			 => new Dynamic.Tekla.Structures.Model.ConnectiveGeometry(bentplategeometrysolver.ModifyRadius(geometry.GetTSObject(), cylindricalSection.GetTSObject(), radius));

		public Dynamic.Tekla.Structures.Model.ConnectiveGeometry ModifyConicalRadiuses(Dynamic.Tekla.Structures.Model.ConnectiveGeometry geometry, Dynamic.Tekla.Structures.Model.GeometrySection conicalSection, System.Double radius1, System.Double radius2)
			 => new Dynamic.Tekla.Structures.Model.ConnectiveGeometry(bentplategeometrysolver.ModifyConicalRadiuses(geometry.GetTSObject(), conicalSection.GetTSObject(), radius1, radius2));

		public Dynamic.Tekla.Structures.Model.ConnectiveGeometry ScaleConeSection(Dynamic.Tekla.Structures.Model.ConnectiveGeometry geometry, Dynamic.Tekla.Structures.Model.GeometrySection conicalSection, System.Double scale)
			 => new Dynamic.Tekla.Structures.Model.ConnectiveGeometry(bentplategeometrysolver.ScaleConeSection(geometry.GetTSObject(), conicalSection.GetTSObject(), scale));

		public Dynamic.Tekla.Structures.Model.ConnectiveGeometry ModifyPolygon(Dynamic.Tekla.Structures.Model.ConnectiveGeometry geometry, Dynamic.Tekla.Structures.Model.GeometrySection polygonSection, Dynamic.Tekla.Structures.Model.Contour points)
			 => new Dynamic.Tekla.Structures.Model.ConnectiveGeometry(bentplategeometrysolver.ModifyPolygon(geometry.GetTSObject(), polygonSection.GetTSObject(), points.GetTSObject()));

		public Dynamic.Tekla.Structures.Model.ConnectiveGeometry SetMainSection(Dynamic.Tekla.Structures.Model.GeometrySection newMainSection, Dynamic.Tekla.Structures.Model.ConnectiveGeometry geometry)
			 => new Dynamic.Tekla.Structures.Model.ConnectiveGeometry(bentplategeometrysolver.SetMainSection(newMainSection.GetTSObject(), geometry.GetTSObject()));

		public Dynamic.Tekla.Structures.Model.ConnectiveGeometry SetBendAngle(System.Double angle, Dynamic.Tekla.Structures.Model.GeometrySection sectionToSetAngle, Dynamic.Tekla.Structures.Model.GeometrySection sectionToMove, Dynamic.Tekla.Structures.Model.ConnectiveGeometry geometry)
			 => new Dynamic.Tekla.Structures.Model.ConnectiveGeometry(bentplategeometrysolver.SetBendAngle(angle, sectionToSetAngle.GetTSObject(), sectionToMove.GetTSObject(), geometry.GetTSObject()));




    public struct OperationStatus
    {
       
    }

    internal static class OperationStatus_
    {
        public static dynamic GetTSObject(OperationStatus dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.OperationStatus");

            return tsType;
        }
    
        public static OperationStatus FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new OperationStatus();
 
            return dynStruct;
        }
    }



    }

}
    
