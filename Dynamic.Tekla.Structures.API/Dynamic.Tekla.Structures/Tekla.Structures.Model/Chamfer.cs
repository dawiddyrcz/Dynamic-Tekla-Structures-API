//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class Chamfer 
    {

		public Dynamic.Tekla.Structures.Model.Chamfer.ChamferTypeEnum Type
		{
			get => Dynamic.Tekla.Structures.Model.Chamfer.ChamferTypeEnum_.FromTSObject(chamfer.Type);
			set { chamfer.Type = Dynamic.Tekla.Structures.Model.Chamfer.ChamferTypeEnum_.GetTSObject(value); }
		}

		public System.Double X
		{
			get => chamfer.X;
			set { chamfer.X = value; }
		}

		public System.Double Y
		{
			get => chamfer.Y;
			set { chamfer.Y = value; }
		}

		public System.Double DZ1
		{
			get => chamfer.DZ1;
			set { chamfer.DZ1 = value; }
		}

		public System.Double DZ2
		{
			get => chamfer.DZ2;
			set { chamfer.DZ2 = value; }
		}

        

        internal dynamic chamfer;
        
        public Chamfer()
        {
            this.chamfer =  TSActivator.CreateInstance("Tekla.Structures.Model.Chamfer");
        }

        internal Chamfer(dynamic tsObject)
        {
            this.chamfer = tsObject;
        }




    public enum ChamferTypeEnum
    {
			CHAMFER_NONE,
			CHAMFER_LINE,
			CHAMFER_ROUNDING,
			CHAMFER_ARC,
			CHAMFER_ARC_POINT,
			CHAMFER_SQUARE,
			CHAMFER_SQUARE_PARALLEL,
			CHAMFER_LINE_AND_ARC        
    }

    internal static class ChamferTypeEnum_
    {
        public static dynamic GetTSObject(ChamferTypeEnum dynEnum)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.Chamfer.ChamferTypeEnum").GetType();

            switch (dynEnum)
            {
				case ChamferTypeEnum.CHAMFER_NONE:
					return System.Enum.Parse(tsType, "CHAMFER_NONE");
				case ChamferTypeEnum.CHAMFER_LINE:
					return System.Enum.Parse(tsType, "CHAMFER_LINE");
				case ChamferTypeEnum.CHAMFER_ROUNDING:
					return System.Enum.Parse(tsType, "CHAMFER_ROUNDING");
				case ChamferTypeEnum.CHAMFER_ARC:
					return System.Enum.Parse(tsType, "CHAMFER_ARC");
				case ChamferTypeEnum.CHAMFER_ARC_POINT:
					return System.Enum.Parse(tsType, "CHAMFER_ARC_POINT");
				case ChamferTypeEnum.CHAMFER_SQUARE:
					return System.Enum.Parse(tsType, "CHAMFER_SQUARE");
				case ChamferTypeEnum.CHAMFER_SQUARE_PARALLEL:
					return System.Enum.Parse(tsType, "CHAMFER_SQUARE_PARALLEL");
				case ChamferTypeEnum.CHAMFER_LINE_AND_ARC:
					return System.Enum.Parse(tsType, "CHAMFER_LINE_AND_ARC");

                default:
                    throw new System.NotImplementedException(dynEnum.ToString() + "- enum value is not implemented");
            }
        }
    
        public static ChamferTypeEnum FromTSObject(dynamic tsEnum)
        {
            string tsEnumValue = tsEnum.ToString("G", System.Globalization.CultureInfo.InvariantCulture);
            
			if (tsEnumValue.Equals("CHAMFER_NONE", System.StringComparison.InvariantCulture))
				return ChamferTypeEnum.CHAMFER_NONE;
			else if (tsEnumValue.Equals("CHAMFER_LINE", System.StringComparison.InvariantCulture))
				return ChamferTypeEnum.CHAMFER_LINE;
			else if (tsEnumValue.Equals("CHAMFER_ROUNDING", System.StringComparison.InvariantCulture))
				return ChamferTypeEnum.CHAMFER_ROUNDING;
			else if (tsEnumValue.Equals("CHAMFER_ARC", System.StringComparison.InvariantCulture))
				return ChamferTypeEnum.CHAMFER_ARC;
			else if (tsEnumValue.Equals("CHAMFER_ARC_POINT", System.StringComparison.InvariantCulture))
				return ChamferTypeEnum.CHAMFER_ARC_POINT;
			else if (tsEnumValue.Equals("CHAMFER_SQUARE", System.StringComparison.InvariantCulture))
				return ChamferTypeEnum.CHAMFER_SQUARE;
			else if (tsEnumValue.Equals("CHAMFER_SQUARE_PARALLEL", System.StringComparison.InvariantCulture))
				return ChamferTypeEnum.CHAMFER_SQUARE_PARALLEL;
			else if (tsEnumValue.Equals("CHAMFER_LINE_AND_ARC", System.StringComparison.InvariantCulture))
				return ChamferTypeEnum.CHAMFER_LINE_AND_ARC;

            else 
                throw new System.NotImplementedException(tsEnumValue + "- enum value is not implemented");
            
        }
    }



    }

    internal static class Chamfer_
    {
        public static dynamic GetTSObject(Chamfer dynObject)
        {
            return dynObject.chamfer;
        }

        public static Chamfer FromTSObject(dynamic tsObject)
        {
            return new Chamfer(tsObject);
        }
    }


}
    
