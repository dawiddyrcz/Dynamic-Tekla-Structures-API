//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public  class ChangeData 
    {

		public Dynamic.Tekla.Structures.Model.ModelObject Object
		{
			get => Dynamic.Tekla.Structures.Model.ModelObject_.FromTSObject(teklaObject.Object);
			set { teklaObject.Object = Dynamic.Tekla.Structures.Model.ModelObject_.GetTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.ChangeData.ChangeTypeEnum Type
		{
			get => Dynamic.Tekla.Structures.Model.ChangeData.ChangeTypeEnum_.FromTSObject(teklaObject.Type);
			set { teklaObject.Type = Dynamic.Tekla.Structures.Model.ChangeData.ChangeTypeEnum_.GetTSObject(value); }
		}

        

        internal dynamic teklaObject;

		public ChangeData() {}




    public enum ChangeTypeEnum
    {
			OBJECT_INSERT,
			OBJECT_MODIFY,
			OBJECT_DELETE,
			USERPROPERTY_CHANGED        
    }

    internal static class ChangeTypeEnum_
    {
        public static dynamic GetTSObject(ChangeTypeEnum dynEnum)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.ChangeData.ChangeTypeEnum").GetType();

            switch (dynEnum)
            {
				case ChangeTypeEnum.OBJECT_INSERT:
					return System.Enum.Parse(tsType, "OBJECT_INSERT");
				case ChangeTypeEnum.OBJECT_MODIFY:
					return System.Enum.Parse(tsType, "OBJECT_MODIFY");
				case ChangeTypeEnum.OBJECT_DELETE:
					return System.Enum.Parse(tsType, "OBJECT_DELETE");
				case ChangeTypeEnum.USERPROPERTY_CHANGED:
					return System.Enum.Parse(tsType, "USERPROPERTY_CHANGED");

                default:
                    throw new System.NotImplementedException(dynEnum.ToString() + "- enum value is not implemented");
            }
        }
    
        public static ChangeTypeEnum FromTSObject(dynamic tsEnum)
        {
            string tsEnumValue = tsEnum.ToString("G", System.Globalization.CultureInfo.InvariantCulture);
            
			if (tsEnumValue.Equals("OBJECT_INSERT", System.StringComparison.InvariantCulture))
				return ChangeTypeEnum.OBJECT_INSERT;
			else if (tsEnumValue.Equals("OBJECT_MODIFY", System.StringComparison.InvariantCulture))
				return ChangeTypeEnum.OBJECT_MODIFY;
			else if (tsEnumValue.Equals("OBJECT_DELETE", System.StringComparison.InvariantCulture))
				return ChangeTypeEnum.OBJECT_DELETE;
			else if (tsEnumValue.Equals("USERPROPERTY_CHANGED", System.StringComparison.InvariantCulture))
				return ChangeTypeEnum.USERPROPERTY_CHANGED;

            else 
                throw new System.NotImplementedException(tsEnumValue + "- enum value is not implemented");
            
        }
    }



    }

    internal static class ChangeData_
    {
        public static dynamic GetTSObject(ChangeData dynObject)
        {
            return dynObject.teklaObject;
        }

        public static ChangeData FromTSObject(dynamic tsObject)
        {
            var typeName = "Dynamic." + tsObject.GetType().FullName;
            var type = System.Reflection.Assembly.GetExecutingAssembly().GetType(typeName);
            var dynObject = (Tekla.Structures.Model.ChangeData)System.Activator.CreateInstance(type);
            dynObject.teklaObject = tsObject;
            return dynObject;
        }
    }


}
    
