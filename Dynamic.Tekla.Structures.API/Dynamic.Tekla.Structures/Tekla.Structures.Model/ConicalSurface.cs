//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class ConicalSurface 
    {

		public System.Tuple<System.Double, System.Double> Radiuses
		{
			get => conicalsurface.Radiuses;
			set { conicalsurface.Radiuses = value; }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Point Apex
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Point(conicalsurface.Apex);
			set { conicalsurface.Apex = value.GetTSObject(); }
		}

		public System.Boolean InwardCurved
		{
			get => conicalsurface.InwardCurved;
			set { conicalsurface.InwardCurved = value; }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Line IntersectionLine
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Line(conicalsurface.IntersectionLine);
			set { conicalsurface.IntersectionLine = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Vector EndFaceNormal1
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Vector(conicalsurface.EndFaceNormal1);
			set { conicalsurface.EndFaceNormal1 = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Vector EndFaceNormal2
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Vector(conicalsurface.EndFaceNormal2);
			set { conicalsurface.EndFaceNormal2 = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Line CenterLine
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Line(conicalsurface.CenterLine);
			set { conicalsurface.CenterLine = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Vector RotationAxis
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Vector(conicalsurface.RotationAxis);
			set { conicalsurface.RotationAxis = value.GetTSObject(); }
		}

		public System.Collections.Generic.List<Dynamic.Tekla.Structures.Geometry3d.Point> LateralBoundary1
		{
			get => conicalsurface.LateralBoundary1;
			set { conicalsurface.LateralBoundary1 = value; }
		}

		public System.Collections.Generic.List<Dynamic.Tekla.Structures.Geometry3d.Point> LateralBoundary2
		{
			get => conicalsurface.LateralBoundary2;
			set { conicalsurface.LateralBoundary2 = value; }
		}

		public Dynamic.Tekla.Structures.Geometry3d.LineSegment SideBoundary1
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.LineSegment(conicalsurface.SideBoundary1);
			set { conicalsurface.SideBoundary1 = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.LineSegment SideBoundary2
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.LineSegment(conicalsurface.SideBoundary2);
			set { conicalsurface.SideBoundary2 = value.GetTSObject(); }
		}

        

        dynamic conicalsurface;
        
        public ConicalSurface()
        {
            this.conicalsurface =  TSActivator.CreateInstance("Tekla.Structures.Model.ConicalSurface");
        }

        public ConicalSurface(dynamic tsObject)
        {
            this.conicalsurface = tsObject;
        }

        internal dynamic GetTSObject() => conicalsurface;





    }

}
    
