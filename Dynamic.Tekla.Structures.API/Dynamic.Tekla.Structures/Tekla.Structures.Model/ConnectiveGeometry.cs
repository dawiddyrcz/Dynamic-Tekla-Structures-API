//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public  class ConnectiveGeometry 
    {

        

        internal dynamic teklaObject;

		internal ConnectiveGeometry() {}
		public ConnectiveGeometry(Dynamic.Tekla.Structures.Model.Contour contour)
		{
			var args = new object[1];
			args[0] = Dynamic.Tekla.Structures.Model.Contour_.GetTSObject(contour);
			this.teklaObject = TSActivator.CreateInstance("Tekla.Structures.Model.ConnectiveGeometry", args);
		}
		public ConnectiveGeometry(Dynamic.Tekla.Structures.Model.BendSurface bendSurface)
		{
			var args = new object[1];
			args[0] = Dynamic.Tekla.Structures.Model.BendSurface_.GetTSObject(bendSurface);
			this.teklaObject = TSActivator.CreateInstance("Tekla.Structures.Model.ConnectiveGeometry", args);
		}

		public System.Boolean IsEmpty()
			 => teklaObject.IsEmpty();

		public Dynamic.Tekla.Structures.Model.GeometrySectionEnumerator GetGeometryEnumerator()
			 => Dynamic.Tekla.Structures.Model.GeometrySectionEnumerator_.FromTSObject(teklaObject.GetGeometryEnumerator());





    }

    internal static class ConnectiveGeometry_
    {
        public static dynamic GetTSObject(ConnectiveGeometry dynObject)
        {
            return dynObject.teklaObject;
        }

        public static ConnectiveGeometry FromTSObject(dynamic tsObject)
        {
            return new ConnectiveGeometry() { teklaObject = tsObject };
        }
    }


}
    
