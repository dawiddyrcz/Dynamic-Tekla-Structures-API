//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class ConnectiveGeometryException 
    {

		public System.String Message
		{
			get => connectivegeometryexception.Message;
			set { connectivegeometryexception.Message = value; }
		}

		public System.Collections.IDictionary Data
		{
			get => connectivegeometryexception.Data;
			set { connectivegeometryexception.Data = value; }
		}

		public System.Exception InnerException
		{
			get => connectivegeometryexception.InnerException;
			set { connectivegeometryexception.InnerException = value; }
		}

		public System.Reflection.MethodBase TargetSite
		{
			get => connectivegeometryexception.TargetSite;
			set { connectivegeometryexception.TargetSite = value; }
		}

		public System.String StackTrace
		{
			get => connectivegeometryexception.StackTrace;
			set { connectivegeometryexception.StackTrace = value; }
		}

		public System.String HelpLink
		{
			get => connectivegeometryexception.HelpLink;
			set { connectivegeometryexception.HelpLink = value; }
		}

		public System.String Source
		{
			get => connectivegeometryexception.Source;
			set { connectivegeometryexception.Source = value; }
		}

		public System.Int32 HResult
		{
			get => connectivegeometryexception.HResult;
			set { connectivegeometryexception.HResult = value; }
		}

		public Dynamic.Tekla.Structures.Model.BentPlateGeometrySolver.OperationStatus OperationStatus
		{
			get => Dynamic.Tekla.Structures.Model.BentPlateGeometrySolver.OperationStatus_.FromTSObject(connectivegeometryexception.OperationStatus);
			set { connectivegeometryexception.OperationStatus = Dynamic.Tekla.Structures.Model.BentPlateGeometrySolver.OperationStatus_.GetTSObject(value); }
		}

        

        internal dynamic connectivegeometryexception;
        
        public ConnectiveGeometryException()
        {
            this.connectivegeometryexception =  TSActivator.CreateInstance("Tekla.Structures.Model.ConnectiveGeometryException");
        }

        internal ConnectiveGeometryException(dynamic tsObject)
        {
            this.connectivegeometryexception = tsObject;
        }
		public ConnectiveGeometryException(Dynamic.Tekla.Structures.Model.BentPlateGeometrySolver.OperationStatus status, System.String errorMessage)
		{
			var args = new object[2];
			args[0] = Dynamic.Tekla.Structures.Model.BentPlateGeometrySolver.OperationStatus_.GetTSObject(status);
			args[1] = errorMessage;
			this.connectivegeometryexception = TSActivator.CreateInstance("Tekla.Structures.Model.ConnectiveGeometryException", args);
		}

		public System.Exception GetBaseException()
			 => connectivegeometryexception.GetBaseException();

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => connectivegeometryexception.GetObjectData(info, context);





    }

    internal static class ConnectiveGeometryException_
    {
        public static dynamic GetTSObject(ConnectiveGeometryException dynObject)
        {
            return dynObject.connectivegeometryexception;
        }

        public static ConnectiveGeometryException FromTSObject(dynamic tsObject)
        {
            return new ConnectiveGeometryException(tsObject);
        }
    }


}
    
