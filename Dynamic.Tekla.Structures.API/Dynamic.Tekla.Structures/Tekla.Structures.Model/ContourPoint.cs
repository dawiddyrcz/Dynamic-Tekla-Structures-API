//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class ContourPoint 
    {

		public Dynamic.Tekla.Structures.Model.Chamfer Chamfer
		{
			get => Dynamic.Tekla.Structures.Model.Chamfer_.FromTSObject(contourpoint.Chamfer);
			set { contourpoint.Chamfer = Dynamic.Tekla.Structures.Model.Chamfer_.GetTSObject(value); }
		}

        

        internal dynamic contourpoint;
        
        public ContourPoint()
        {
            this.contourpoint =  TSActivator.CreateInstance("Tekla.Structures.Model.ContourPoint");
        }

        internal ContourPoint(dynamic tsObject)
        {
            this.contourpoint = tsObject;
        }

		public void SetPoint(Dynamic.Tekla.Structures.Geometry3d.Point P)
			 => contourpoint.SetPoint(Dynamic.Tekla.Structures.Geometry3d.Point_.GetTSObject(P));

		public void Zero()
			 => contourpoint.Zero();

		public void Translate(System.Double X, System.Double Y, System.Double Z)
			 => contourpoint.Translate(X, Y, Z);

		public System.Int32 CompareTo(System.Object obj)
			 => contourpoint.CompareTo(obj);





    }

    internal static class ContourPoint_
    {
        public static dynamic GetTSObject(ContourPoint dynObject)
        {
            return dynObject.contourpoint;
        }

        public static ContourPoint FromTSObject(dynamic tsObject)
        {
            return new ContourPoint(tsObject);
        }
    }


}
    
