//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class ControlCircle 
    {

		public System.Double Extension
		{
			get => controlcircle.Extension;
			set { controlcircle.Extension = value; }
		}

		public Dynamic.Tekla.Structures.Model.ControlCircle.ControlCircleColorEnum Color
		{
			get => Dynamic.Tekla.Structures.Model.ControlCircle.ControlCircleColorEnum_.FromTSObject(controlcircle.Color);
			set { controlcircle.Color = Dynamic.Tekla.Structures.Model.ControlCircle.ControlCircleColorEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.ControlObjectLineType LineType
		{
			get => Dynamic.Tekla.Structures.Model.ControlObjectLineType_.FromTSObject(controlcircle.LineType);
			set { controlcircle.LineType = Dynamic.Tekla.Structures.Model.ControlObjectLineType_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Point Point1
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Point(controlcircle.Point1);
			set { controlcircle.Point1 = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Point Point2
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Point(controlcircle.Point2);
			set { controlcircle.Point2 = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Point Point3
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Point(controlcircle.Point3);
			set { controlcircle.Point3 = value.GetTSObject(); }
		}

		public System.DateTime ModificationTime
		{
			get => controlcircle.ModificationTime;
			set { controlcircle.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => controlcircle.IsUpToDate;
			set { controlcircle.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => new Dynamic.Tekla.Structures.Identifier(controlcircle.Identifier);
			set { controlcircle.Identifier = value.GetTSObject(); }
		}

        

        dynamic controlcircle;
        
        public ControlCircle()
        {
            this.controlcircle =  TSActivator.CreateInstance("Tekla.Structures.Model.ControlCircle");
        }

        public ControlCircle(dynamic tsObject)
        {
            this.controlcircle = tsObject;
        }

        internal dynamic GetTSObject() => controlcircle;

		public System.Boolean Insert()
			 => controlcircle.Insert();

		public System.Boolean Select()
			 => controlcircle.Select();

		public System.Boolean Modify()
			 => controlcircle.Modify();

		public System.Boolean Delete()
			 => controlcircle.Delete();

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(controlcircle.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => new Dynamic.Tekla.Structures.Model.BaseComponent(controlcircle.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(controlcircle.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(System.Collections.Hashtable values)
			 => controlcircle.GetAllUserProperties(values);

		public System.Boolean GetIntegerUserProperties(System.Collections.Hashtable values)
			 => controlcircle.GetIntegerUserProperties(values);

		public System.Boolean GetDoubleUserProperties(System.Collections.Hashtable values)
			 => controlcircle.GetDoubleUserProperties(values);

		public System.Boolean GetStringUserProperties(System.Collections.Hashtable values)
			 => controlcircle.GetStringUserProperties(values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, System.Collections.Hashtable values)
			 => controlcircle.GetAllReportProperties(stringNames, doubleNames, integerNames, values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => controlcircle.GetIntegerReportProperties(names, values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => controlcircle.GetDoubleReportProperties(names, values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => controlcircle.GetStringReportProperties(names, values);

		public System.Boolean GetUserProperty(System.String name, System.String value)
			 => controlcircle.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.String value)
			 => controlcircle.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Double value)
			 => controlcircle.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Double value)
			 => controlcircle.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Int32 value)
			 => controlcircle.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Int32 value)
			 => controlcircle.GetReportProperty(name, value);

		public System.Boolean GetDynamicStringProperty(System.String name, System.String value)
			 => controlcircle.GetDynamicStringProperty(name, value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => controlcircle.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => controlcircle.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => controlcircle.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => controlcircle.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(controlcircle.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => controlcircle.SetPhase(phase.GetTSObject());

		public System.Boolean GetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => controlcircle.GetPhase(phase.GetTSObject());

		public System.Boolean SetLabel(System.String label)
			 => controlcircle.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => controlcircle.CompareTo(obj);




    public struct ControlCircleColorEnum
    {
       
    }

    internal static class ControlCircleColorEnum_
    {
        public static dynamic GetTSObject(ControlCircleColorEnum dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.ControlCircleColorEnum");

            return tsType;
        }
    
        public static ControlCircleColorEnum FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new ControlCircleColorEnum();
 
            return dynStruct;
        }
    }



    }

}
    
