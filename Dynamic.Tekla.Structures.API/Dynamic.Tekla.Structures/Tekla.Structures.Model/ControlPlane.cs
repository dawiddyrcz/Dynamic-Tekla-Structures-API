//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class ControlPlane 
    {

		public Dynamic.Tekla.Structures.Model.Plane Plane
		{
			get => new Dynamic.Tekla.Structures.Model.Plane(controlplane.Plane);
			set { controlplane.Plane = value.GetTSObject(); }
		}

		public System.Boolean IsMagnetic
		{
			get => controlplane.IsMagnetic;
			set { controlplane.IsMagnetic = value; }
		}

		public System.String Name
		{
			get => controlplane.Name;
			set { controlplane.Name = value; }
		}

		public System.DateTime ModificationTime
		{
			get => controlplane.ModificationTime;
			set { controlplane.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => controlplane.IsUpToDate;
			set { controlplane.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => new Dynamic.Tekla.Structures.Identifier(controlplane.Identifier);
			set { controlplane.Identifier = value.GetTSObject(); }
		}

        

        dynamic controlplane;
        
        public ControlPlane()
        {
            this.controlplane =  TSActivator.CreateInstance("Tekla.Structures.Model.ControlPlane");
        }

        public ControlPlane(dynamic tsObject)
        {
            this.controlplane = tsObject;
			this.Plane = new Dynamic.Tekla.Structures.Model.Plane(controlplane.Plane);
			this.IsMagnetic = controlplane.IsMagnetic;
			this.Name = controlplane.Name;
			this.ModificationTime = controlplane.ModificationTime;
			this.IsUpToDate = controlplane.IsUpToDate;
			this.Identifier = new Dynamic.Tekla.Structures.Identifier(controlplane.Identifier);

        }


        public dynamic GetTSObject() => controlplane;

		public System.Boolean Insert()
			 => controlplane.Insert();

		public System.Boolean Select()
			 => controlplane.Select();

		public System.Boolean Modify()
			 => controlplane.Modify();

		public System.Boolean Delete()
			 => controlplane.Delete();

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(controlplane.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => new Dynamic.Tekla.Structures.Model.BaseComponent(controlplane.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(controlplane.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(System.Collections.Hashtable values)
			 => controlplane.GetAllUserProperties(values);

		public System.Boolean GetIntegerUserProperties(System.Collections.Hashtable values)
			 => controlplane.GetIntegerUserProperties(values);

		public System.Boolean GetDoubleUserProperties(System.Collections.Hashtable values)
			 => controlplane.GetDoubleUserProperties(values);

		public System.Boolean GetStringUserProperties(System.Collections.Hashtable values)
			 => controlplane.GetStringUserProperties(values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, System.Collections.Hashtable values)
			 => controlplane.GetAllReportProperties(stringNames, doubleNames, integerNames, values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => controlplane.GetIntegerReportProperties(names, values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => controlplane.GetDoubleReportProperties(names, values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => controlplane.GetStringReportProperties(names, values);

		public System.Boolean GetUserProperty(System.String name, System.String value)
			 => controlplane.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.String value)
			 => controlplane.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Double value)
			 => controlplane.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Double value)
			 => controlplane.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Int32 value)
			 => controlplane.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Int32 value)
			 => controlplane.GetReportProperty(name, value);

		public System.Boolean GetDynamicStringProperty(System.String name, System.String value)
			 => controlplane.GetDynamicStringProperty(name, value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => controlplane.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => controlplane.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => controlplane.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => controlplane.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(controlplane.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => controlplane.SetPhase(phase.GetTSObject());

		public System.Boolean GetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => controlplane.GetPhase(phase.GetTSObject());

		public System.Boolean SetLabel(System.String label)
			 => controlplane.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => controlplane.CompareTo(obj);





    }

}
    
