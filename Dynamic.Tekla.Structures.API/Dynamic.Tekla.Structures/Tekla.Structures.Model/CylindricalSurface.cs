//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class CylindricalSurface 
    {

		public System.Double Radius
		{
			get => cylindricalsurface.Radius;
			set { cylindricalsurface.Radius = value; }
		}

		public System.Boolean InwardCurved
		{
			get => cylindricalsurface.InwardCurved;
			set { cylindricalsurface.InwardCurved = value; }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Line IntersectionLine
		{
			get => Dynamic.Tekla.Structures.Geometry3d.Line_.FromTSObject(cylindricalsurface.IntersectionLine);
			set { cylindricalsurface.IntersectionLine = Dynamic.Tekla.Structures.Geometry3d.Line_.GetTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Vector EndFaceNormal1
		{
			get => Dynamic.Tekla.Structures.Geometry3d.Vector_.FromTSObject(cylindricalsurface.EndFaceNormal1);
			set { cylindricalsurface.EndFaceNormal1 = Dynamic.Tekla.Structures.Geometry3d.Vector_.GetTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Vector EndFaceNormal2
		{
			get => Dynamic.Tekla.Structures.Geometry3d.Vector_.FromTSObject(cylindricalsurface.EndFaceNormal2);
			set { cylindricalsurface.EndFaceNormal2 = Dynamic.Tekla.Structures.Geometry3d.Vector_.GetTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Line CenterLine
		{
			get => Dynamic.Tekla.Structures.Geometry3d.Line_.FromTSObject(cylindricalsurface.CenterLine);
			set { cylindricalsurface.CenterLine = Dynamic.Tekla.Structures.Geometry3d.Line_.GetTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Vector RotationAxis
		{
			get => Dynamic.Tekla.Structures.Geometry3d.Vector_.FromTSObject(cylindricalsurface.RotationAxis);
			set { cylindricalsurface.RotationAxis = Dynamic.Tekla.Structures.Geometry3d.Vector_.GetTSObject(value); }
		}

		public System.Collections.Generic.List<Dynamic.Tekla.Structures.Geometry3d.Point> LateralBoundary1
		{
			get => cylindricalsurface.LateralBoundary1;
			set { cylindricalsurface.LateralBoundary1 = value; }
		}

		public System.Collections.Generic.List<Dynamic.Tekla.Structures.Geometry3d.Point> LateralBoundary2
		{
			get => cylindricalsurface.LateralBoundary2;
			set { cylindricalsurface.LateralBoundary2 = value; }
		}

		public Dynamic.Tekla.Structures.Geometry3d.LineSegment SideBoundary1
		{
			get => Dynamic.Tekla.Structures.Geometry3d.LineSegment_.FromTSObject(cylindricalsurface.SideBoundary1);
			set { cylindricalsurface.SideBoundary1 = Dynamic.Tekla.Structures.Geometry3d.LineSegment_.GetTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.LineSegment SideBoundary2
		{
			get => Dynamic.Tekla.Structures.Geometry3d.LineSegment_.FromTSObject(cylindricalsurface.SideBoundary2);
			set { cylindricalsurface.SideBoundary2 = Dynamic.Tekla.Structures.Geometry3d.LineSegment_.GetTSObject(value); }
		}

        

        internal dynamic cylindricalsurface;
        
        public CylindricalSurface()
        {
            this.cylindricalsurface =  TSActivator.CreateInstance("Tekla.Structures.Model.CylindricalSurface");
        }

        internal CylindricalSurface(dynamic tsObject)
        {
            this.cylindricalsurface = tsObject;
        }
		public CylindricalSurface(Dynamic.Tekla.Structures.Geometry3d.Vector endFaceNormal1, Dynamic.Tekla.Structures.Geometry3d.Vector endFaceNormal2, Dynamic.Tekla.Structures.Geometry3d.LineSegment sideBoundary1, Dynamic.Tekla.Structures.Geometry3d.LineSegment sideBoundary2)
		{
			var args = new object[4];
			args[0] = Dynamic.Tekla.Structures.Geometry3d.Vector_.GetTSObject(endFaceNormal1);
			args[1] = Dynamic.Tekla.Structures.Geometry3d.Vector_.GetTSObject(endFaceNormal2);
			args[2] = Dynamic.Tekla.Structures.Geometry3d.LineSegment_.GetTSObject(sideBoundary1);
			args[3] = Dynamic.Tekla.Structures.Geometry3d.LineSegment_.GetTSObject(sideBoundary2);
			this.cylindricalsurface = TSActivator.CreateInstance("Tekla.Structures.Model.CylindricalSurface", args);
		}
		public CylindricalSurface(Dynamic.Tekla.Structures.Geometry3d.Vector endFaceNormal1, Dynamic.Tekla.Structures.Geometry3d.Vector endFaceNormal2, System.Collections.Generic.List<Dynamic.Tekla.Structures.Geometry3d.Point> lateralBoundary1, System.Collections.Generic.List<Dynamic.Tekla.Structures.Geometry3d.Point> lateralBoundary2)
		{
			var args = new object[4];
			args[0] = Dynamic.Tekla.Structures.Geometry3d.Vector_.GetTSObject(endFaceNormal1);
			args[1] = Dynamic.Tekla.Structures.Geometry3d.Vector_.GetTSObject(endFaceNormal2);
			args[2] = lateralBoundary1;
			args[3] = lateralBoundary2;
			this.cylindricalsurface = TSActivator.CreateInstance("Tekla.Structures.Model.CylindricalSurface", args);
		}
		public CylindricalSurface(Dynamic.Tekla.Structures.Geometry3d.Arc baseArc, System.Double height)
		{
			var args = new object[2];
			args[0] = Dynamic.Tekla.Structures.Geometry3d.Arc_.GetTSObject(baseArc);
			args[1] = height;
			this.cylindricalsurface = TSActivator.CreateInstance("Tekla.Structures.Model.CylindricalSurface", args);
		}
		public CylindricalSurface(System.Collections.Generic.List<Dynamic.Tekla.Structures.Geometry3d.Point> lateralBoundary1, System.Collections.Generic.List<Dynamic.Tekla.Structures.Geometry3d.Point> lateralBoundary2, Dynamic.Tekla.Structures.Geometry3d.Line centerLine, Dynamic.Tekla.Structures.Geometry3d.Vector rotationAxis)
		{
			var args = new object[4];
			args[0] = lateralBoundary1;
			args[1] = lateralBoundary2;
			args[2] = Dynamic.Tekla.Structures.Geometry3d.Line_.GetTSObject(centerLine);
			args[3] = Dynamic.Tekla.Structures.Geometry3d.Vector_.GetTSObject(rotationAxis);
			this.cylindricalsurface = TSActivator.CreateInstance("Tekla.Structures.Model.CylindricalSurface", args);
		}





    }

    internal static class CylindricalSurface_
    {
        public static dynamic GetTSObject(CylindricalSurface dynObject)
        {
            return dynObject.cylindricalsurface;
        }

        public static CylindricalSurface FromTSObject(dynamic tsObject)
        {
            return new CylindricalSurface(tsObject);
        }
    }


}
    
