//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class CylindricalSurface 
    {

		public System.Double Radius
		{
			get => cylindricalsurface.Radius;
			set { cylindricalsurface.Radius = value; }
		}

		public System.Boolean InwardCurved
		{
			get => cylindricalsurface.InwardCurved;
			set { cylindricalsurface.InwardCurved = value; }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Line IntersectionLine
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Line(cylindricalsurface.IntersectionLine);
			set { cylindricalsurface.IntersectionLine = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Vector EndFaceNormal1
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Vector(cylindricalsurface.EndFaceNormal1);
			set { cylindricalsurface.EndFaceNormal1 = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Vector EndFaceNormal2
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Vector(cylindricalsurface.EndFaceNormal2);
			set { cylindricalsurface.EndFaceNormal2 = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Line CenterLine
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Line(cylindricalsurface.CenterLine);
			set { cylindricalsurface.CenterLine = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Vector RotationAxis
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Vector(cylindricalsurface.RotationAxis);
			set { cylindricalsurface.RotationAxis = value.GetTSObject(); }
		}

		public System.Collections.Generic.List<Dynamic.Tekla.Structures.Geometry3d.Point> LateralBoundary1
		{
			get => cylindricalsurface.LateralBoundary1;
			set { cylindricalsurface.LateralBoundary1 = value; }
		}

		public System.Collections.Generic.List<Dynamic.Tekla.Structures.Geometry3d.Point> LateralBoundary2
		{
			get => cylindricalsurface.LateralBoundary2;
			set { cylindricalsurface.LateralBoundary2 = value; }
		}

		public Dynamic.Tekla.Structures.Geometry3d.LineSegment SideBoundary1
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.LineSegment(cylindricalsurface.SideBoundary1);
			set { cylindricalsurface.SideBoundary1 = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.LineSegment SideBoundary2
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.LineSegment(cylindricalsurface.SideBoundary2);
			set { cylindricalsurface.SideBoundary2 = value.GetTSObject(); }
		}

        

        dynamic cylindricalsurface;
        
        public CylindricalSurface()
        {
            this.cylindricalsurface =  TSActivator.CreateInstance("Tekla.Structures.Model.CylindricalSurface");
        }

        public CylindricalSurface(dynamic tsObject)
        {
            this.cylindricalsurface = tsObject;
        }

        internal dynamic GetTSObject() => cylindricalsurface;





    }

}
    
