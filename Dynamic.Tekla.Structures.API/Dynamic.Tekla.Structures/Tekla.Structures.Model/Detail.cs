//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class Detail 
    {

		public System.Int32 Class
		{
			get => detail.Class;
			set { detail.Class = value; }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Vector UpVector
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Vector(detail.UpVector);
			set { detail.UpVector = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.AutoDirectionTypeEnum AutoDirectionType
		{
			get => Dynamic.Tekla.Structures.AutoDirectionTypeEnum_.FromTSObject(detail.AutoDirectionType);
			set { detail.AutoDirectionType = Dynamic.Tekla.Structures.AutoDirectionTypeEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.PositionTypeEnum PositionType
		{
			get => Dynamic.Tekla.Structures.PositionTypeEnum_.FromTSObject(detail.PositionType);
			set { detail.PositionType = Dynamic.Tekla.Structures.PositionTypeEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.DetailTypeEnum DetailType
		{
			get => Dynamic.Tekla.Structures.DetailTypeEnum_.FromTSObject(detail.DetailType);
			set { detail.DetailType = Dynamic.Tekla.Structures.DetailTypeEnum_.FromTSObject(value); }
		}

		public System.String Code
		{
			get => detail.Code;
			set { detail.Code = value; }
		}

		public Dynamic.Tekla.Structures.ConnectionStatusEnum Status
		{
			get => Dynamic.Tekla.Structures.ConnectionStatusEnum_.FromTSObject(detail.Status);
			set { detail.Status = Dynamic.Tekla.Structures.ConnectionStatusEnum_.FromTSObject(value); }
		}

		public System.String Name
		{
			get => detail.Name;
			set { detail.Name = value; }
		}

		public System.Int32 Number
		{
			get => detail.Number;
			set { detail.Number = value; }
		}

		public System.DateTime ModificationTime
		{
			get => detail.ModificationTime;
			set { detail.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => detail.IsUpToDate;
			set { detail.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => new Dynamic.Tekla.Structures.Identifier(detail.Identifier);
			set { detail.Identifier = value.GetTSObject(); }
		}

        

        dynamic detail;
        
        public Detail()
        {
            this.detail =  TSActivator.CreateInstance("Tekla.Structures.Model.Detail");
        }

        public Detail(dynamic tsObject)
        {
            this.detail = tsObject;
        }

        internal dynamic GetTSObject() => detail;

		public System.Boolean SetPrimaryObject(Dynamic.Tekla.Structures.Model.ModelObject M)
			 => detail.SetPrimaryObject(M.GetTSObject());

		public Dynamic.Tekla.Structures.Model.ModelObject GetPrimaryObject()
			 => new Dynamic.Tekla.Structures.Model.ModelObject(detail.GetPrimaryObject());

		public System.Boolean SetReferencePoint(Dynamic.Tekla.Structures.Geometry3d.Point ReferencePoint)
			 => detail.SetReferencePoint(ReferencePoint.GetTSObject());

		public Dynamic.Tekla.Structures.Geometry3d.Point GetReferencePoint()
			 => new Dynamic.Tekla.Structures.Geometry3d.Point(detail.GetReferencePoint());

		public System.Boolean Insert()
			 => detail.Insert();

		public System.Boolean Select()
			 => detail.Select();

		public System.Boolean Modify()
			 => detail.Modify();

		public System.Boolean Delete()
			 => detail.Delete();

		public void SetAttribute(System.String AttrName, System.String StrValue)
			 => detail.SetAttribute(AttrName, StrValue);

		public void SetAttribute(System.String AttrName, System.Int32 Value)
			 => detail.SetAttribute(AttrName, Value);

		public void SetAttribute(System.String AttrName, System.Double DValue)
			 => detail.SetAttribute(AttrName, DValue);

		public System.Boolean GetAttribute(System.String AttrName, System.String StrValue)
			 => detail.GetAttribute(AttrName, StrValue);

		public System.Boolean GetAttribute(System.String AttrName, System.Int32 Value)
			 => detail.GetAttribute(AttrName, Value);

		public System.Boolean GetAttribute(System.String AttrName, System.Double DValue)
			 => detail.GetAttribute(AttrName, DValue);

		public System.Boolean LoadAttributesFromFile(System.String Filename)
			 => detail.LoadAttributesFromFile(Filename);

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(detail.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => new Dynamic.Tekla.Structures.Model.BaseComponent(detail.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(detail.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(System.Collections.Hashtable values)
			 => detail.GetAllUserProperties(values);

		public System.Boolean GetIntegerUserProperties(System.Collections.Hashtable values)
			 => detail.GetIntegerUserProperties(values);

		public System.Boolean GetDoubleUserProperties(System.Collections.Hashtable values)
			 => detail.GetDoubleUserProperties(values);

		public System.Boolean GetStringUserProperties(System.Collections.Hashtable values)
			 => detail.GetStringUserProperties(values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, System.Collections.Hashtable values)
			 => detail.GetAllReportProperties(stringNames, doubleNames, integerNames, values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => detail.GetIntegerReportProperties(names, values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => detail.GetDoubleReportProperties(names, values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => detail.GetStringReportProperties(names, values);

		public System.Boolean GetUserProperty(System.String name, System.String value)
			 => detail.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.String value)
			 => detail.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Double value)
			 => detail.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Double value)
			 => detail.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Int32 value)
			 => detail.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Int32 value)
			 => detail.GetReportProperty(name, value);

		public System.Boolean GetDynamicStringProperty(System.String name, System.String value)
			 => detail.GetDynamicStringProperty(name, value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => detail.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => detail.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => detail.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => detail.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(detail.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => detail.SetPhase(phase.GetTSObject());

		public System.Boolean GetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => detail.GetPhase(phase.GetTSObject());

		public System.Boolean SetLabel(System.String label)
			 => detail.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => detail.CompareTo(obj);





    }

}
    
