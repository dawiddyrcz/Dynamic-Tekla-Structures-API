//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class DisposableToken 
    {

        

        internal dynamic disposabletoken;
        
        public DisposableToken()
        {
            this.disposabletoken =  TSActivator.CreateInstance("Tekla.Structures.Model.DisposableToken");
        }

        internal DisposableToken(dynamic tsObject)
        {
            this.disposabletoken = tsObject;
        }

		public Dynamic.Tekla.Structures.Model.DisposableToken op_Addition(Dynamic.Tekla.Structures.Model.DisposableToken a, System.IDisposable b)
			 => Dynamic.Tekla.Structures.Model.DisposableToken_.FromTSObject(disposabletoken.op_Addition(Dynamic.Tekla.Structures.Model.DisposableToken_.GetTSObject(a), b));

		public void Dispose()
			 => disposabletoken.Dispose();





    }

    internal static class DisposableToken_
    {
        public static dynamic GetTSObject(DisposableToken dynObject)
        {
            return dynObject.disposabletoken;
        }

        public static DisposableToken FromTSObject(dynamic tsObject)
        {
            return new DisposableToken(tsObject);
        }
    }


}
    
