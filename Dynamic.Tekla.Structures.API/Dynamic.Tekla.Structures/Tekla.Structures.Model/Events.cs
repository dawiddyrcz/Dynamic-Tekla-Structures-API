//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class Events 
    {

        

        internal dynamic events;
        
        public Events()
        {
            this.events =  TSActivator.CreateInstance("Tekla.Structures.Model.Events");
        }

        internal Events(dynamic tsObject)
        {
            this.events = tsObject;
        }

		public void add_SelectionChange(Dynamic.Tekla.Structures.Model.Events.SelectionChangeDelegate value)
			 => events.add_SelectionChange(Dynamic.Tekla.Structures.Model.Events.SelectionChangeDelegate_.GetTSObject(value));

		public void remove_SelectionChange(Dynamic.Tekla.Structures.Model.Events.SelectionChangeDelegate value)
			 => events.remove_SelectionChange(Dynamic.Tekla.Structures.Model.Events.SelectionChangeDelegate_.GetTSObject(value));

		public void add_CommandStatusChange(Dynamic.Tekla.Structures.Model.Events.CommandStatusChangeDelegate value)
			 => events.add_CommandStatusChange(Dynamic.Tekla.Structures.Model.Events.CommandStatusChangeDelegate_.GetTSObject(value));

		public void remove_CommandStatusChange(Dynamic.Tekla.Structures.Model.Events.CommandStatusChangeDelegate value)
			 => events.remove_CommandStatusChange(Dynamic.Tekla.Structures.Model.Events.CommandStatusChangeDelegate_.GetTSObject(value));

		public void add_TrackEvent(Dynamic.Tekla.Structures.Model.Events.TrackEventDelegate value)
			 => events.add_TrackEvent(Dynamic.Tekla.Structures.Model.Events.TrackEventDelegate_.GetTSObject(value));

		public void remove_TrackEvent(Dynamic.Tekla.Structures.Model.Events.TrackEventDelegate value)
			 => events.remove_TrackEvent(Dynamic.Tekla.Structures.Model.Events.TrackEventDelegate_.GetTSObject(value));

		public void add_PointInputChanged(Dynamic.Tekla.Structures.Model.Events.PointInputChangedDelegate value)
			 => events.add_PointInputChanged(Dynamic.Tekla.Structures.Model.Events.PointInputChangedDelegate_.GetTSObject(value));

		public void remove_PointInputChanged(Dynamic.Tekla.Structures.Model.Events.PointInputChangedDelegate value)
			 => events.remove_PointInputChanged(Dynamic.Tekla.Structures.Model.Events.PointInputChangedDelegate_.GetTSObject(value));

		public void add_ModelSave(Dynamic.Tekla.Structures.Model.Events.ModelSaveDelegate value)
			 => events.add_ModelSave(Dynamic.Tekla.Structures.Model.Events.ModelSaveDelegate_.GetTSObject(value));

		public void remove_ModelSave(Dynamic.Tekla.Structures.Model.Events.ModelSaveDelegate value)
			 => events.remove_ModelSave(Dynamic.Tekla.Structures.Model.Events.ModelSaveDelegate_.GetTSObject(value));

		public void add_ModelSaveAs(Dynamic.Tekla.Structures.Model.Events.ModelSaveAsDelegate value)
			 => events.add_ModelSaveAs(Dynamic.Tekla.Structures.Model.Events.ModelSaveAsDelegate_.GetTSObject(value));

		public void remove_ModelSaveAs(Dynamic.Tekla.Structures.Model.Events.ModelSaveAsDelegate value)
			 => events.remove_ModelSaveAs(Dynamic.Tekla.Structures.Model.Events.ModelSaveAsDelegate_.GetTSObject(value));

		public void add_ModelLoad(Dynamic.Tekla.Structures.Model.Events.ModelLoadDelegate value)
			 => events.add_ModelLoad(Dynamic.Tekla.Structures.Model.Events.ModelLoadDelegate_.GetTSObject(value));

		public void remove_ModelLoad(Dynamic.Tekla.Structures.Model.Events.ModelLoadDelegate value)
			 => events.remove_ModelLoad(Dynamic.Tekla.Structures.Model.Events.ModelLoadDelegate_.GetTSObject(value));

		public void add_ModelUnloading(Dynamic.Tekla.Structures.Model.Events.ModelLoadDelegate value)
			 => events.add_ModelUnloading(Dynamic.Tekla.Structures.Model.Events.ModelLoadDelegate_.GetTSObject(value));

		public void remove_ModelUnloading(Dynamic.Tekla.Structures.Model.Events.ModelLoadDelegate value)
			 => events.remove_ModelUnloading(Dynamic.Tekla.Structures.Model.Events.ModelLoadDelegate_.GetTSObject(value));

		public void add_Numbering(Dynamic.Tekla.Structures.Model.Events.NumberingDelegate value)
			 => events.add_Numbering(Dynamic.Tekla.Structures.Model.Events.NumberingDelegate_.GetTSObject(value));

		public void remove_Numbering(Dynamic.Tekla.Structures.Model.Events.NumberingDelegate value)
			 => events.remove_Numbering(Dynamic.Tekla.Structures.Model.Events.NumberingDelegate_.GetTSObject(value));

		public void add_ModelChanged(Dynamic.Tekla.Structures.Model.Events.ModelChangedDelegate value)
			 => events.add_ModelChanged(Dynamic.Tekla.Structures.Model.Events.ModelChangedDelegate_.GetTSObject(value));

		public void remove_ModelChanged(Dynamic.Tekla.Structures.Model.Events.ModelChangedDelegate value)
			 => events.remove_ModelChanged(Dynamic.Tekla.Structures.Model.Events.ModelChangedDelegate_.GetTSObject(value));

		public void add_ModelObjectNumbered(Dynamic.Tekla.Structures.Model.Events.ModelObjectNumberedDelegate value)
			 => events.add_ModelObjectNumbered(Dynamic.Tekla.Structures.Model.Events.ModelObjectNumberedDelegate_.GetTSObject(value));

		public void remove_ModelObjectNumbered(Dynamic.Tekla.Structures.Model.Events.ModelObjectNumberedDelegate value)
			 => events.remove_ModelObjectNumbered(Dynamic.Tekla.Structures.Model.Events.ModelObjectNumberedDelegate_.GetTSObject(value));

		public void add_ModelObjectChanged(Dynamic.Tekla.Structures.Model.Events.ModelObjectChangedDelegate value)
			 => events.add_ModelObjectChanged(Dynamic.Tekla.Structures.Model.Events.ModelObjectChangedDelegate_.GetTSObject(value));

		public void remove_ModelObjectChanged(Dynamic.Tekla.Structures.Model.Events.ModelObjectChangedDelegate value)
			 => events.remove_ModelObjectChanged(Dynamic.Tekla.Structures.Model.Events.ModelObjectChangedDelegate_.GetTSObject(value));

		public void add_TeklaStructuresExit(Dynamic.Tekla.Structures.Model.Events.TeklaStructuresExitDelegate value)
			 => events.add_TeklaStructuresExit(Dynamic.Tekla.Structures.Model.Events.TeklaStructuresExitDelegate_.GetTSObject(value));

		public void remove_TeklaStructuresExit(Dynamic.Tekla.Structures.Model.Events.TeklaStructuresExitDelegate value)
			 => events.remove_TeklaStructuresExit(Dynamic.Tekla.Structures.Model.Events.TeklaStructuresExitDelegate_.GetTSObject(value));

		public void add_ClashCheckDone(Dynamic.Tekla.Structures.Model.Events.ClashCheckDoneDelegate value)
			 => events.add_ClashCheckDone(Dynamic.Tekla.Structures.Model.Events.ClashCheckDoneDelegate_.GetTSObject(value));

		public void remove_ClashCheckDone(Dynamic.Tekla.Structures.Model.Events.ClashCheckDoneDelegate value)
			 => events.remove_ClashCheckDone(Dynamic.Tekla.Structures.Model.Events.ClashCheckDoneDelegate_.GetTSObject(value));

		public void add_ClashDetected(Dynamic.Tekla.Structures.Model.Events.ClashDetectedDelegate value)
			 => events.add_ClashDetected(Dynamic.Tekla.Structures.Model.Events.ClashDetectedDelegate_.GetTSObject(value));

		public void remove_ClashDetected(Dynamic.Tekla.Structures.Model.Events.ClashDetectedDelegate value)
			 => events.remove_ClashDetected(Dynamic.Tekla.Structures.Model.Events.ClashDetectedDelegate_.GetTSObject(value));

		public void add_Interrupted(Dynamic.Tekla.Structures.Model.Events.InterruptedDelegate value)
			 => events.add_Interrupted(Dynamic.Tekla.Structures.Model.Events.InterruptedDelegate_.GetTSObject(value));

		public void remove_Interrupted(Dynamic.Tekla.Structures.Model.Events.InterruptedDelegate value)
			 => events.remove_Interrupted(Dynamic.Tekla.Structures.Model.Events.InterruptedDelegate_.GetTSObject(value));

		public void OnSelectionChange(System.String eventName, System.Object parameters)
			 => events.OnSelectionChange(eventName, parameters);

		public void OnAnnotationSelectionChange(System.String eventName, System.Object parameters)
			 => events.OnAnnotationSelectionChange(eventName, parameters);

		public void OnCommandStatusChange(System.String eventName, System.Object parameters)
			 => events.OnCommandStatusChange(eventName, parameters);

		public void OnTrackEvent(System.String eventName, System.Object parameters)
			 => events.OnTrackEvent(eventName, parameters);

		public void OnPointInputChangedEvent(System.String eventName, System.Object parameters)
			 => events.OnPointInputChangedEvent(eventName, parameters);

		public void OnModelSave(System.String eventName, System.Object parameters)
			 => events.OnModelSave(eventName, parameters);

		public void OnModelSaveAs(System.String eventName, System.Object parameters)
			 => events.OnModelSaveAs(eventName, parameters);

		public void OnModelLoad(System.String eventName, System.Object parameters)
			 => events.OnModelLoad(eventName, parameters);

		public void OnModelUnloading(System.String eventName, System.Object parameters)
			 => events.OnModelUnloading(eventName, parameters);

		public void OnNumbering(System.String eventName, System.Object parameters)
			 => events.OnNumbering(eventName, parameters);

		public void OnModelObjectNumbered(System.String eventName, System.Object parameters)
			 => events.OnModelObjectNumbered(eventName, parameters);

		public void OnModelObjectChanged(System.String eventName, System.Object parameters)
			 => events.OnModelObjectChanged(eventName, parameters);

		public void OnDbCommit(System.String eventName, System.Object parameters)
			 => events.OnDbCommit(eventName, parameters);

		public void OnTeklaStructuresExit(System.String eventName, System.Object parameters)
			 => events.OnTeklaStructuresExit(eventName, parameters);

		public void OnClashCheckDone(System.String eventName, System.Object parameters)
			 => events.OnClashCheckDone(eventName, parameters);

		public void OnClashDetected(System.String eventName, System.Object parameters)
			 => events.OnClashDetected(eventName, parameters);

		public void OnInterrupted()
			 => events.OnInterrupted();

		public System.Object InitializeLifetimeService()
			 => events.InitializeLifetimeService();

		public void Register()
			 => events.Register();

		public void UnRegister()
			 => events.UnRegister();

		public System.Object GetLifetimeService()
			 => events.GetLifetimeService();

		public System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType)
			 => events.CreateObjRef(requestedType);




    public sealed class SelectionChangeDelegate 
    {

		public System.Reflection.MethodInfo Method
		{
			get => selectionchangedelegate.Method;
			set { selectionchangedelegate.Method = value; }
		}

		public System.Object Target
		{
			get => selectionchangedelegate.Target;
			set { selectionchangedelegate.Target = value; }
		}

        

        internal dynamic selectionchangedelegate;
        
        public SelectionChangeDelegate()
        {
            this.selectionchangedelegate =  TSActivator.CreateInstance("Tekla.Structures.Model.SelectionChangeDelegate");
        }

        internal SelectionChangeDelegate(dynamic tsObject)
        {
            this.selectionchangedelegate = tsObject;
        }

		public void Invoke()
			 => selectionchangedelegate.Invoke();

		public void EndInvoke(System.IAsyncResult result)
			 => selectionchangedelegate.EndInvoke(result);

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => selectionchangedelegate.GetObjectData(info, context);

		public System.Delegate GetInvocationList()
			 => selectionchangedelegate.GetInvocationList();

		public System.Object DynamicInvoke(System.Object args)
			 => selectionchangedelegate.DynamicInvoke(args);

		public System.Object Clone()
			 => selectionchangedelegate.Clone();





    }

    internal static class SelectionChangeDelegate_
    {
        public static dynamic GetTSObject(SelectionChangeDelegate dynObject)
        {
            return dynObject.selectionchangedelegate;
        }

        public static SelectionChangeDelegate FromTSObject(dynamic tsObject)
        {
            return new SelectionChangeDelegate(tsObject);
        }
    }



    public sealed class CommandStatusChangeDelegate 
    {

		public System.Reflection.MethodInfo Method
		{
			get => commandstatuschangedelegate.Method;
			set { commandstatuschangedelegate.Method = value; }
		}

		public System.Object Target
		{
			get => commandstatuschangedelegate.Target;
			set { commandstatuschangedelegate.Target = value; }
		}

        

        internal dynamic commandstatuschangedelegate;
        
        public CommandStatusChangeDelegate()
        {
            this.commandstatuschangedelegate =  TSActivator.CreateInstance("Tekla.Structures.Model.CommandStatusChangeDelegate");
        }

        internal CommandStatusChangeDelegate(dynamic tsObject)
        {
            this.commandstatuschangedelegate = tsObject;
        }

		public void Invoke(System.String TSCommand, System.String TSCommandParam, System.Boolean Status)
			 => commandstatuschangedelegate.Invoke(TSCommand, TSCommandParam, Status);

		public void EndInvoke(System.IAsyncResult result)
			 => commandstatuschangedelegate.EndInvoke(result);

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => commandstatuschangedelegate.GetObjectData(info, context);

		public System.Delegate GetInvocationList()
			 => commandstatuschangedelegate.GetInvocationList();

		public System.Object DynamicInvoke(System.Object args)
			 => commandstatuschangedelegate.DynamicInvoke(args);

		public System.Object Clone()
			 => commandstatuschangedelegate.Clone();





    }

    internal static class CommandStatusChangeDelegate_
    {
        public static dynamic GetTSObject(CommandStatusChangeDelegate dynObject)
        {
            return dynObject.commandstatuschangedelegate;
        }

        public static CommandStatusChangeDelegate FromTSObject(dynamic tsObject)
        {
            return new CommandStatusChangeDelegate(tsObject);
        }
    }



    public sealed class TrackEventDelegate 
    {

		public System.Reflection.MethodInfo Method
		{
			get => trackeventdelegate.Method;
			set { trackeventdelegate.Method = value; }
		}

		public System.Object Target
		{
			get => trackeventdelegate.Target;
			set { trackeventdelegate.Target = value; }
		}

        

        internal dynamic trackeventdelegate;
        
        public TrackEventDelegate()
        {
            this.trackeventdelegate =  TSActivator.CreateInstance("Tekla.Structures.Model.TrackEventDelegate");
        }

        internal TrackEventDelegate(dynamic tsObject)
        {
            this.trackeventdelegate = tsObject;
        }

		public void Invoke(System.String Category, System.String Name, System.String Content)
			 => trackeventdelegate.Invoke(Category, Name, Content);

		public void EndInvoke(System.IAsyncResult result)
			 => trackeventdelegate.EndInvoke(result);

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => trackeventdelegate.GetObjectData(info, context);

		public System.Delegate GetInvocationList()
			 => trackeventdelegate.GetInvocationList();

		public System.Object DynamicInvoke(System.Object args)
			 => trackeventdelegate.DynamicInvoke(args);

		public System.Object Clone()
			 => trackeventdelegate.Clone();





    }

    internal static class TrackEventDelegate_
    {
        public static dynamic GetTSObject(TrackEventDelegate dynObject)
        {
            return dynObject.trackeventdelegate;
        }

        public static TrackEventDelegate FromTSObject(dynamic tsObject)
        {
            return new TrackEventDelegate(tsObject);
        }
    }



    public sealed class ModelSaveDelegate 
    {

		public System.Reflection.MethodInfo Method
		{
			get => modelsavedelegate.Method;
			set { modelsavedelegate.Method = value; }
		}

		public System.Object Target
		{
			get => modelsavedelegate.Target;
			set { modelsavedelegate.Target = value; }
		}

        

        internal dynamic modelsavedelegate;
        
        public ModelSaveDelegate()
        {
            this.modelsavedelegate =  TSActivator.CreateInstance("Tekla.Structures.Model.ModelSaveDelegate");
        }

        internal ModelSaveDelegate(dynamic tsObject)
        {
            this.modelsavedelegate = tsObject;
        }

		public void Invoke()
			 => modelsavedelegate.Invoke();

		public void EndInvoke(System.IAsyncResult result)
			 => modelsavedelegate.EndInvoke(result);

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => modelsavedelegate.GetObjectData(info, context);

		public System.Delegate GetInvocationList()
			 => modelsavedelegate.GetInvocationList();

		public System.Object DynamicInvoke(System.Object args)
			 => modelsavedelegate.DynamicInvoke(args);

		public System.Object Clone()
			 => modelsavedelegate.Clone();





    }

    internal static class ModelSaveDelegate_
    {
        public static dynamic GetTSObject(ModelSaveDelegate dynObject)
        {
            return dynObject.modelsavedelegate;
        }

        public static ModelSaveDelegate FromTSObject(dynamic tsObject)
        {
            return new ModelSaveDelegate(tsObject);
        }
    }



    public sealed class ModelSaveAsDelegate 
    {

		public System.Reflection.MethodInfo Method
		{
			get => modelsaveasdelegate.Method;
			set { modelsaveasdelegate.Method = value; }
		}

		public System.Object Target
		{
			get => modelsaveasdelegate.Target;
			set { modelsaveasdelegate.Target = value; }
		}

        

        internal dynamic modelsaveasdelegate;
        
        public ModelSaveAsDelegate()
        {
            this.modelsaveasdelegate =  TSActivator.CreateInstance("Tekla.Structures.Model.ModelSaveAsDelegate");
        }

        internal ModelSaveAsDelegate(dynamic tsObject)
        {
            this.modelsaveasdelegate = tsObject;
        }

		public void Invoke()
			 => modelsaveasdelegate.Invoke();

		public void EndInvoke(System.IAsyncResult result)
			 => modelsaveasdelegate.EndInvoke(result);

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => modelsaveasdelegate.GetObjectData(info, context);

		public System.Delegate GetInvocationList()
			 => modelsaveasdelegate.GetInvocationList();

		public System.Object DynamicInvoke(System.Object args)
			 => modelsaveasdelegate.DynamicInvoke(args);

		public System.Object Clone()
			 => modelsaveasdelegate.Clone();





    }

    internal static class ModelSaveAsDelegate_
    {
        public static dynamic GetTSObject(ModelSaveAsDelegate dynObject)
        {
            return dynObject.modelsaveasdelegate;
        }

        public static ModelSaveAsDelegate FromTSObject(dynamic tsObject)
        {
            return new ModelSaveAsDelegate(tsObject);
        }
    }



    public sealed class ModelLoadDelegate 
    {

		public System.Reflection.MethodInfo Method
		{
			get => modelloaddelegate.Method;
			set { modelloaddelegate.Method = value; }
		}

		public System.Object Target
		{
			get => modelloaddelegate.Target;
			set { modelloaddelegate.Target = value; }
		}

        

        internal dynamic modelloaddelegate;
        
        public ModelLoadDelegate()
        {
            this.modelloaddelegate =  TSActivator.CreateInstance("Tekla.Structures.Model.ModelLoadDelegate");
        }

        internal ModelLoadDelegate(dynamic tsObject)
        {
            this.modelloaddelegate = tsObject;
        }

		public void Invoke()
			 => modelloaddelegate.Invoke();

		public void EndInvoke(System.IAsyncResult result)
			 => modelloaddelegate.EndInvoke(result);

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => modelloaddelegate.GetObjectData(info, context);

		public System.Delegate GetInvocationList()
			 => modelloaddelegate.GetInvocationList();

		public System.Object DynamicInvoke(System.Object args)
			 => modelloaddelegate.DynamicInvoke(args);

		public System.Object Clone()
			 => modelloaddelegate.Clone();





    }

    internal static class ModelLoadDelegate_
    {
        public static dynamic GetTSObject(ModelLoadDelegate dynObject)
        {
            return dynObject.modelloaddelegate;
        }

        public static ModelLoadDelegate FromTSObject(dynamic tsObject)
        {
            return new ModelLoadDelegate(tsObject);
        }
    }



    public sealed class NumberingDelegate 
    {

		public System.Reflection.MethodInfo Method
		{
			get => numberingdelegate.Method;
			set { numberingdelegate.Method = value; }
		}

		public System.Object Target
		{
			get => numberingdelegate.Target;
			set { numberingdelegate.Target = value; }
		}

        

        internal dynamic numberingdelegate;
        
        public NumberingDelegate()
        {
            this.numberingdelegate =  TSActivator.CreateInstance("Tekla.Structures.Model.NumberingDelegate");
        }

        internal NumberingDelegate(dynamic tsObject)
        {
            this.numberingdelegate = tsObject;
        }

		public void Invoke()
			 => numberingdelegate.Invoke();

		public void EndInvoke(System.IAsyncResult result)
			 => numberingdelegate.EndInvoke(result);

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => numberingdelegate.GetObjectData(info, context);

		public System.Delegate GetInvocationList()
			 => numberingdelegate.GetInvocationList();

		public System.Object DynamicInvoke(System.Object args)
			 => numberingdelegate.DynamicInvoke(args);

		public System.Object Clone()
			 => numberingdelegate.Clone();





    }

    internal static class NumberingDelegate_
    {
        public static dynamic GetTSObject(NumberingDelegate dynObject)
        {
            return dynObject.numberingdelegate;
        }

        public static NumberingDelegate FromTSObject(dynamic tsObject)
        {
            return new NumberingDelegate(tsObject);
        }
    }



    public sealed class ModelChangedDelegate 
    {

		public System.Reflection.MethodInfo Method
		{
			get => modelchangeddelegate.Method;
			set { modelchangeddelegate.Method = value; }
		}

		public System.Object Target
		{
			get => modelchangeddelegate.Target;
			set { modelchangeddelegate.Target = value; }
		}

        

        internal dynamic modelchangeddelegate;
        
        public ModelChangedDelegate()
        {
            this.modelchangeddelegate =  TSActivator.CreateInstance("Tekla.Structures.Model.ModelChangedDelegate");
        }

        internal ModelChangedDelegate(dynamic tsObject)
        {
            this.modelchangeddelegate = tsObject;
        }

		public void Invoke()
			 => modelchangeddelegate.Invoke();

		public void EndInvoke(System.IAsyncResult result)
			 => modelchangeddelegate.EndInvoke(result);

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => modelchangeddelegate.GetObjectData(info, context);

		public System.Delegate GetInvocationList()
			 => modelchangeddelegate.GetInvocationList();

		public System.Object DynamicInvoke(System.Object args)
			 => modelchangeddelegate.DynamicInvoke(args);

		public System.Object Clone()
			 => modelchangeddelegate.Clone();





    }

    internal static class ModelChangedDelegate_
    {
        public static dynamic GetTSObject(ModelChangedDelegate dynObject)
        {
            return dynObject.modelchangeddelegate;
        }

        public static ModelChangedDelegate FromTSObject(dynamic tsObject)
        {
            return new ModelChangedDelegate(tsObject);
        }
    }



    public sealed class ModelObjectNumberedDelegate 
    {

		public System.Reflection.MethodInfo Method
		{
			get => modelobjectnumbereddelegate.Method;
			set { modelobjectnumbereddelegate.Method = value; }
		}

		public System.Object Target
		{
			get => modelobjectnumbereddelegate.Target;
			set { modelobjectnumbereddelegate.Target = value; }
		}

        

        internal dynamic modelobjectnumbereddelegate;
        
        public ModelObjectNumberedDelegate()
        {
            this.modelobjectnumbereddelegate =  TSActivator.CreateInstance("Tekla.Structures.Model.ModelObjectNumberedDelegate");
        }

        internal ModelObjectNumberedDelegate(dynamic tsObject)
        {
            this.modelobjectnumbereddelegate = tsObject;
        }

		public void Invoke(System.Collections.Generic.List<Dynamic.Tekla.Structures.Model.ModelObject> Objects)
			 => modelobjectnumbereddelegate.Invoke(Objects);

		public void EndInvoke(System.IAsyncResult result)
			 => modelobjectnumbereddelegate.EndInvoke(result);

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => modelobjectnumbereddelegate.GetObjectData(info, context);

		public System.Delegate GetInvocationList()
			 => modelobjectnumbereddelegate.GetInvocationList();

		public System.Object DynamicInvoke(System.Object args)
			 => modelobjectnumbereddelegate.DynamicInvoke(args);

		public System.Object Clone()
			 => modelobjectnumbereddelegate.Clone();





    }

    internal static class ModelObjectNumberedDelegate_
    {
        public static dynamic GetTSObject(ModelObjectNumberedDelegate dynObject)
        {
            return dynObject.modelobjectnumbereddelegate;
        }

        public static ModelObjectNumberedDelegate FromTSObject(dynamic tsObject)
        {
            return new ModelObjectNumberedDelegate(tsObject);
        }
    }



    public sealed class ModelObjectChangedDelegate 
    {

		public System.Reflection.MethodInfo Method
		{
			get => modelobjectchangeddelegate.Method;
			set { modelobjectchangeddelegate.Method = value; }
		}

		public System.Object Target
		{
			get => modelobjectchangeddelegate.Target;
			set { modelobjectchangeddelegate.Target = value; }
		}

        

        internal dynamic modelobjectchangeddelegate;
        
        public ModelObjectChangedDelegate()
        {
            this.modelobjectchangeddelegate =  TSActivator.CreateInstance("Tekla.Structures.Model.ModelObjectChangedDelegate");
        }

        internal ModelObjectChangedDelegate(dynamic tsObject)
        {
            this.modelobjectchangeddelegate = tsObject;
        }

		public void Invoke(System.Collections.Generic.List<Dynamic.Tekla.Structures.Model.ChangeData> Changes)
			 => modelobjectchangeddelegate.Invoke(Changes);

		public void EndInvoke(System.IAsyncResult result)
			 => modelobjectchangeddelegate.EndInvoke(result);

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => modelobjectchangeddelegate.GetObjectData(info, context);

		public System.Delegate GetInvocationList()
			 => modelobjectchangeddelegate.GetInvocationList();

		public System.Object DynamicInvoke(System.Object args)
			 => modelobjectchangeddelegate.DynamicInvoke(args);

		public System.Object Clone()
			 => modelobjectchangeddelegate.Clone();





    }

    internal static class ModelObjectChangedDelegate_
    {
        public static dynamic GetTSObject(ModelObjectChangedDelegate dynObject)
        {
            return dynObject.modelobjectchangeddelegate;
        }

        public static ModelObjectChangedDelegate FromTSObject(dynamic tsObject)
        {
            return new ModelObjectChangedDelegate(tsObject);
        }
    }



    public sealed class TeklaStructuresExitDelegate 
    {

		public System.Reflection.MethodInfo Method
		{
			get => teklastructuresexitdelegate.Method;
			set { teklastructuresexitdelegate.Method = value; }
		}

		public System.Object Target
		{
			get => teklastructuresexitdelegate.Target;
			set { teklastructuresexitdelegate.Target = value; }
		}

        

        internal dynamic teklastructuresexitdelegate;
        
        public TeklaStructuresExitDelegate()
        {
            this.teklastructuresexitdelegate =  TSActivator.CreateInstance("Tekla.Structures.Model.TeklaStructuresExitDelegate");
        }

        internal TeklaStructuresExitDelegate(dynamic tsObject)
        {
            this.teklastructuresexitdelegate = tsObject;
        }

		public void Invoke()
			 => teklastructuresexitdelegate.Invoke();

		public void EndInvoke(System.IAsyncResult result)
			 => teklastructuresexitdelegate.EndInvoke(result);

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => teklastructuresexitdelegate.GetObjectData(info, context);

		public System.Delegate GetInvocationList()
			 => teklastructuresexitdelegate.GetInvocationList();

		public System.Object DynamicInvoke(System.Object args)
			 => teklastructuresexitdelegate.DynamicInvoke(args);

		public System.Object Clone()
			 => teklastructuresexitdelegate.Clone();





    }

    internal static class TeklaStructuresExitDelegate_
    {
        public static dynamic GetTSObject(TeklaStructuresExitDelegate dynObject)
        {
            return dynObject.teklastructuresexitdelegate;
        }

        public static TeklaStructuresExitDelegate FromTSObject(dynamic tsObject)
        {
            return new TeklaStructuresExitDelegate(tsObject);
        }
    }



    public sealed class ClashCheckDoneDelegate 
    {

		public System.Reflection.MethodInfo Method
		{
			get => clashcheckdonedelegate.Method;
			set { clashcheckdonedelegate.Method = value; }
		}

		public System.Object Target
		{
			get => clashcheckdonedelegate.Target;
			set { clashcheckdonedelegate.Target = value; }
		}

        

        internal dynamic clashcheckdonedelegate;
        
        public ClashCheckDoneDelegate()
        {
            this.clashcheckdonedelegate =  TSActivator.CreateInstance("Tekla.Structures.Model.ClashCheckDoneDelegate");
        }

        internal ClashCheckDoneDelegate(dynamic tsObject)
        {
            this.clashcheckdonedelegate = tsObject;
        }

		public void Invoke(System.Int32 NumbersOfClashes)
			 => clashcheckdonedelegate.Invoke(NumbersOfClashes);

		public void EndInvoke(System.IAsyncResult result)
			 => clashcheckdonedelegate.EndInvoke(result);

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => clashcheckdonedelegate.GetObjectData(info, context);

		public System.Delegate GetInvocationList()
			 => clashcheckdonedelegate.GetInvocationList();

		public System.Object DynamicInvoke(System.Object args)
			 => clashcheckdonedelegate.DynamicInvoke(args);

		public System.Object Clone()
			 => clashcheckdonedelegate.Clone();





    }

    internal static class ClashCheckDoneDelegate_
    {
        public static dynamic GetTSObject(ClashCheckDoneDelegate dynObject)
        {
            return dynObject.clashcheckdonedelegate;
        }

        public static ClashCheckDoneDelegate FromTSObject(dynamic tsObject)
        {
            return new ClashCheckDoneDelegate(tsObject);
        }
    }



    public sealed class ClashDetectedDelegate 
    {

		public System.Reflection.MethodInfo Method
		{
			get => clashdetecteddelegate.Method;
			set { clashdetecteddelegate.Method = value; }
		}

		public System.Object Target
		{
			get => clashdetecteddelegate.Target;
			set { clashdetecteddelegate.Target = value; }
		}

        

        internal dynamic clashdetecteddelegate;
        
        public ClashDetectedDelegate()
        {
            this.clashdetecteddelegate =  TSActivator.CreateInstance("Tekla.Structures.Model.ClashDetectedDelegate");
        }

        internal ClashDetectedDelegate(dynamic tsObject)
        {
            this.clashdetecteddelegate = tsObject;
        }

		public void Invoke(Dynamic.Tekla.Structures.Model.ClashCheckData ClashData)
			 => clashdetecteddelegate.Invoke(Dynamic.Tekla.Structures.Model.ClashCheckData_.GetTSObject(ClashData));

		public void EndInvoke(System.IAsyncResult result)
			 => clashdetecteddelegate.EndInvoke(result);

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => clashdetecteddelegate.GetObjectData(info, context);

		public System.Delegate GetInvocationList()
			 => clashdetecteddelegate.GetInvocationList();

		public System.Object DynamicInvoke(System.Object args)
			 => clashdetecteddelegate.DynamicInvoke(args);

		public System.Object Clone()
			 => clashdetecteddelegate.Clone();





    }

    internal static class ClashDetectedDelegate_
    {
        public static dynamic GetTSObject(ClashDetectedDelegate dynObject)
        {
            return dynObject.clashdetecteddelegate;
        }

        public static ClashDetectedDelegate FromTSObject(dynamic tsObject)
        {
            return new ClashDetectedDelegate(tsObject);
        }
    }



    public sealed class PointInputChangedDelegate 
    {

		public System.Reflection.MethodInfo Method
		{
			get => pointinputchangeddelegate.Method;
			set { pointinputchangeddelegate.Method = value; }
		}

		public System.Object Target
		{
			get => pointinputchangeddelegate.Target;
			set { pointinputchangeddelegate.Target = value; }
		}

        

        internal dynamic pointinputchangeddelegate;
        
        public PointInputChangedDelegate()
        {
            this.pointinputchangeddelegate =  TSActivator.CreateInstance("Tekla.Structures.Model.PointInputChangedDelegate");
        }

        internal PointInputChangedDelegate(dynamic tsObject)
        {
            this.pointinputchangeddelegate = tsObject;
        }

		public void Invoke(System.Collections.Generic.List<Dynamic.Tekla.Structures.Geometry3d.Point> Changes)
			 => pointinputchangeddelegate.Invoke(Changes);

		public void EndInvoke(System.IAsyncResult result)
			 => pointinputchangeddelegate.EndInvoke(result);

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => pointinputchangeddelegate.GetObjectData(info, context);

		public System.Delegate GetInvocationList()
			 => pointinputchangeddelegate.GetInvocationList();

		public System.Object DynamicInvoke(System.Object args)
			 => pointinputchangeddelegate.DynamicInvoke(args);

		public System.Object Clone()
			 => pointinputchangeddelegate.Clone();





    }

    internal static class PointInputChangedDelegate_
    {
        public static dynamic GetTSObject(PointInputChangedDelegate dynObject)
        {
            return dynObject.pointinputchangeddelegate;
        }

        public static PointInputChangedDelegate FromTSObject(dynamic tsObject)
        {
            return new PointInputChangedDelegate(tsObject);
        }
    }



    public sealed class InterruptedDelegate 
    {

		public System.Reflection.MethodInfo Method
		{
			get => interrupteddelegate.Method;
			set { interrupteddelegate.Method = value; }
		}

		public System.Object Target
		{
			get => interrupteddelegate.Target;
			set { interrupteddelegate.Target = value; }
		}

        

        internal dynamic interrupteddelegate;
        
        public InterruptedDelegate()
        {
            this.interrupteddelegate =  TSActivator.CreateInstance("Tekla.Structures.Model.InterruptedDelegate");
        }

        internal InterruptedDelegate(dynamic tsObject)
        {
            this.interrupteddelegate = tsObject;
        }

		public void Invoke()
			 => interrupteddelegate.Invoke();

		public void EndInvoke(System.IAsyncResult result)
			 => interrupteddelegate.EndInvoke(result);

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => interrupteddelegate.GetObjectData(info, context);

		public System.Delegate GetInvocationList()
			 => interrupteddelegate.GetInvocationList();

		public System.Object DynamicInvoke(System.Object args)
			 => interrupteddelegate.DynamicInvoke(args);

		public System.Object Clone()
			 => interrupteddelegate.Clone();





    }

    internal static class InterruptedDelegate_
    {
        public static dynamic GetTSObject(InterruptedDelegate dynObject)
        {
            return dynObject.interrupteddelegate;
        }

        public static InterruptedDelegate FromTSObject(dynamic tsObject)
        {
            return new InterruptedDelegate(tsObject);
        }
    }




    }

    internal static class Events_
    {
        public static dynamic GetTSObject(Events dynObject)
        {
            return dynObject.events;
        }

        public static Events FromTSObject(dynamic tsObject)
        {
            return new Events(tsObject);
        }
    }


}
    
