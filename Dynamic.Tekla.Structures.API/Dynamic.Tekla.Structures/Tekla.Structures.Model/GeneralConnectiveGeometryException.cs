//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class GeneralConnectiveGeometryException 
    {

		public System.String Message
		{
			get => generalconnectivegeometryexception.Message;
			set { generalconnectivegeometryexception.Message = value; }
		}

		public System.Collections.IDictionary Data
		{
			get => generalconnectivegeometryexception.Data;
			set { generalconnectivegeometryexception.Data = value; }
		}

		public System.Exception InnerException
		{
			get => generalconnectivegeometryexception.InnerException;
			set { generalconnectivegeometryexception.InnerException = value; }
		}

		public System.Reflection.MethodBase TargetSite
		{
			get => generalconnectivegeometryexception.TargetSite;
			set { generalconnectivegeometryexception.TargetSite = value; }
		}

		public System.String StackTrace
		{
			get => generalconnectivegeometryexception.StackTrace;
			set { generalconnectivegeometryexception.StackTrace = value; }
		}

		public System.String HelpLink
		{
			get => generalconnectivegeometryexception.HelpLink;
			set { generalconnectivegeometryexception.HelpLink = value; }
		}

		public System.String Source
		{
			get => generalconnectivegeometryexception.Source;
			set { generalconnectivegeometryexception.Source = value; }
		}

		public System.Int32 HResult
		{
			get => generalconnectivegeometryexception.HResult;
			set { generalconnectivegeometryexception.HResult = value; }
		}

        

        internal dynamic generalconnectivegeometryexception;
        
        public GeneralConnectiveGeometryException()
        {
            this.generalconnectivegeometryexception =  TSActivator.CreateInstance("Tekla.Structures.Model.GeneralConnectiveGeometryException");
        }

        internal GeneralConnectiveGeometryException(dynamic tsObject)
        {
            this.generalconnectivegeometryexception = tsObject;
        }

		public System.Exception GetBaseException()
			 => generalconnectivegeometryexception.GetBaseException();

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => generalconnectivegeometryexception.GetObjectData(info, context);





    }

    internal static class GeneralConnectiveGeometryException_
    {
        public static dynamic GetTSObject(GeneralConnectiveGeometryException dynObject)
        {
            return dynObject.generalconnectivegeometryexception;
        }

        public static GeneralConnectiveGeometryException FromTSObject(dynamic tsObject)
        {
            return new GeneralConnectiveGeometryException(tsObject);
        }
    }


}
    
