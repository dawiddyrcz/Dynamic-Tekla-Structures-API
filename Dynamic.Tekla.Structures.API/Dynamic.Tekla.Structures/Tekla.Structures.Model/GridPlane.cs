//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public  class GridPlane  : Dynamic.Tekla.Structures.Model.GridSurface
    {

		public Dynamic.Tekla.Structures.Model.Plane Plane
		{
			get => Dynamic.Tekla.Structures.Model.Plane_.FromTSObject(teklaObject.Plane);
			set { teklaObject.Plane = Dynamic.Tekla.Structures.Model.Plane_.GetTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.Grid Father
		{
			get => Dynamic.Tekla.Structures.Model.Grid_.FromTSObject(teklaObject.Father);
			set { teklaObject.Father = Dynamic.Tekla.Structures.Model.Grid_.GetTSObject(value); }
		}

		public System.String Label
		{
			get => teklaObject.Label;
			set { teklaObject.Label = value; }
		}

		public System.Boolean IsMagnetic
		{
			get => teklaObject.IsMagnetic;
			set { teklaObject.IsMagnetic = value; }
		}

		public System.Double ExtensionLeft
		{
			get => teklaObject.ExtensionLeft;
			set { teklaObject.ExtensionLeft = value; }
		}

		public System.Double ExtensionRight
		{
			get => teklaObject.ExtensionRight;
			set { teklaObject.ExtensionRight = value; }
		}

		public System.Double ExtensionBelow
		{
			get => teklaObject.ExtensionBelow;
			set { teklaObject.ExtensionBelow = value; }
		}

		public System.Double ExtensionAbove
		{
			get => teklaObject.ExtensionAbove;
			set { teklaObject.ExtensionAbove = value; }
		}

		public System.Boolean DrawingVisibility
		{
			get => teklaObject.DrawingVisibility;
			set { teklaObject.DrawingVisibility = value; }
		}

		public System.Int32 Color
		{
			get => teklaObject.Color;
			set { teklaObject.Color = value; }
		}

		public System.Double ExtensionForMagneticArea
		{
			get => teklaObject.ExtensionForMagneticArea;
			set { teklaObject.ExtensionForMagneticArea = value; }
		}

        

        

		public GridPlane()
		{
			this.teklaObject = TSActivator.CreateInstance("Tekla.Structures.Model.GridPlane");
		}
		public GridPlane(Dynamic.Tekla.Structures.Model.Plane Plane, System.String Label)
		{
			var args = new object[2];
			args[0] = Dynamic.Tekla.Structures.Model.Plane_.GetTSObject(Plane);
			args[1] = Label;
			this.teklaObject = TSActivator.CreateInstance("Tekla.Structures.Model.GridPlane", args);
		}

		public System.Boolean Insert()
			 => teklaObject.Insert();

		public System.Boolean Select()
			 => teklaObject.Select();

		public System.Boolean Delete()
			 => teklaObject.Delete();

		public System.Boolean Modify()
			 => teklaObject.Modify();





    }

    internal static class GridPlane_
    {
        public static dynamic GetTSObject(GridPlane dynObject)
        {
            return dynObject.teklaObject;
        }

        public static GridPlane FromTSObject(dynamic tsObject)
        {
            var typeName = "Dynamic." + tsObject.GetType().FullName;
            var type = System.Reflection.Assembly.GetExecutingAssembly().GetType(typeName);
            var dynObject = (Tekla.Structures.Model.GridPlane)System.Activator.CreateInstance(type);
            dynObject.teklaObject = tsObject;
            return dynObject;
        }
    }


}
    
