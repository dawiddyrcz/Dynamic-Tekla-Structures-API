//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public abstract class IGeometryNodeVisitor 
    {

        

        internal dynamic teklaObject;


		public void Visit(Dynamic.Tekla.Structures.Model.PolygonNode node)
			 => teklaObject.Visit(Dynamic.Tekla.Structures.Model.PolygonNode_.GetTSObject(node));

		public void Visit(Dynamic.Tekla.Structures.Model.CylindricalSurfaceNode node)
			 => teklaObject.Visit(Dynamic.Tekla.Structures.Model.CylindricalSurfaceNode_.GetTSObject(node));





    }

    internal static class IGeometryNodeVisitor_
    {
        public static dynamic GetTSObject(IGeometryNodeVisitor dynObject)
        {
            return dynObject.teklaObject;
        }

        public static IGeometryNodeVisitor FromTSObject(dynamic tsObject)
        {
            var typeName = "Dynamic." + tsObject.GetType().FullName;
            var type = System.Reflection.Assembly.GetExecutingAssembly().GetType(typeName);
            var dynObject = (Tekla.Structures.Model.IGeometryNodeVisitor)System.Activator.CreateInstance(type);
            dynObject.teklaObject = tsObject;
            return dynObject;
        }
    }


}
    
