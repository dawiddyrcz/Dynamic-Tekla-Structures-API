//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class InvalidCurveCombinationException 
    {

		public System.String Message
		{
			get => invalidcurvecombinationexception.Message;
			set { invalidcurvecombinationexception.Message = value; }
		}

		public System.Collections.IDictionary Data
		{
			get => invalidcurvecombinationexception.Data;
			set { invalidcurvecombinationexception.Data = value; }
		}

		public System.Exception InnerException
		{
			get => invalidcurvecombinationexception.InnerException;
			set { invalidcurvecombinationexception.InnerException = value; }
		}

		public System.Reflection.MethodBase TargetSite
		{
			get => invalidcurvecombinationexception.TargetSite;
			set { invalidcurvecombinationexception.TargetSite = value; }
		}

		public System.String StackTrace
		{
			get => invalidcurvecombinationexception.StackTrace;
			set { invalidcurvecombinationexception.StackTrace = value; }
		}

		public System.String HelpLink
		{
			get => invalidcurvecombinationexception.HelpLink;
			set { invalidcurvecombinationexception.HelpLink = value; }
		}

		public System.String Source
		{
			get => invalidcurvecombinationexception.Source;
			set { invalidcurvecombinationexception.Source = value; }
		}

		public System.Int32 HResult
		{
			get => invalidcurvecombinationexception.HResult;
			set { invalidcurvecombinationexception.HResult = value; }
		}

        

        internal dynamic invalidcurvecombinationexception;
        
        public InvalidCurveCombinationException()
        {
            this.invalidcurvecombinationexception =  TSActivator.CreateInstance("Tekla.Structures.Model.InvalidCurveCombinationException");
        }

        internal InvalidCurveCombinationException(dynamic tsObject)
        {
            this.invalidcurvecombinationexception = tsObject;
        }

		public System.Exception GetBaseException()
			 => invalidcurvecombinationexception.GetBaseException();

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => invalidcurvecombinationexception.GetObjectData(info, context);





    }

    internal static class InvalidCurveCombinationException_
    {
        public static dynamic GetTSObject(InvalidCurveCombinationException dynObject)
        {
            return dynObject.invalidcurvecombinationexception;
        }

        public static InvalidCurveCombinationException FromTSObject(dynamic tsObject)
        {
            return new InvalidCurveCombinationException(tsObject);
        }
    }


}
    
