//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class Load 
    {

		public Dynamic.Tekla.Structures.Identifier FatherId
		{
			get => new Dynamic.Tekla.Structures.Identifier(load.FatherId);
			set { load.FatherId = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.Load.LoadSpanningEnum Spanning
		{
			get => Dynamic.Tekla.Structures.Model.Load.LoadSpanningEnum_.FromTSObject(load.Spanning);
			set { load.Spanning = Dynamic.Tekla.Structures.Model.Load.LoadSpanningEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Vector PrimaryAxisDirection
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Vector(load.PrimaryAxisDirection);
			set { load.PrimaryAxisDirection = value.GetTSObject(); }
		}

		public System.Boolean AutomaticPrimaryAxisWeight
		{
			get => load.AutomaticPrimaryAxisWeight;
			set { load.AutomaticPrimaryAxisWeight = value; }
		}

		public System.Double Weight
		{
			get => load.Weight;
			set { load.Weight = value; }
		}

		public System.Double LoadDispersionAngle
		{
			get => load.LoadDispersionAngle;
			set { load.LoadDispersionAngle = value; }
		}

		public System.Boolean CreateFixedSupportConditionsAutomatically
		{
			get => load.CreateFixedSupportConditionsAutomatically;
			set { load.CreateFixedSupportConditionsAutomatically = value; }
		}

		public Dynamic.Tekla.Structures.Model.Load.LoadAttachmentEnum LoadAttachment
		{
			get => Dynamic.Tekla.Structures.Model.Load.LoadAttachmentEnum_.FromTSObject(load.LoadAttachment);
			set { load.LoadAttachment = Dynamic.Tekla.Structures.Model.Load.LoadAttachmentEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.Load.LoadPartNamesEnum PartNames
		{
			get => Dynamic.Tekla.Structures.Model.Load.LoadPartNamesEnum_.FromTSObject(load.PartNames);
			set { load.PartNames = Dynamic.Tekla.Structures.Model.Load.LoadPartNamesEnum_.FromTSObject(value); }
		}

		public System.String PartFilter
		{
			get => load.PartFilter;
			set { load.PartFilter = value; }
		}

		public System.Double BoundingBoxDx
		{
			get => load.BoundingBoxDx;
			set { load.BoundingBoxDx = value; }
		}

		public System.Double BoundingBoxDy
		{
			get => load.BoundingBoxDy;
			set { load.BoundingBoxDy = value; }
		}

		public System.Double BoundingBoxDz
		{
			get => load.BoundingBoxDz;
			set { load.BoundingBoxDz = value; }
		}

		public Dynamic.Tekla.Structures.Model.LoadGroup Group
		{
			get => new Dynamic.Tekla.Structures.Model.LoadGroup(load.Group);
			set { load.Group = value.GetTSObject(); }
		}

		public System.DateTime ModificationTime
		{
			get => load.ModificationTime;
			set { load.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => load.IsUpToDate;
			set { load.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => new Dynamic.Tekla.Structures.Identifier(load.Identifier);
			set { load.Identifier = value.GetTSObject(); }
		}

        

        dynamic load;
        
        private Load()
        {
            this.load =  TSActivator.CreateInstance("Tekla.Structures.Model.Load");
        }

        public Load(dynamic tsObject)
        {
            this.load = tsObject;
        }

        internal dynamic GetTSObject() => load;

		public System.Boolean Insert()
			 => load.Insert();

		public System.Boolean Select()
			 => load.Select();

		public System.Boolean Modify()
			 => load.Modify();

		public System.Boolean Delete()
			 => load.Delete();

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(load.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => new Dynamic.Tekla.Structures.Model.BaseComponent(load.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(load.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(System.Collections.Hashtable values)
			 => load.GetAllUserProperties(values);

		public System.Boolean GetIntegerUserProperties(System.Collections.Hashtable values)
			 => load.GetIntegerUserProperties(values);

		public System.Boolean GetDoubleUserProperties(System.Collections.Hashtable values)
			 => load.GetDoubleUserProperties(values);

		public System.Boolean GetStringUserProperties(System.Collections.Hashtable values)
			 => load.GetStringUserProperties(values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, System.Collections.Hashtable values)
			 => load.GetAllReportProperties(stringNames, doubleNames, integerNames, values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => load.GetIntegerReportProperties(names, values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => load.GetDoubleReportProperties(names, values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => load.GetStringReportProperties(names, values);

		public System.Boolean GetUserProperty(System.String name, System.String value)
			 => load.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.String value)
			 => load.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Double value)
			 => load.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Double value)
			 => load.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Int32 value)
			 => load.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Int32 value)
			 => load.GetReportProperty(name, value);

		public System.Boolean GetDynamicStringProperty(System.String name, System.String value)
			 => load.GetDynamicStringProperty(name, value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => load.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => load.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => load.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => load.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(load.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => load.SetPhase(phase.GetTSObject());

		public System.Boolean GetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => load.GetPhase(phase.GetTSObject());

		public System.Boolean SetLabel(System.String label)
			 => load.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => load.CompareTo(obj);




    public struct LoadSpanningEnum
    {
       
    }

    internal static class LoadSpanningEnum_
    {
        public static dynamic GetTSObject(LoadSpanningEnum dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.LoadSpanningEnum");

            return tsType;
        }
    
        public static LoadSpanningEnum FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new LoadSpanningEnum();
 
            return dynStruct;
        }
    }


    public struct LoadAttachmentEnum
    {
       
    }

    internal static class LoadAttachmentEnum_
    {
        public static dynamic GetTSObject(LoadAttachmentEnum dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.LoadAttachmentEnum");

            return tsType;
        }
    
        public static LoadAttachmentEnum FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new LoadAttachmentEnum();
 
            return dynStruct;
        }
    }


    public struct LoadPartNamesEnum
    {
       
    }

    internal static class LoadPartNamesEnum_
    {
        public static dynamic GetTSObject(LoadPartNamesEnum dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.LoadPartNamesEnum");

            return tsType;
        }
    
        public static LoadPartNamesEnum FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new LoadPartNamesEnum();
 
            return dynStruct;
        }
    }



    }

}
    
