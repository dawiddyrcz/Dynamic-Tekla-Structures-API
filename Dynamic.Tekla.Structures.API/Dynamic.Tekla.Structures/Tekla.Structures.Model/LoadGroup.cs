//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class LoadGroup 
    {

		public System.String GroupName
		{
			get => loadgroup.GroupName;
			set { loadgroup.GroupName = value; }
		}

		public Dynamic.Tekla.Structures.Model.LoadGroup.LoadGroupType GroupType
		{
			get => Dynamic.Tekla.Structures.Model.LoadGroup.LoadGroupType_.FromTSObject(loadgroup.GroupType);
			set { loadgroup.GroupType = Dynamic.Tekla.Structures.Model.LoadGroup.LoadGroupType_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.LoadGroup.LoadGroupDirection Direction
		{
			get => Dynamic.Tekla.Structures.Model.LoadGroup.LoadGroupDirection_.FromTSObject(loadgroup.Direction);
			set { loadgroup.Direction = Dynamic.Tekla.Structures.Model.LoadGroup.LoadGroupDirection_.FromTSObject(value); }
		}

		public System.Int32 Compatible
		{
			get => loadgroup.Compatible;
			set { loadgroup.Compatible = value; }
		}

		public System.Int32 Incompatible
		{
			get => loadgroup.Incompatible;
			set { loadgroup.Incompatible = value; }
		}

		public Dynamic.Tekla.Structures.Model.LoadGroup.Colors Color
		{
			get => Dynamic.Tekla.Structures.Model.LoadGroup.Colors_.FromTSObject(loadgroup.Color);
			set { loadgroup.Color = Dynamic.Tekla.Structures.Model.LoadGroup.Colors_.FromTSObject(value); }
		}

		public System.DateTime ModificationTime
		{
			get => loadgroup.ModificationTime;
			set { loadgroup.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => loadgroup.IsUpToDate;
			set { loadgroup.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => new Dynamic.Tekla.Structures.Identifier(loadgroup.Identifier);
			set { loadgroup.Identifier = value.GetTSObject(); }
		}

        

        dynamic loadgroup;
        
        public LoadGroup()
        {
            this.loadgroup =  TSActivator.CreateInstance("Tekla.Structures.Model.LoadGroup");
        }

        public LoadGroup(dynamic tsObject)
        {
            this.loadgroup = tsObject;
        }

        internal dynamic GetTSObject() => loadgroup;

		public System.Boolean Insert()
			 => loadgroup.Insert();

		public System.Boolean Select()
			 => loadgroup.Select();

		public System.Boolean Modify()
			 => loadgroup.Modify();

		public System.Boolean Delete()
			 => loadgroup.Delete();

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(loadgroup.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => new Dynamic.Tekla.Structures.Model.BaseComponent(loadgroup.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(loadgroup.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(System.Collections.Hashtable values)
			 => loadgroup.GetAllUserProperties(values);

		public System.Boolean GetIntegerUserProperties(System.Collections.Hashtable values)
			 => loadgroup.GetIntegerUserProperties(values);

		public System.Boolean GetDoubleUserProperties(System.Collections.Hashtable values)
			 => loadgroup.GetDoubleUserProperties(values);

		public System.Boolean GetStringUserProperties(System.Collections.Hashtable values)
			 => loadgroup.GetStringUserProperties(values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, System.Collections.Hashtable values)
			 => loadgroup.GetAllReportProperties(stringNames, doubleNames, integerNames, values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => loadgroup.GetIntegerReportProperties(names, values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => loadgroup.GetDoubleReportProperties(names, values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => loadgroup.GetStringReportProperties(names, values);

		public System.Boolean GetUserProperty(System.String name, System.String value)
			 => loadgroup.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.String value)
			 => loadgroup.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Double value)
			 => loadgroup.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Double value)
			 => loadgroup.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Int32 value)
			 => loadgroup.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Int32 value)
			 => loadgroup.GetReportProperty(name, value);

		public System.Boolean GetDynamicStringProperty(System.String name, System.String value)
			 => loadgroup.GetDynamicStringProperty(name, value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => loadgroup.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => loadgroup.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => loadgroup.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => loadgroup.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(loadgroup.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => loadgroup.SetPhase(phase.GetTSObject());

		public System.Boolean GetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => loadgroup.GetPhase(phase.GetTSObject());

		public System.Boolean SetLabel(System.String label)
			 => loadgroup.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => loadgroup.CompareTo(obj);




    public struct LoadGroupType
    {
       
    }

    internal static class LoadGroupType_
    {
        public static dynamic GetTSObject(LoadGroupType dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.LoadGroupType");

            return tsType;
        }
    
        public static LoadGroupType FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new LoadGroupType();
 
            return dynStruct;
        }
    }


    public struct Colors
    {
       
    }

    internal static class Colors_
    {
        public static dynamic GetTSObject(Colors dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.Colors");

            return tsType;
        }
    
        public static Colors FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new Colors();
 
            return dynStruct;
        }
    }


    public struct LoadGroupDirection
    {
       
    }

    internal static class LoadGroupDirection_
    {
        public static dynamic GetTSObject(LoadGroupDirection dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.LoadGroupDirection");

            return tsType;
        }
    
        public static LoadGroupDirection FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new LoadGroupDirection();
 
            return dynStruct;
        }
    }



    }

}
    
