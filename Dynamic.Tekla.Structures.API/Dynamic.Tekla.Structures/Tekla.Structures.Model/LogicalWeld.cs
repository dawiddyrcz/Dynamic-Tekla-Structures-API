//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public  class LogicalWeld  : Dynamic.Tekla.Structures.Model.BaseWeld
    {

        

        

		public LogicalWeld() {}
		public LogicalWeld(Dynamic.Tekla.Structures.Model.BaseWeld MainWeld)
		{
			var args = new object[1];
			args[0] = Dynamic.Tekla.Structures.Model.BaseWeld_.GetTSObject(MainWeld);
			this.teklaObject = TSActivator.CreateInstance("Tekla.Structures.Model.LogicalWeld", args);
		}

		public System.Boolean AddWeld(Dynamic.Tekla.Structures.Model.BaseWeld Weld)
			 => teklaObject.AddWeld(Dynamic.Tekla.Structures.Model.BaseWeld_.GetTSObject(Weld));

		public Dynamic.Tekla.Structures.Model.BaseWeld GetMainWeld()
			 => Dynamic.Tekla.Structures.Model.BaseWeld_.FromTSObject(teklaObject.GetMainWeld());

		public System.Boolean SetMainWeld(Dynamic.Tekla.Structures.Model.BaseWeld Weld)
			 => teklaObject.SetMainWeld(Dynamic.Tekla.Structures.Model.BaseWeld_.GetTSObject(Weld));

		public System.Boolean RemoveWeld(Dynamic.Tekla.Structures.Model.BaseWeld Weld)
			 => teklaObject.RemoveWeld(Dynamic.Tekla.Structures.Model.BaseWeld_.GetTSObject(Weld));

		public System.Boolean Explode()
			 => teklaObject.Explode();

		public System.Boolean Insert()
			 => teklaObject.Insert();

		public System.Boolean Select()
			 => teklaObject.Select();

		public System.Boolean Select(Dynamic.Tekla.Structures.Model.BaseWeld ChildWeld)
			 => teklaObject.Select(Dynamic.Tekla.Structures.Model.BaseWeld_.GetTSObject(ChildWeld));

		public System.Boolean Modify()
			 => teklaObject.Modify();

		public System.Boolean Delete()
			 => teklaObject.Delete();





    }

    internal static class LogicalWeld_
    {
        public static dynamic GetTSObject(LogicalWeld dynObject)
        {
            return dynObject.teklaObject;
        }

        public static LogicalWeld FromTSObject(dynamic tsObject)
        {
            var typeName = "Dynamic." + tsObject.GetType().FullName;
            var type = System.Reflection.Assembly.GetExecutingAssembly().GetType(typeName);
            var dynObject = (Tekla.Structures.Model.LogicalWeld)System.Activator.CreateInstance(type);
            dynObject.teklaObject = tsObject;
            return dynObject;
        }
    }


}
    
