//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class ModelHandler 
    {

        

        internal dynamic modelhandler;
        
        public ModelHandler()
        {
            this.modelhandler =  TSActivator.CreateInstance("Tekla.Structures.Model.ModelHandler");
        }

        internal ModelHandler(dynamic tsObject)
        {
            this.modelhandler = tsObject;
        }

		public System.Boolean CreateNewSingleUserModel(System.String ModelName, System.String ModelFolder, System.String Template)
			 => modelhandler.CreateNewSingleUserModel(ModelName, ModelFolder, Template);

		public System.Boolean CreateNewMultiUserModel(System.String ModelName, System.String ModelFolder, System.String ServerName)
			 => modelhandler.CreateNewMultiUserModel(ModelName, ModelFolder, ServerName);

		public System.Boolean Save(System.String Comment, System.String User)
			 => modelhandler.Save(Comment, User);

		public System.Boolean Open(System.String ModelFolder, System.Boolean OpenAutoSaved)
			 => modelhandler.Open(ModelFolder, OpenAutoSaved);

		public void Close()
			 => modelhandler.Close();

		public System.Boolean IsModelSaved()
			 => modelhandler.IsModelSaved();

		public System.Boolean IsModelAutoSaved(System.String ModelFolder)
			 => modelhandler.IsModelAutoSaved(ModelFolder);





    }

    internal static class ModelHandler_
    {
        public static dynamic GetTSObject(ModelHandler dynObject)
        {
            return dynObject.modelhandler;
        }

        public static ModelHandler FromTSObject(dynamic tsObject)
        {
            return new ModelHandler(tsObject);
        }
    }


}
    
