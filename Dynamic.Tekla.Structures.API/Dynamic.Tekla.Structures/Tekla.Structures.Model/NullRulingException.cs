//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class NullRulingException 
    {

		public System.String Message
		{
			get => nullrulingexception.Message;
			set { nullrulingexception.Message = value; }
		}

		public System.Collections.IDictionary Data
		{
			get => nullrulingexception.Data;
			set { nullrulingexception.Data = value; }
		}

		public System.Exception InnerException
		{
			get => nullrulingexception.InnerException;
			set { nullrulingexception.InnerException = value; }
		}

		public System.Reflection.MethodBase TargetSite
		{
			get => nullrulingexception.TargetSite;
			set { nullrulingexception.TargetSite = value; }
		}

		public System.String StackTrace
		{
			get => nullrulingexception.StackTrace;
			set { nullrulingexception.StackTrace = value; }
		}

		public System.String HelpLink
		{
			get => nullrulingexception.HelpLink;
			set { nullrulingexception.HelpLink = value; }
		}

		public System.String Source
		{
			get => nullrulingexception.Source;
			set { nullrulingexception.Source = value; }
		}

		public System.Int32 HResult
		{
			get => nullrulingexception.HResult;
			set { nullrulingexception.HResult = value; }
		}

        

        dynamic nullrulingexception;
        
        public NullRulingException()
        {
            this.nullrulingexception =  TSActivator.CreateInstance("Tekla.Structures.Model.NullRulingException");
        }

        public NullRulingException(dynamic tsObject)
        {
            this.nullrulingexception = tsObject;
        }

        internal dynamic GetTSObject() => nullrulingexception;

		public System.Exception GetBaseException()
			 => nullrulingexception.GetBaseException();

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => nullrulingexception.GetObjectData(info, context);





    }

}
    
