//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public  class Phase 
    {

		public System.Int32 PhaseNumber
		{
			get => teklaObject.PhaseNumber;
			set { teklaObject.PhaseNumber = value; }
		}

		public System.String PhaseName
		{
			get => teklaObject.PhaseName;
			set { teklaObject.PhaseName = value; }
		}

		public System.String PhaseComment
		{
			get => teklaObject.PhaseComment;
			set { teklaObject.PhaseComment = value; }
		}

		public System.Int32 IsCurrentPhase
		{
			get => teklaObject.IsCurrentPhase;
			set { teklaObject.IsCurrentPhase = value; }
		}

        

        internal dynamic teklaObject;

		public Phase()
		{
			this.teklaObject = TSActivator.CreateInstance("Tekla.Structures.Model.Phase");
		}
		public Phase(System.Int32 PhaseNumber)
		{
			var args = new object[1];
			args[0] = PhaseNumber;
			this.teklaObject = TSActivator.CreateInstance("Tekla.Structures.Model.Phase", args);
		}
		public Phase(System.Int32 PhaseNumber, System.String PhaseName, System.String PhaseComment, System.Int32 IsCurrentPhase)
		{
			var args = new object[4];
			args[0] = PhaseNumber;
			args[1] = PhaseName;
			args[2] = PhaseComment;
			args[3] = IsCurrentPhase;
			this.teklaObject = TSActivator.CreateInstance("Tekla.Structures.Model.Phase", args);
		}

		public System.Boolean Insert()
			 => teklaObject.Insert();

		public System.Boolean Select()
			 => teklaObject.Select();

		public System.Boolean Modify()
			 => teklaObject.Modify();

		public System.Boolean Delete()
			 => teklaObject.Delete();

		public System.Boolean SetUserProperty(System.String Name, System.String Value)
			 => teklaObject.SetUserProperty(Name, Value);

		public System.Boolean SetUserProperty(System.String Name, System.Double Value)
			 => teklaObject.SetUserProperty(Name, Value);

		public System.Boolean SetUserProperty(System.String Name, System.Int32 Value)
			 => teklaObject.SetUserProperty(Name, Value);

		public System.Boolean GetUserProperty(System.String Name, System.String Value)
			 => teklaObject.GetUserProperty(Name, Value);

		public System.Boolean GetUserProperty(System.String Name, System.Double Value)
			 => teklaObject.GetUserProperty(Name, Value);

		public System.Boolean GetUserProperty(System.String Name, System.Int32 Value)
			 => teklaObject.GetUserProperty(Name, Value);





    }

    internal static class Phase_
    {
        public static dynamic GetTSObject(Phase dynObject)
        {
            return dynObject.teklaObject;
        }

        public static Phase FromTSObject(dynamic tsObject)
        {
            var typeName = "Dynamic." + tsObject.GetType().FullName;
            var type = System.Reflection.Assembly.GetExecutingAssembly().GetType(typeName);
            var dynObject = (Tekla.Structures.Model.Phase)System.Activator.CreateInstance(type);
            dynObject.teklaObject = tsObject;
            return dynObject;
        }
    }


}
    
