//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public  class Profile 
    {

		public System.String ProfileString
		{
			get => teklaObject.ProfileString;
			set { teklaObject.ProfileString = value; }
		}

        

        internal dynamic teklaObject;

		public Profile()
		{
			this.teklaObject = TSActivator.CreateInstance("Tekla.Structures.Model.Profile");
		}

		public System.String ParseProfileString(System.String profileString)
			 => teklaObject.ParseProfileString(profileString);

		public System.String FormatProfileString(System.String profileString)
			 => teklaObject.FormatProfileString(profileString);





    }

    internal static class Profile_
    {
        public static dynamic GetTSObject(Profile dynObject)
        {
            return dynObject.teklaObject;
        }

        public static Profile FromTSObject(dynamic tsObject)
        {
            var typeName = "Dynamic." + tsObject.GetType().FullName;
            var type = System.Reflection.Assembly.GetExecutingAssembly().GetType(typeName);
            var dynObject = (Tekla.Structures.Model.Profile)System.Activator.CreateInstance(type);
            dynObject.teklaObject = tsObject;
            return dynObject;
        }
    }


}
    
