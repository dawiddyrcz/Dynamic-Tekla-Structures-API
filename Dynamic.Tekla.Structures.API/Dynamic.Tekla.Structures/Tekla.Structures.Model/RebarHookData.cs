//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class RebarHookData 
    {

		public Dynamic.Tekla.Structures.Model.RebarHookData.RebarHookShapeEnum Shape
		{
			get => Dynamic.Tekla.Structures.Model.RebarHookData.RebarHookShapeEnum_.FromTSObject(rebarhookdata.Shape);
			set { rebarhookdata.Shape = Dynamic.Tekla.Structures.Model.RebarHookData.RebarHookShapeEnum_.FromTSObject(value); }
		}

		public System.Double Angle
		{
			get => rebarhookdata.Angle;
			set { rebarhookdata.Angle = value; }
		}

		public System.Double Radius
		{
			get => rebarhookdata.Radius;
			set { rebarhookdata.Radius = value; }
		}

		public System.Double Length
		{
			get => rebarhookdata.Length;
			set { rebarhookdata.Length = value; }
		}

        

        dynamic rebarhookdata;
        
        public RebarHookData()
        {
            this.rebarhookdata =  TSActivator.CreateInstance("Tekla.Structures.Model.RebarHookData");
        }

        public RebarHookData(dynamic tsObject)
        {
            this.rebarhookdata = tsObject;
        }

        internal dynamic GetTSObject() => rebarhookdata;




    public struct RebarHookShapeEnum
    {
       
    }

    internal static class RebarHookShapeEnum_
    {
        public static dynamic GetTSObject(RebarHookShapeEnum dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.RebarHookShapeEnum");

            return tsType;
        }
    
        public static RebarHookShapeEnum FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new RebarHookShapeEnum();
 
            return dynStruct;
        }
    }



    }

}
    
