//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class RebarLegFace 
    {

		public System.Int32 Id
		{
			get => rebarlegface.Id;
			set { rebarlegface.Id = value; }
		}

		public System.Double AdditonalOffset
		{
			get => rebarlegface.AdditonalOffset;
			set { rebarlegface.AdditonalOffset = value; }
		}

		public System.Int32 LayerOrderNumber
		{
			get => rebarlegface.LayerOrderNumber;
			set { rebarlegface.LayerOrderNumber = value; }
		}

		public System.Boolean Reversed
		{
			get => rebarlegface.Reversed;
			set { rebarlegface.Reversed = value; }
		}

		public Dynamic.Tekla.Structures.Model.Contour Contour
		{
			get => Dynamic.Tekla.Structures.Model.Contour_.FromTSObject(rebarlegface.Contour);
			set { rebarlegface.Contour = Dynamic.Tekla.Structures.Model.Contour_.GetTSObject(value); }
		}

        

        internal dynamic rebarlegface;
        
        public RebarLegFace()
        {
            this.rebarlegface =  TSActivator.CreateInstance("Tekla.Structures.Model.RebarLegFace");
        }

        internal RebarLegFace(dynamic tsObject)
        {
            this.rebarlegface = tsObject;
        }
		public RebarLegFace(Dynamic.Tekla.Structures.Model.Contour contour)
		{
			var args = new object[1];
			args[0] = Dynamic.Tekla.Structures.Model.Contour_.GetTSObject(contour);
			this.rebarlegface = TSActivator.CreateInstance("Tekla.Structures.Model.RebarLegFace", args);
		}





    }

    internal static class RebarLegFace_
    {
        public static dynamic GetTSObject(RebarLegFace dynObject)
        {
            return dynObject.rebarlegface;
        }

        public static RebarLegFace FromTSObject(dynamic tsObject)
        {
            return new RebarLegFace(tsObject);
        }
    }


}
    
