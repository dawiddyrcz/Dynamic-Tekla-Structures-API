//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class RebarMesh 
    {

		public Dynamic.Tekla.Structures.Model.RebarMesh.RebarMeshTypeEnum MeshType
		{
			get => Dynamic.Tekla.Structures.Model.RebarMesh.RebarMeshTypeEnum_.FromTSObject(rebarmesh.MeshType);
			set { rebarmesh.MeshType = Dynamic.Tekla.Structures.Model.RebarMesh.RebarMeshTypeEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.RebarMesh.RebarMeshSpacingMethodEnum LongitudinalSpacingMethod
		{
			get => Dynamic.Tekla.Structures.Model.RebarMesh.RebarMeshSpacingMethodEnum_.FromTSObject(rebarmesh.LongitudinalSpacingMethod);
			set { rebarmesh.LongitudinalSpacingMethod = Dynamic.Tekla.Structures.Model.RebarMesh.RebarMeshSpacingMethodEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.Polygon Polygon
		{
			get => new Dynamic.Tekla.Structures.Model.Polygon(rebarmesh.Polygon);
			set { rebarmesh.Polygon = value.GetTSObject(); }
		}

		public System.Collections.ArrayList LongitudinalDistances
		{
			get => rebarmesh.LongitudinalDistances;
			set { rebarmesh.LongitudinalDistances = value; }
		}

		public System.Collections.ArrayList CrossDistances
		{
			get => rebarmesh.CrossDistances;
			set { rebarmesh.CrossDistances = value; }
		}

		public System.Double FromPlaneOffset
		{
			get => rebarmesh.FromPlaneOffset;
			set { rebarmesh.FromPlaneOffset = value; }
		}

		public System.Double StartFromPlaneOffset
		{
			get => rebarmesh.StartFromPlaneOffset;
			set { rebarmesh.StartFromPlaneOffset = value; }
		}

		public System.Double EndFromPlaneOffset
		{
			get => rebarmesh.EndFromPlaneOffset;
			set { rebarmesh.EndFromPlaneOffset = value; }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Point StartPoint
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Point(rebarmesh.StartPoint);
			set { rebarmesh.StartPoint = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Point EndPoint
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Point(rebarmesh.EndPoint);
			set { rebarmesh.EndPoint = value.GetTSObject(); }
		}

		public System.Double LeftOverhangLongitudinal
		{
			get => rebarmesh.LeftOverhangLongitudinal;
			set { rebarmesh.LeftOverhangLongitudinal = value; }
		}

		public System.Double LeftOverhangCross
		{
			get => rebarmesh.LeftOverhangCross;
			set { rebarmesh.LeftOverhangCross = value; }
		}

		public System.Double RightOverhangLongitudinal
		{
			get => rebarmesh.RightOverhangLongitudinal;
			set { rebarmesh.RightOverhangLongitudinal = value; }
		}

		public System.Double RightOverhangCross
		{
			get => rebarmesh.RightOverhangCross;
			set { rebarmesh.RightOverhangCross = value; }
		}

		public System.String LongitudinalSize
		{
			get => rebarmesh.LongitudinalSize;
			set { rebarmesh.LongitudinalSize = value; }
		}

		public System.String CrossSize
		{
			get => rebarmesh.CrossSize;
			set { rebarmesh.CrossSize = value; }
		}

		public System.Double Width
		{
			get => rebarmesh.Width;
			set { rebarmesh.Width = value; }
		}

		public System.Double Length
		{
			get => rebarmesh.Length;
			set { rebarmesh.Length = value; }
		}

		public System.Boolean CutByFatherPartCuts
		{
			get => rebarmesh.CutByFatherPartCuts;
			set { rebarmesh.CutByFatherPartCuts = value; }
		}

		public System.String CatalogName
		{
			get => rebarmesh.CatalogName;
			set { rebarmesh.CatalogName = value; }
		}

		public Dynamic.Tekla.Structures.Model.RebarMesh.RebarMeshCrossBarLocationEnum CrossBarLocation
		{
			get => Dynamic.Tekla.Structures.Model.RebarMesh.RebarMeshCrossBarLocationEnum_.FromTSObject(rebarmesh.CrossBarLocation);
			set { rebarmesh.CrossBarLocation = Dynamic.Tekla.Structures.Model.RebarMesh.RebarMeshCrossBarLocationEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.RebarHookData StartHook
		{
			get => new Dynamic.Tekla.Structures.Model.RebarHookData(rebarmesh.StartHook);
			set { rebarmesh.StartHook = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.RebarHookData EndHook
		{
			get => new Dynamic.Tekla.Structures.Model.RebarHookData(rebarmesh.EndHook);
			set { rebarmesh.EndHook = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.ModelObject Father
		{
			get => new Dynamic.Tekla.Structures.Model.ModelObject(rebarmesh.Father);
			set { rebarmesh.Father = value.GetTSObject(); }
		}

		public System.String Grade
		{
			get => rebarmesh.Grade;
			set { rebarmesh.Grade = value; }
		}

		public System.String Name
		{
			get => rebarmesh.Name;
			set { rebarmesh.Name = value; }
		}

		public System.Int32 Class
		{
			get => rebarmesh.Class;
			set { rebarmesh.Class = value; }
		}

		public Dynamic.Tekla.Structures.Model.NumberingSeries NumberingSeries
		{
			get => new Dynamic.Tekla.Structures.Model.NumberingSeries(rebarmesh.NumberingSeries);
			set { rebarmesh.NumberingSeries = value.GetTSObject(); }
		}

		public System.Collections.ArrayList OnPlaneOffsets
		{
			get => rebarmesh.OnPlaneOffsets;
			set { rebarmesh.OnPlaneOffsets = value; }
		}

		public Dynamic.Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum StartPointOffsetType
		{
			get => Dynamic.Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum_.FromTSObject(rebarmesh.StartPointOffsetType);
			set { rebarmesh.StartPointOffsetType = Dynamic.Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum_.FromTSObject(value); }
		}

		public System.Double StartPointOffsetValue
		{
			get => rebarmesh.StartPointOffsetValue;
			set { rebarmesh.StartPointOffsetValue = value; }
		}

		public Dynamic.Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum EndPointOffsetType
		{
			get => Dynamic.Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum_.FromTSObject(rebarmesh.EndPointOffsetType);
			set { rebarmesh.EndPointOffsetType = Dynamic.Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum_.FromTSObject(value); }
		}

		public System.Double EndPointOffsetValue
		{
			get => rebarmesh.EndPointOffsetValue;
			set { rebarmesh.EndPointOffsetValue = value; }
		}

		public System.Collections.ArrayList RadiusValues
		{
			get => rebarmesh.RadiusValues;
			set { rebarmesh.RadiusValues = value; }
		}

		public Dynamic.Tekla.Structures.Forming.DeformingType InputPointDeformingState
		{
			get => Dynamic.Tekla.Structures.Forming.DeformingType_.FromTSObject(rebarmesh.InputPointDeformingState);
			set { rebarmesh.InputPointDeformingState = Dynamic.Tekla.Structures.Forming.DeformingType_.FromTSObject(value); }
		}

		public System.DateTime ModificationTime
		{
			get => rebarmesh.ModificationTime;
			set { rebarmesh.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => rebarmesh.IsUpToDate;
			set { rebarmesh.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => new Dynamic.Tekla.Structures.Identifier(rebarmesh.Identifier);
			set { rebarmesh.Identifier = value.GetTSObject(); }
		}

        

        dynamic rebarmesh;
        
        public RebarMesh()
        {
            this.rebarmesh =  TSActivator.CreateInstance("Tekla.Structures.Model.RebarMesh");
        }

        public RebarMesh(dynamic tsObject)
        {
            this.rebarmesh = tsObject;
        }

        internal dynamic GetTSObject() => rebarmesh;

		public System.Boolean Insert()
			 => rebarmesh.Insert();

		public System.Boolean Select()
			 => rebarmesh.Select();

		public System.Boolean Modify()
			 => rebarmesh.Modify();

		public System.Boolean Delete()
			 => rebarmesh.Delete();

		public System.Collections.ArrayList GetRebarGeometries(Dynamic.Tekla.Structures.Model.Reinforcement.RebarGeometryOptionEnum options)
			 => rebarmesh.GetRebarGeometries(options.GetTSObject());

		public System.Collections.ArrayList GetRebarGeometries(System.Boolean withHooks)
			 => rebarmesh.GetRebarGeometries(withHooks);

		public System.Collections.ArrayList GetRebarGeometriesWithoutClashes(System.Boolean withHooks)
			 => rebarmesh.GetRebarGeometriesWithoutClashes(withHooks);

		public System.Boolean IsGeometryValid()
			 => rebarmesh.IsGeometryValid();

		public System.Int32 GetNumberOfRebars()
			 => rebarmesh.GetNumberOfRebars();

		public Dynamic.Tekla.Structures.Model.RebarGeometry GetSingleRebar(System.Int32 index, System.Boolean withHooks)
			 => new Dynamic.Tekla.Structures.Model.RebarGeometry(rebarmesh.GetSingleRebar(index, withHooks));

		public Dynamic.Tekla.Structures.Model.RebarGeometry GetSingleRebarWithoutClash(System.Int32 index, System.Boolean withHooks)
			 => new Dynamic.Tekla.Structures.Model.RebarGeometry(rebarmesh.GetSingleRebarWithoutClash(index, withHooks));

		public Dynamic.Tekla.Structures.Model.Solid GetSolid()
			 => new Dynamic.Tekla.Structures.Model.Solid(rebarmesh.GetSolid());

		public Dynamic.Tekla.Structures.Model.PourObject GetFatherPour()
			 => new Dynamic.Tekla.Structures.Model.PourObject(rebarmesh.GetFatherPour());

		public Dynamic.Tekla.Structures.Model.PourUnit GetFatherPourUnit()
			 => new Dynamic.Tekla.Structures.Model.PourUnit(rebarmesh.GetFatherPourUnit());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(rebarmesh.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => new Dynamic.Tekla.Structures.Model.BaseComponent(rebarmesh.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(rebarmesh.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(System.Collections.Hashtable values)
			 => rebarmesh.GetAllUserProperties(values);

		public System.Boolean GetIntegerUserProperties(System.Collections.Hashtable values)
			 => rebarmesh.GetIntegerUserProperties(values);

		public System.Boolean GetDoubleUserProperties(System.Collections.Hashtable values)
			 => rebarmesh.GetDoubleUserProperties(values);

		public System.Boolean GetStringUserProperties(System.Collections.Hashtable values)
			 => rebarmesh.GetStringUserProperties(values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, System.Collections.Hashtable values)
			 => rebarmesh.GetAllReportProperties(stringNames, doubleNames, integerNames, values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => rebarmesh.GetIntegerReportProperties(names, values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => rebarmesh.GetDoubleReportProperties(names, values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => rebarmesh.GetStringReportProperties(names, values);

		public System.Boolean GetUserProperty(System.String name, System.String value)
			 => rebarmesh.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.String value)
			 => rebarmesh.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Double value)
			 => rebarmesh.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Double value)
			 => rebarmesh.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Int32 value)
			 => rebarmesh.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Int32 value)
			 => rebarmesh.GetReportProperty(name, value);

		public System.Boolean GetDynamicStringProperty(System.String name, System.String value)
			 => rebarmesh.GetDynamicStringProperty(name, value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => rebarmesh.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => rebarmesh.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => rebarmesh.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => rebarmesh.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(rebarmesh.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => rebarmesh.SetPhase(phase.GetTSObject());

		public System.Boolean GetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => rebarmesh.GetPhase(phase.GetTSObject());

		public System.Boolean SetLabel(System.String label)
			 => rebarmesh.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => rebarmesh.CompareTo(obj);




    public struct RebarMeshTypeEnum
    {
       
    }

    internal static class RebarMeshTypeEnum_
    {
        public static dynamic GetTSObject(RebarMeshTypeEnum dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.RebarMeshTypeEnum");

            return tsType;
        }
    
        public static RebarMeshTypeEnum FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new RebarMeshTypeEnum();
 
            return dynStruct;
        }
    }


    public struct RebarMeshSpacingMethodEnum
    {
       
    }

    internal static class RebarMeshSpacingMethodEnum_
    {
        public static dynamic GetTSObject(RebarMeshSpacingMethodEnum dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.RebarMeshSpacingMethodEnum");

            return tsType;
        }
    
        public static RebarMeshSpacingMethodEnum FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new RebarMeshSpacingMethodEnum();
 
            return dynStruct;
        }
    }


    public struct RebarMeshCrossBarLocationEnum
    {
       
    }

    internal static class RebarMeshCrossBarLocationEnum_
    {
        public static dynamic GetTSObject(RebarMeshCrossBarLocationEnum dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.RebarMeshCrossBarLocationEnum");

            return tsType;
        }
    
        public static RebarMeshCrossBarLocationEnum FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new RebarMeshCrossBarLocationEnum();
 
            return dynStruct;
        }
    }



    }

}
    
