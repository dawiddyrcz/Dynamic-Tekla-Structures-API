//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class RebarMesh 
    {

		public Dynamic.Tekla.Structures.Model.RebarMesh.RebarMeshTypeEnum MeshType
		{
			get => Dynamic.Tekla.Structures.Model.RebarMesh.RebarMeshTypeEnum_.FromTSObject(rebarmesh.MeshType);
			set { rebarmesh.MeshType = Dynamic.Tekla.Structures.Model.RebarMesh.RebarMeshTypeEnum_.GetTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.RebarMesh.RebarMeshSpacingMethodEnum LongitudinalSpacingMethod
		{
			get => Dynamic.Tekla.Structures.Model.RebarMesh.RebarMeshSpacingMethodEnum_.FromTSObject(rebarmesh.LongitudinalSpacingMethod);
			set { rebarmesh.LongitudinalSpacingMethod = Dynamic.Tekla.Structures.Model.RebarMesh.RebarMeshSpacingMethodEnum_.GetTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.Polygon Polygon
		{
			get => Dynamic.Tekla.Structures.Model.Polygon_.FromTSObject(rebarmesh.Polygon);
			set { rebarmesh.Polygon = Dynamic.Tekla.Structures.Model.Polygon_.GetTSObject(value); }
		}

		public System.Collections.ArrayList LongitudinalDistances
		{
			get => rebarmesh.LongitudinalDistances;
			set { rebarmesh.LongitudinalDistances = value; }
		}

		public System.Collections.ArrayList CrossDistances
		{
			get => rebarmesh.CrossDistances;
			set { rebarmesh.CrossDistances = value; }
		}

		public System.Double FromPlaneOffset
		{
			get => rebarmesh.FromPlaneOffset;
			set { rebarmesh.FromPlaneOffset = value; }
		}

		public System.Double StartFromPlaneOffset
		{
			get => rebarmesh.StartFromPlaneOffset;
			set { rebarmesh.StartFromPlaneOffset = value; }
		}

		public System.Double EndFromPlaneOffset
		{
			get => rebarmesh.EndFromPlaneOffset;
			set { rebarmesh.EndFromPlaneOffset = value; }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Point StartPoint
		{
			get => Dynamic.Tekla.Structures.Geometry3d.Point_.FromTSObject(rebarmesh.StartPoint);
			set { rebarmesh.StartPoint = Dynamic.Tekla.Structures.Geometry3d.Point_.GetTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Point EndPoint
		{
			get => Dynamic.Tekla.Structures.Geometry3d.Point_.FromTSObject(rebarmesh.EndPoint);
			set { rebarmesh.EndPoint = Dynamic.Tekla.Structures.Geometry3d.Point_.GetTSObject(value); }
		}

		public System.Double LeftOverhangLongitudinal
		{
			get => rebarmesh.LeftOverhangLongitudinal;
			set { rebarmesh.LeftOverhangLongitudinal = value; }
		}

		public System.Double LeftOverhangCross
		{
			get => rebarmesh.LeftOverhangCross;
			set { rebarmesh.LeftOverhangCross = value; }
		}

		public System.Double RightOverhangLongitudinal
		{
			get => rebarmesh.RightOverhangLongitudinal;
			set { rebarmesh.RightOverhangLongitudinal = value; }
		}

		public System.Double RightOverhangCross
		{
			get => rebarmesh.RightOverhangCross;
			set { rebarmesh.RightOverhangCross = value; }
		}

		public System.String LongitudinalSize
		{
			get => rebarmesh.LongitudinalSize;
			set { rebarmesh.LongitudinalSize = value; }
		}

		public System.String CrossSize
		{
			get => rebarmesh.CrossSize;
			set { rebarmesh.CrossSize = value; }
		}

		public System.Double Width
		{
			get => rebarmesh.Width;
			set { rebarmesh.Width = value; }
		}

		public System.Double Length
		{
			get => rebarmesh.Length;
			set { rebarmesh.Length = value; }
		}

		public System.Boolean CutByFatherPartCuts
		{
			get => rebarmesh.CutByFatherPartCuts;
			set { rebarmesh.CutByFatherPartCuts = value; }
		}

		public System.String CatalogName
		{
			get => rebarmesh.CatalogName;
			set { rebarmesh.CatalogName = value; }
		}

		public Dynamic.Tekla.Structures.Model.RebarMesh.RebarMeshCrossBarLocationEnum CrossBarLocation
		{
			get => Dynamic.Tekla.Structures.Model.RebarMesh.RebarMeshCrossBarLocationEnum_.FromTSObject(rebarmesh.CrossBarLocation);
			set { rebarmesh.CrossBarLocation = Dynamic.Tekla.Structures.Model.RebarMesh.RebarMeshCrossBarLocationEnum_.GetTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.RebarHookData StartHook
		{
			get => Dynamic.Tekla.Structures.Model.RebarHookData_.FromTSObject(rebarmesh.StartHook);
			set { rebarmesh.StartHook = Dynamic.Tekla.Structures.Model.RebarHookData_.GetTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.RebarHookData EndHook
		{
			get => Dynamic.Tekla.Structures.Model.RebarHookData_.FromTSObject(rebarmesh.EndHook);
			set { rebarmesh.EndHook = Dynamic.Tekla.Structures.Model.RebarHookData_.GetTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.ModelObject Father
		{
			get => Dynamic.Tekla.Structures.Model.ModelObject_.FromTSObject(rebarmesh.Father);
			set { rebarmesh.Father = Dynamic.Tekla.Structures.Model.ModelObject_.GetTSObject(value); }
		}

		public System.String Grade
		{
			get => rebarmesh.Grade;
			set { rebarmesh.Grade = value; }
		}

		public System.String Name
		{
			get => rebarmesh.Name;
			set { rebarmesh.Name = value; }
		}

		public System.Int32 Class
		{
			get => rebarmesh.Class;
			set { rebarmesh.Class = value; }
		}

		public Dynamic.Tekla.Structures.Model.NumberingSeries NumberingSeries
		{
			get => Dynamic.Tekla.Structures.Model.NumberingSeries_.FromTSObject(rebarmesh.NumberingSeries);
			set { rebarmesh.NumberingSeries = Dynamic.Tekla.Structures.Model.NumberingSeries_.GetTSObject(value); }
		}

		public System.Collections.ArrayList OnPlaneOffsets
		{
			get => rebarmesh.OnPlaneOffsets;
			set { rebarmesh.OnPlaneOffsets = value; }
		}

		public Dynamic.Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum StartPointOffsetType
		{
			get => Dynamic.Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum_.FromTSObject(rebarmesh.StartPointOffsetType);
			set { rebarmesh.StartPointOffsetType = Dynamic.Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum_.GetTSObject(value); }
		}

		public System.Double StartPointOffsetValue
		{
			get => rebarmesh.StartPointOffsetValue;
			set { rebarmesh.StartPointOffsetValue = value; }
		}

		public Dynamic.Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum EndPointOffsetType
		{
			get => Dynamic.Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum_.FromTSObject(rebarmesh.EndPointOffsetType);
			set { rebarmesh.EndPointOffsetType = Dynamic.Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum_.GetTSObject(value); }
		}

		public System.Double EndPointOffsetValue
		{
			get => rebarmesh.EndPointOffsetValue;
			set { rebarmesh.EndPointOffsetValue = value; }
		}

		public System.Collections.ArrayList RadiusValues
		{
			get => rebarmesh.RadiusValues;
			set { rebarmesh.RadiusValues = value; }
		}

		public Dynamic.Tekla.Structures.Forming.DeformingType InputPointDeformingState
		{
			get => Dynamic.Tekla.Structures.Forming.DeformingType_.FromTSObject(rebarmesh.InputPointDeformingState);
			set { rebarmesh.InputPointDeformingState = Dynamic.Tekla.Structures.Forming.DeformingType_.GetTSObject(value); }
		}

		public System.DateTime ModificationTime
		{
			get => rebarmesh.ModificationTime;
			set { rebarmesh.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => rebarmesh.IsUpToDate;
			set { rebarmesh.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => Dynamic.Tekla.Structures.Identifier_.FromTSObject(rebarmesh.Identifier);
			set { rebarmesh.Identifier = Dynamic.Tekla.Structures.Identifier_.GetTSObject(value); }
		}

        

        internal dynamic rebarmesh;
        
        public RebarMesh()
        {
            this.rebarmesh =  TSActivator.CreateInstance("Tekla.Structures.Model.RebarMesh");
        }

        internal RebarMesh(dynamic tsObject)
        {
            this.rebarmesh = tsObject;
        }

		public System.Boolean Insert()
			 => rebarmesh.Insert();

		public System.Boolean Select()
			 => rebarmesh.Select();

		public System.Boolean Modify()
			 => rebarmesh.Modify();

		public System.Boolean Delete()
			 => rebarmesh.Delete();

		public System.Collections.ArrayList GetRebarGeometries(Dynamic.Tekla.Structures.Model.Reinforcement.RebarGeometryOptionEnum options)
			 => rebarmesh.GetRebarGeometries(Dynamic.Tekla.Structures.Model.Reinforcement.RebarGeometryOptionEnum_.GetTSObject(options));

		public System.Collections.ArrayList GetRebarGeometries(System.Boolean withHooks)
			 => rebarmesh.GetRebarGeometries(withHooks);

		public System.Collections.ArrayList GetRebarGeometriesWithoutClashes(System.Boolean withHooks)
			 => rebarmesh.GetRebarGeometriesWithoutClashes(withHooks);

		public System.Boolean IsGeometryValid()
			 => rebarmesh.IsGeometryValid();

		public System.Int32 GetNumberOfRebars()
			 => rebarmesh.GetNumberOfRebars();

		public Dynamic.Tekla.Structures.Model.RebarGeometry GetSingleRebar(System.Int32 index, System.Boolean withHooks)
			 => Dynamic.Tekla.Structures.Model.RebarGeometry_.FromTSObject(rebarmesh.GetSingleRebar(index, withHooks));

		public Dynamic.Tekla.Structures.Model.RebarGeometry GetSingleRebarWithoutClash(System.Int32 index, System.Boolean withHooks)
			 => Dynamic.Tekla.Structures.Model.RebarGeometry_.FromTSObject(rebarmesh.GetSingleRebarWithoutClash(index, withHooks));

		public Dynamic.Tekla.Structures.Model.Solid GetSolid()
			 => Dynamic.Tekla.Structures.Model.Solid_.FromTSObject(rebarmesh.GetSolid());

		public Dynamic.Tekla.Structures.Model.PourObject GetFatherPour()
			 => Dynamic.Tekla.Structures.Model.PourObject_.FromTSObject(rebarmesh.GetFatherPour());

		public Dynamic.Tekla.Structures.Model.PourUnit GetFatherPourUnit()
			 => Dynamic.Tekla.Structures.Model.PourUnit_.FromTSObject(rebarmesh.GetFatherPourUnit());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => Dynamic.Tekla.Structures.Model.ModelObjectEnumerator_.FromTSObject(rebarmesh.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => Dynamic.Tekla.Structures.Model.BaseComponent_.FromTSObject(rebarmesh.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => Dynamic.Tekla.Structures.Model.ModelObjectEnumerator_.FromTSObject(rebarmesh.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(System.Collections.Hashtable values)
			 => rebarmesh.GetAllUserProperties(values);

		public System.Boolean GetIntegerUserProperties(System.Collections.Hashtable values)
			 => rebarmesh.GetIntegerUserProperties(values);

		public System.Boolean GetDoubleUserProperties(System.Collections.Hashtable values)
			 => rebarmesh.GetDoubleUserProperties(values);

		public System.Boolean GetStringUserProperties(System.Collections.Hashtable values)
			 => rebarmesh.GetStringUserProperties(values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, System.Collections.Hashtable values)
			 => rebarmesh.GetAllReportProperties(stringNames, doubleNames, integerNames, values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => rebarmesh.GetIntegerReportProperties(names, values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => rebarmesh.GetDoubleReportProperties(names, values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => rebarmesh.GetStringReportProperties(names, values);

		public System.Boolean GetUserProperty(System.String name, System.String value)
			 => rebarmesh.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.String value)
			 => rebarmesh.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Double value)
			 => rebarmesh.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Double value)
			 => rebarmesh.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Int32 value)
			 => rebarmesh.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Int32 value)
			 => rebarmesh.GetReportProperty(name, value);

		public System.Boolean GetDynamicStringProperty(System.String name, System.String value)
			 => rebarmesh.GetDynamicStringProperty(name, value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => rebarmesh.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => rebarmesh.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => rebarmesh.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => rebarmesh.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem_.FromTSObject(rebarmesh.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => rebarmesh.SetPhase(Dynamic.Tekla.Structures.Model.Phase_.GetTSObject(phase));

		public System.Boolean GetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => rebarmesh.GetPhase(Dynamic.Tekla.Structures.Model.Phase_.GetTSObject(phase));

		public System.Boolean SetLabel(System.String label)
			 => rebarmesh.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => rebarmesh.CompareTo(obj);




    public enum RebarMeshTypeEnum
    {
			UNKNOWN_MESH,
			RECTANGULAR_MESH,
			POLYGON_MESH,
			BENT_MESH        
    }

    internal static class RebarMeshTypeEnum_
    {
        public static dynamic GetTSObject(RebarMeshTypeEnum dynEnum)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.RebarMeshTypeEnum");

            switch (dynEnum)
            {
				case RebarMeshTypeEnum.UNKNOWN_MESH:
					return System.Enum.Parse(tsType, "UNKNOWN_MESH");
				case RebarMeshTypeEnum.RECTANGULAR_MESH:
					return System.Enum.Parse(tsType, "RECTANGULAR_MESH");
				case RebarMeshTypeEnum.POLYGON_MESH:
					return System.Enum.Parse(tsType, "POLYGON_MESH");
				case RebarMeshTypeEnum.BENT_MESH:
					return System.Enum.Parse(tsType, "BENT_MESH");

                default:
                    throw new System.NotImplementedException(dynEnum.ToString() + "- enum value is not implemented");
            }
        }
    
        public static RebarMeshTypeEnum FromTSObject(dynamic tsEnum)
        {
            string tsEnumValue = tsEnum.ToString("G", System.Globalization.CultureInfo.InvariantCulture);
            
			if (tsEnumValue.Equals("UNKNOWN_MESH", System.StringComparison.InvariantCulture))
				return RebarMeshTypeEnum.UNKNOWN_MESH;
			else if (tsEnumValue.Equals("RECTANGULAR_MESH", System.StringComparison.InvariantCulture))
				return RebarMeshTypeEnum.RECTANGULAR_MESH;
			else if (tsEnumValue.Equals("POLYGON_MESH", System.StringComparison.InvariantCulture))
				return RebarMeshTypeEnum.POLYGON_MESH;
			else if (tsEnumValue.Equals("BENT_MESH", System.StringComparison.InvariantCulture))
				return RebarMeshTypeEnum.BENT_MESH;

            else 
                throw new System.NotImplementedException(tsEnumValue + "- enum value is not implemented");
            
        }
    }


    public enum RebarMeshSpacingMethodEnum
    {
			SPACING_TYPE_UNDEFINED,
			SPACING_TYPE_SAME_DISTANCE,
			SPACING_TYPE_MULTIPLE_VARYING_DISTANCES        
    }

    internal static class RebarMeshSpacingMethodEnum_
    {
        public static dynamic GetTSObject(RebarMeshSpacingMethodEnum dynEnum)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.RebarMeshSpacingMethodEnum");

            switch (dynEnum)
            {
				case RebarMeshSpacingMethodEnum.SPACING_TYPE_UNDEFINED:
					return System.Enum.Parse(tsType, "SPACING_TYPE_UNDEFINED");
				case RebarMeshSpacingMethodEnum.SPACING_TYPE_SAME_DISTANCE:
					return System.Enum.Parse(tsType, "SPACING_TYPE_SAME_DISTANCE");
				case RebarMeshSpacingMethodEnum.SPACING_TYPE_MULTIPLE_VARYING_DISTANCES:
					return System.Enum.Parse(tsType, "SPACING_TYPE_MULTIPLE_VARYING_DISTANCES");

                default:
                    throw new System.NotImplementedException(dynEnum.ToString() + "- enum value is not implemented");
            }
        }
    
        public static RebarMeshSpacingMethodEnum FromTSObject(dynamic tsEnum)
        {
            string tsEnumValue = tsEnum.ToString("G", System.Globalization.CultureInfo.InvariantCulture);
            
			if (tsEnumValue.Equals("SPACING_TYPE_UNDEFINED", System.StringComparison.InvariantCulture))
				return RebarMeshSpacingMethodEnum.SPACING_TYPE_UNDEFINED;
			else if (tsEnumValue.Equals("SPACING_TYPE_SAME_DISTANCE", System.StringComparison.InvariantCulture))
				return RebarMeshSpacingMethodEnum.SPACING_TYPE_SAME_DISTANCE;
			else if (tsEnumValue.Equals("SPACING_TYPE_MULTIPLE_VARYING_DISTANCES", System.StringComparison.InvariantCulture))
				return RebarMeshSpacingMethodEnum.SPACING_TYPE_MULTIPLE_VARYING_DISTANCES;

            else 
                throw new System.NotImplementedException(tsEnumValue + "- enum value is not implemented");
            
        }
    }


    public enum RebarMeshCrossBarLocationEnum
    {
			LOCATION_TYPE_ABOVE,
			LOCATION_TYPE_BELOW,
			LOCATION_TYPE_UNDEFINED        
    }

    internal static class RebarMeshCrossBarLocationEnum_
    {
        public static dynamic GetTSObject(RebarMeshCrossBarLocationEnum dynEnum)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.RebarMeshCrossBarLocationEnum");

            switch (dynEnum)
            {
				case RebarMeshCrossBarLocationEnum.LOCATION_TYPE_ABOVE:
					return System.Enum.Parse(tsType, "LOCATION_TYPE_ABOVE");
				case RebarMeshCrossBarLocationEnum.LOCATION_TYPE_BELOW:
					return System.Enum.Parse(tsType, "LOCATION_TYPE_BELOW");
				case RebarMeshCrossBarLocationEnum.LOCATION_TYPE_UNDEFINED:
					return System.Enum.Parse(tsType, "LOCATION_TYPE_UNDEFINED");

                default:
                    throw new System.NotImplementedException(dynEnum.ToString() + "- enum value is not implemented");
            }
        }
    
        public static RebarMeshCrossBarLocationEnum FromTSObject(dynamic tsEnum)
        {
            string tsEnumValue = tsEnum.ToString("G", System.Globalization.CultureInfo.InvariantCulture);
            
			if (tsEnumValue.Equals("LOCATION_TYPE_ABOVE", System.StringComparison.InvariantCulture))
				return RebarMeshCrossBarLocationEnum.LOCATION_TYPE_ABOVE;
			else if (tsEnumValue.Equals("LOCATION_TYPE_BELOW", System.StringComparison.InvariantCulture))
				return RebarMeshCrossBarLocationEnum.LOCATION_TYPE_BELOW;
			else if (tsEnumValue.Equals("LOCATION_TYPE_UNDEFINED", System.StringComparison.InvariantCulture))
				return RebarMeshCrossBarLocationEnum.LOCATION_TYPE_UNDEFINED;

            else 
                throw new System.NotImplementedException(tsEnumValue + "- enum value is not implemented");
            
        }
    }



    }

    internal static class RebarMesh_
    {
        public static dynamic GetTSObject(RebarMesh dynObject)
        {
            return dynObject.rebarmesh;
        }

        public static RebarMesh FromTSObject(dynamic tsObject)
        {
            return new RebarMesh(tsObject);
        }
    }


}
    
