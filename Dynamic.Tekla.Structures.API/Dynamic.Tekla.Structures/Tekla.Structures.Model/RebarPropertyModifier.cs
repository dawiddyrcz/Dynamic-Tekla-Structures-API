//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class RebarPropertyModifier 
    {

		public Dynamic.Tekla.Structures.Model.RebarPropertiesNullable RebarProperties
		{
			get => new Dynamic.Tekla.Structures.Model.RebarPropertiesNullable(rebarpropertymodifier.RebarProperties);
			set { rebarpropertymodifier.RebarProperties = value.GetTSObject(); }
		}

		public Tekla.Structures.Model.RebarPropertyModifier.GroupingTypeEnum GroupingType
		{
			get => rebarpropertymodifier.GroupingType;
			set { rebarpropertymodifier.GroupingType = value; }
		}

		public Dynamic.Tekla.Structures.Model.RebarSet Father
		{
			get => new Dynamic.Tekla.Structures.Model.RebarSet(rebarpropertymodifier.Father);
			set { rebarpropertymodifier.Father = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.Contour Curve
		{
			get => new Dynamic.Tekla.Structures.Model.Contour(rebarpropertymodifier.Curve);
			set { rebarpropertymodifier.Curve = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.BaseRebarModifier.BarsAffectedEnum BarsAffected
		{
			get => Dynamic.Tekla.Structures.Model.BaseRebarModifier.BarsAffectedEnum_.FromTSObject(rebarpropertymodifier.BarsAffected);
			set { rebarpropertymodifier.BarsAffected = Dynamic.Tekla.Structures.Model.BaseRebarModifier.BarsAffectedEnum_.FromTSObject(value); }
		}

		public System.Int32 FirstAffectedBar
		{
			get => rebarpropertymodifier.FirstAffectedBar;
			set { rebarpropertymodifier.FirstAffectedBar = value; }
		}

		public System.DateTime ModificationTime
		{
			get => rebarpropertymodifier.ModificationTime;
			set { rebarpropertymodifier.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => rebarpropertymodifier.IsUpToDate;
			set { rebarpropertymodifier.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => new Dynamic.Tekla.Structures.Identifier(rebarpropertymodifier.Identifier);
			set { rebarpropertymodifier.Identifier = value.GetTSObject(); }
		}

        

        dynamic rebarpropertymodifier;
        
        public RebarPropertyModifier()
        {
            this.rebarpropertymodifier =  TSActivator.CreateInstance("Tekla.Structures.Model.RebarPropertyModifier");
        }

        public RebarPropertyModifier(dynamic tsObject)
        {
            this.rebarpropertymodifier = tsObject;
        }

        internal dynamic GetTSObject() => rebarpropertymodifier;

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetAffectedBars()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(rebarpropertymodifier.GetAffectedBars());

		public System.Boolean Insert()
			 => rebarpropertymodifier.Insert();

		public System.Boolean Modify()
			 => rebarpropertymodifier.Modify();

		public System.Boolean Delete()
			 => rebarpropertymodifier.Delete();

		public System.Boolean Select()
			 => rebarpropertymodifier.Select();

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(rebarpropertymodifier.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => new Dynamic.Tekla.Structures.Model.BaseComponent(rebarpropertymodifier.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(rebarpropertymodifier.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(System.Collections.Hashtable values)
			 => rebarpropertymodifier.GetAllUserProperties(values);

		public System.Boolean GetIntegerUserProperties(System.Collections.Hashtable values)
			 => rebarpropertymodifier.GetIntegerUserProperties(values);

		public System.Boolean GetDoubleUserProperties(System.Collections.Hashtable values)
			 => rebarpropertymodifier.GetDoubleUserProperties(values);

		public System.Boolean GetStringUserProperties(System.Collections.Hashtable values)
			 => rebarpropertymodifier.GetStringUserProperties(values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, System.Collections.Hashtable values)
			 => rebarpropertymodifier.GetAllReportProperties(stringNames, doubleNames, integerNames, values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => rebarpropertymodifier.GetIntegerReportProperties(names, values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => rebarpropertymodifier.GetDoubleReportProperties(names, values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => rebarpropertymodifier.GetStringReportProperties(names, values);

		public System.Boolean GetUserProperty(System.String name, System.String value)
			 => rebarpropertymodifier.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.String value)
			 => rebarpropertymodifier.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Double value)
			 => rebarpropertymodifier.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Double value)
			 => rebarpropertymodifier.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Int32 value)
			 => rebarpropertymodifier.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Int32 value)
			 => rebarpropertymodifier.GetReportProperty(name, value);

		public System.Boolean GetDynamicStringProperty(System.String name, System.String value)
			 => rebarpropertymodifier.GetDynamicStringProperty(name, value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => rebarpropertymodifier.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => rebarpropertymodifier.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => rebarpropertymodifier.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => rebarpropertymodifier.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(rebarpropertymodifier.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => rebarpropertymodifier.SetPhase(phase.GetTSObject());

		public System.Boolean GetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => rebarpropertymodifier.GetPhase(phase.GetTSObject());

		public System.Boolean SetLabel(System.String label)
			 => rebarpropertymodifier.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => rebarpropertymodifier.CompareTo(obj);




    public struct GroupingTypeEnum
    {
       
    }

    internal static class GroupingTypeEnum_
    {
        public static dynamic GetTSObject(GroupingTypeEnum dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.GroupingTypeEnum");

            return tsType;
        }
    
        public static GroupingTypeEnum FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new GroupingTypeEnum();
 
            return dynStruct;
        }
    }



    }

}
    
