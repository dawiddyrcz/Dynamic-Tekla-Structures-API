//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class RebarSetAddition 
    {

		public System.Collections.Generic.List<Dynamic.Tekla.Structures.Model.RebarLegFace> LegFaces
		{
			get => rebarsetaddition.LegFaces;
			set { rebarsetaddition.LegFaces = value; }
		}

		public Dynamic.Tekla.Structures.Model.RebarSet Father
		{
			get => Dynamic.Tekla.Structures.Model.RebarSet_.FromTSObject(rebarsetaddition.Father);
			set { rebarsetaddition.Father = Dynamic.Tekla.Structures.Model.RebarSet_.GetTSObject(value); }
		}

		public System.DateTime ModificationTime
		{
			get => rebarsetaddition.ModificationTime;
			set { rebarsetaddition.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => rebarsetaddition.IsUpToDate;
			set { rebarsetaddition.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => Dynamic.Tekla.Structures.Identifier_.FromTSObject(rebarsetaddition.Identifier);
			set { rebarsetaddition.Identifier = Dynamic.Tekla.Structures.Identifier_.GetTSObject(value); }
		}

        

        internal dynamic rebarsetaddition;
        
        public RebarSetAddition()
        {
            this.rebarsetaddition =  TSActivator.CreateInstance("Tekla.Structures.Model.RebarSetAddition");
        }

        internal RebarSetAddition(dynamic tsObject)
        {
            this.rebarsetaddition = tsObject;
        }

		public System.Boolean Insert()
			 => rebarsetaddition.Insert();

		public System.Boolean Modify()
			 => rebarsetaddition.Modify();

		public System.Boolean Delete()
			 => rebarsetaddition.Delete();

		public System.Boolean Select()
			 => rebarsetaddition.Select();

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => Dynamic.Tekla.Structures.Model.ModelObjectEnumerator_.FromTSObject(rebarsetaddition.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => Dynamic.Tekla.Structures.Model.BaseComponent_.FromTSObject(rebarsetaddition.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => Dynamic.Tekla.Structures.Model.ModelObjectEnumerator_.FromTSObject(rebarsetaddition.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(System.Collections.Hashtable values)
			 => rebarsetaddition.GetAllUserProperties(values);

		public System.Boolean GetIntegerUserProperties(System.Collections.Hashtable values)
			 => rebarsetaddition.GetIntegerUserProperties(values);

		public System.Boolean GetDoubleUserProperties(System.Collections.Hashtable values)
			 => rebarsetaddition.GetDoubleUserProperties(values);

		public System.Boolean GetStringUserProperties(System.Collections.Hashtable values)
			 => rebarsetaddition.GetStringUserProperties(values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, System.Collections.Hashtable values)
			 => rebarsetaddition.GetAllReportProperties(stringNames, doubleNames, integerNames, values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => rebarsetaddition.GetIntegerReportProperties(names, values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => rebarsetaddition.GetDoubleReportProperties(names, values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => rebarsetaddition.GetStringReportProperties(names, values);

		public System.Boolean GetUserProperty(System.String name, System.String value)
			 => rebarsetaddition.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.String value)
			 => rebarsetaddition.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Double value)
			 => rebarsetaddition.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Double value)
			 => rebarsetaddition.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Int32 value)
			 => rebarsetaddition.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Int32 value)
			 => rebarsetaddition.GetReportProperty(name, value);

		public System.Boolean GetDynamicStringProperty(System.String name, System.String value)
			 => rebarsetaddition.GetDynamicStringProperty(name, value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => rebarsetaddition.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => rebarsetaddition.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => rebarsetaddition.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => rebarsetaddition.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem_.FromTSObject(rebarsetaddition.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => rebarsetaddition.SetPhase(Dynamic.Tekla.Structures.Model.Phase_.GetTSObject(phase));

		public System.Boolean GetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => rebarsetaddition.GetPhase(Dynamic.Tekla.Structures.Model.Phase_.GetTSObject(phase));

		public System.Boolean SetLabel(System.String label)
			 => rebarsetaddition.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => rebarsetaddition.CompareTo(obj);





    }

    internal static class RebarSetAddition_
    {
        public static dynamic GetTSObject(RebarSetAddition dynObject)
        {
            return dynObject.rebarsetaddition;
        }

        public static RebarSetAddition FromTSObject(dynamic tsObject)
        {
            return new RebarSetAddition(tsObject);
        }
    }


}
    
