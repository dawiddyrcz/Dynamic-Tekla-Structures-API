//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class RebarSplice 
    {

		public Dynamic.Tekla.Structures.Model.Reinforcement RebarGroup1
		{
			get => new Dynamic.Tekla.Structures.Model.Reinforcement(rebarsplice.RebarGroup1);
			set { rebarsplice.RebarGroup1 = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.Reinforcement RebarGroup2
		{
			get => new Dynamic.Tekla.Structures.Model.Reinforcement(rebarsplice.RebarGroup2);
			set { rebarsplice.RebarGroup2 = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.RebarSplice.RebarSpliceTypeEnum Type
		{
			get => Dynamic.Tekla.Structures.Model.RebarSplice.RebarSpliceTypeEnum_.FromTSObject(rebarsplice.Type);
			set { rebarsplice.Type = Dynamic.Tekla.Structures.Model.RebarSplice.RebarSpliceTypeEnum_.FromTSObject(value); }
		}

		public System.Double LapLength
		{
			get => rebarsplice.LapLength;
			set { rebarsplice.LapLength = value; }
		}

		public System.Double Offset
		{
			get => rebarsplice.Offset;
			set { rebarsplice.Offset = value; }
		}

		public System.Double Clearance
		{
			get => rebarsplice.Clearance;
			set { rebarsplice.Clearance = value; }
		}

		public Dynamic.Tekla.Structures.Model.RebarSplice.RebarSpliceBarPositionsEnum BarPositions
		{
			get => Dynamic.Tekla.Structures.Model.RebarSplice.RebarSpliceBarPositionsEnum_.FromTSObject(rebarsplice.BarPositions);
			set { rebarsplice.BarPositions = Dynamic.Tekla.Structures.Model.RebarSplice.RebarSpliceBarPositionsEnum_.FromTSObject(value); }
		}

		public System.DateTime ModificationTime
		{
			get => rebarsplice.ModificationTime;
			set { rebarsplice.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => rebarsplice.IsUpToDate;
			set { rebarsplice.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => new Dynamic.Tekla.Structures.Identifier(rebarsplice.Identifier);
			set { rebarsplice.Identifier = value.GetTSObject(); }
		}

        

        dynamic rebarsplice;
        
        public RebarSplice()
        {
            this.rebarsplice =  TSActivator.CreateInstance("Tekla.Structures.Model.RebarSplice");
        }

        public RebarSplice(dynamic tsObject)
        {
            this.rebarsplice = tsObject;
        }

        internal dynamic GetTSObject() => rebarsplice;

		public System.Boolean Insert()
			 => rebarsplice.Insert();

		public System.Boolean Select()
			 => rebarsplice.Select();

		public System.Boolean Modify()
			 => rebarsplice.Modify();

		public System.Boolean Delete()
			 => rebarsplice.Delete();

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(rebarsplice.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => new Dynamic.Tekla.Structures.Model.BaseComponent(rebarsplice.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(rebarsplice.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(System.Collections.Hashtable values)
			 => rebarsplice.GetAllUserProperties(values);

		public System.Boolean GetIntegerUserProperties(System.Collections.Hashtable values)
			 => rebarsplice.GetIntegerUserProperties(values);

		public System.Boolean GetDoubleUserProperties(System.Collections.Hashtable values)
			 => rebarsplice.GetDoubleUserProperties(values);

		public System.Boolean GetStringUserProperties(System.Collections.Hashtable values)
			 => rebarsplice.GetStringUserProperties(values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, System.Collections.Hashtable values)
			 => rebarsplice.GetAllReportProperties(stringNames, doubleNames, integerNames, values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => rebarsplice.GetIntegerReportProperties(names, values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => rebarsplice.GetDoubleReportProperties(names, values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => rebarsplice.GetStringReportProperties(names, values);

		public System.Boolean GetUserProperty(System.String name, System.String value)
			 => rebarsplice.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.String value)
			 => rebarsplice.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Double value)
			 => rebarsplice.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Double value)
			 => rebarsplice.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Int32 value)
			 => rebarsplice.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Int32 value)
			 => rebarsplice.GetReportProperty(name, value);

		public System.Boolean GetDynamicStringProperty(System.String name, System.String value)
			 => rebarsplice.GetDynamicStringProperty(name, value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => rebarsplice.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => rebarsplice.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => rebarsplice.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => rebarsplice.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(rebarsplice.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => rebarsplice.SetPhase(phase.GetTSObject());

		public System.Boolean GetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => rebarsplice.GetPhase(phase.GetTSObject());

		public System.Boolean SetLabel(System.String label)
			 => rebarsplice.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => rebarsplice.CompareTo(obj);




    public struct RebarSpliceTypeEnum
    {
       
    }

    internal static class RebarSpliceTypeEnum_
    {
        public static dynamic GetTSObject(RebarSpliceTypeEnum dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.RebarSpliceTypeEnum");

            return tsType;
        }
    
        public static RebarSpliceTypeEnum FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new RebarSpliceTypeEnum();
 
            return dynStruct;
        }
    }


    public struct RebarSpliceBarPositionsEnum
    {
       
    }

    internal static class RebarSpliceBarPositionsEnum_
    {
        public static dynamic GetTSObject(RebarSpliceBarPositionsEnum dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.RebarSpliceBarPositionsEnum");

            return tsType;
        }
    
        public static RebarSpliceBarPositionsEnum FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new RebarSpliceBarPositionsEnum();
 
            return dynStruct;
        }
    }



    }

}
    
