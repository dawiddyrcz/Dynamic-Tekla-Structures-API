//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class RebarSplitter 
    {

		public Dynamic.Tekla.Structures.Model.RebarSplitter.StaggerTypeEnum StaggerType
		{
			get => Dynamic.Tekla.Structures.Model.RebarSplitter.StaggerTypeEnum_.FromTSObject(rebarsplitter.StaggerType);
			set { rebarsplitter.StaggerType = Dynamic.Tekla.Structures.Model.RebarSplitter.StaggerTypeEnum_.FromTSObject(value); }
		}

		public System.Double StaggerOffset
		{
			get => rebarsplitter.StaggerOffset;
			set { rebarsplitter.StaggerOffset = value; }
		}

		public System.Double SplitOffset
		{
			get => rebarsplitter.SplitOffset;
			set { rebarsplitter.SplitOffset = value; }
		}

		public Dynamic.Tekla.Structures.Model.RebarSplitter.SplitTypeEnum SplitType
		{
			get => Dynamic.Tekla.Structures.Model.RebarSplitter.SplitTypeEnum_.FromTSObject(rebarsplitter.SplitType);
			set { rebarsplitter.SplitType = Dynamic.Tekla.Structures.Model.RebarSplitter.SplitTypeEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.RebarLapping Lapping
		{
			get => new Dynamic.Tekla.Structures.Model.RebarLapping(rebarsplitter.Lapping);
			set { rebarsplitter.Lapping = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.RebarCranking Cranking
		{
			get => new Dynamic.Tekla.Structures.Model.RebarCranking(rebarsplitter.Cranking);
			set { rebarsplitter.Cranking = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.RebarSet Father
		{
			get => new Dynamic.Tekla.Structures.Model.RebarSet(rebarsplitter.Father);
			set { rebarsplitter.Father = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.Contour Curve
		{
			get => new Dynamic.Tekla.Structures.Model.Contour(rebarsplitter.Curve);
			set { rebarsplitter.Curve = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.BaseRebarModifier.BarsAffectedEnum BarsAffected
		{
			get => Dynamic.Tekla.Structures.Model.BaseRebarModifier.BarsAffectedEnum_.FromTSObject(rebarsplitter.BarsAffected);
			set { rebarsplitter.BarsAffected = Dynamic.Tekla.Structures.Model.BaseRebarModifier.BarsAffectedEnum_.FromTSObject(value); }
		}

		public System.Int32 FirstAffectedBar
		{
			get => rebarsplitter.FirstAffectedBar;
			set { rebarsplitter.FirstAffectedBar = value; }
		}

		public System.DateTime ModificationTime
		{
			get => rebarsplitter.ModificationTime;
			set { rebarsplitter.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => rebarsplitter.IsUpToDate;
			set { rebarsplitter.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => new Dynamic.Tekla.Structures.Identifier(rebarsplitter.Identifier);
			set { rebarsplitter.Identifier = value.GetTSObject(); }
		}

        

        dynamic rebarsplitter;
        
        public RebarSplitter()
        {
            this.rebarsplitter =  TSActivator.CreateInstance("Tekla.Structures.Model.RebarSplitter");
        }

        public RebarSplitter(dynamic tsObject)
        {
            this.rebarsplitter = tsObject;
        }

        internal dynamic GetTSObject() => rebarsplitter;

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetAffectedBars(Dynamic.Tekla.Structures.Model.BaseRebarModifier.AffectedRebarEnum whichEnd)
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(rebarsplitter.GetAffectedBars(whichEnd.GetTSObject()));

		public System.Boolean Insert()
			 => rebarsplitter.Insert();

		public System.Boolean Modify()
			 => rebarsplitter.Modify();

		public System.Boolean Delete()
			 => rebarsplitter.Delete();

		public System.Boolean Select()
			 => rebarsplitter.Select();

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(rebarsplitter.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => new Dynamic.Tekla.Structures.Model.BaseComponent(rebarsplitter.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(rebarsplitter.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(System.Collections.Hashtable values)
			 => rebarsplitter.GetAllUserProperties(values);

		public System.Boolean GetIntegerUserProperties(System.Collections.Hashtable values)
			 => rebarsplitter.GetIntegerUserProperties(values);

		public System.Boolean GetDoubleUserProperties(System.Collections.Hashtable values)
			 => rebarsplitter.GetDoubleUserProperties(values);

		public System.Boolean GetStringUserProperties(System.Collections.Hashtable values)
			 => rebarsplitter.GetStringUserProperties(values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, System.Collections.Hashtable values)
			 => rebarsplitter.GetAllReportProperties(stringNames, doubleNames, integerNames, values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => rebarsplitter.GetIntegerReportProperties(names, values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => rebarsplitter.GetDoubleReportProperties(names, values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => rebarsplitter.GetStringReportProperties(names, values);

		public System.Boolean GetUserProperty(System.String name, System.String value)
			 => rebarsplitter.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.String value)
			 => rebarsplitter.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Double value)
			 => rebarsplitter.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Double value)
			 => rebarsplitter.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Int32 value)
			 => rebarsplitter.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Int32 value)
			 => rebarsplitter.GetReportProperty(name, value);

		public System.Boolean GetDynamicStringProperty(System.String name, System.String value)
			 => rebarsplitter.GetDynamicStringProperty(name, value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => rebarsplitter.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => rebarsplitter.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => rebarsplitter.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => rebarsplitter.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(rebarsplitter.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => rebarsplitter.SetPhase(phase.GetTSObject());

		public System.Boolean GetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => rebarsplitter.GetPhase(phase.GetTSObject());

		public System.Boolean SetLabel(System.String label)
			 => rebarsplitter.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => rebarsplitter.CompareTo(obj);




    public struct StaggerTypeEnum
    {
       
    }

    internal static class StaggerTypeEnum_
    {
        public static dynamic GetTSObject(StaggerTypeEnum dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.StaggerTypeEnum");

            return tsType;
        }
    
        public static StaggerTypeEnum FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new StaggerTypeEnum();
 
            return dynStruct;
        }
    }


    public struct SplitTypeEnum
    {
       
    }

    internal static class SplitTypeEnum_
    {
        public static dynamic GetTSObject(SplitTypeEnum dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.SplitTypeEnum");

            return tsType;
        }
    
        public static SplitTypeEnum FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new SplitTypeEnum();
 
            return dynStruct;
        }
    }



    }

}
    
