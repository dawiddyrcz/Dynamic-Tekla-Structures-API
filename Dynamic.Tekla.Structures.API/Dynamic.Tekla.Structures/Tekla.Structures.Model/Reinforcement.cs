//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class Reinforcement 
    {

		public Dynamic.Tekla.Structures.Model.ModelObject Father
		{
			get => new Dynamic.Tekla.Structures.Model.ModelObject(reinforcement.Father);
			set { reinforcement.Father = value.GetTSObject(); }
		}

		public System.String Grade
		{
			get => reinforcement.Grade;
			set { reinforcement.Grade = value; }
		}

		public System.String Name
		{
			get => reinforcement.Name;
			set { reinforcement.Name = value; }
		}

		public System.Int32 Class
		{
			get => reinforcement.Class;
			set { reinforcement.Class = value; }
		}

		public Dynamic.Tekla.Structures.Model.NumberingSeries NumberingSeries
		{
			get => new Dynamic.Tekla.Structures.Model.NumberingSeries(reinforcement.NumberingSeries);
			set { reinforcement.NumberingSeries = value.GetTSObject(); }
		}

		public System.Collections.ArrayList OnPlaneOffsets
		{
			get => reinforcement.OnPlaneOffsets;
			set { reinforcement.OnPlaneOffsets = value; }
		}

		public System.Double FromPlaneOffset
		{
			get => reinforcement.FromPlaneOffset;
			set { reinforcement.FromPlaneOffset = value; }
		}

		public Dynamic.Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum StartPointOffsetType
		{
			get => Dynamic.Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum_.FromTSObject(reinforcement.StartPointOffsetType);
			set { reinforcement.StartPointOffsetType = Dynamic.Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum_.FromTSObject(value); }
		}

		public System.Double StartPointOffsetValue
		{
			get => reinforcement.StartPointOffsetValue;
			set { reinforcement.StartPointOffsetValue = value; }
		}

		public Dynamic.Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum EndPointOffsetType
		{
			get => Dynamic.Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum_.FromTSObject(reinforcement.EndPointOffsetType);
			set { reinforcement.EndPointOffsetType = Dynamic.Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum_.FromTSObject(value); }
		}

		public System.Double EndPointOffsetValue
		{
			get => reinforcement.EndPointOffsetValue;
			set { reinforcement.EndPointOffsetValue = value; }
		}

		public System.Collections.ArrayList RadiusValues
		{
			get => reinforcement.RadiusValues;
			set { reinforcement.RadiusValues = value; }
		}

		public Dynamic.Tekla.Structures.Forming.DeformingType InputPointDeformingState
		{
			get => Dynamic.Tekla.Structures.Forming.DeformingType_.FromTSObject(reinforcement.InputPointDeformingState);
			set { reinforcement.InputPointDeformingState = Dynamic.Tekla.Structures.Forming.DeformingType_.FromTSObject(value); }
		}

		public System.DateTime ModificationTime
		{
			get => reinforcement.ModificationTime;
			set { reinforcement.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => reinforcement.IsUpToDate;
			set { reinforcement.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => new Dynamic.Tekla.Structures.Identifier(reinforcement.Identifier);
			set { reinforcement.Identifier = value.GetTSObject(); }
		}

        

        dynamic reinforcement;
        
        private Reinforcement()
        {
            this.reinforcement =  TSActivator.CreateInstance("Tekla.Structures.Model.Reinforcement");
        }

        public Reinforcement(dynamic tsObject)
        {
            this.reinforcement = tsObject;
        }

        internal dynamic GetTSObject() => reinforcement;

		public System.Collections.ArrayList GetRebarGeometries(Dynamic.Tekla.Structures.Model.Reinforcement.RebarGeometryOptionEnum options)
			 => reinforcement.GetRebarGeometries(options.GetTSObject());

		public System.Collections.ArrayList GetRebarGeometries(System.Boolean withHooks)
			 => reinforcement.GetRebarGeometries(withHooks);

		public System.Collections.ArrayList GetRebarGeometriesWithoutClashes(System.Boolean withHooks)
			 => reinforcement.GetRebarGeometriesWithoutClashes(withHooks);

		public System.Boolean IsGeometryValid()
			 => reinforcement.IsGeometryValid();

		public System.Int32 GetNumberOfRebars()
			 => reinforcement.GetNumberOfRebars();

		public Dynamic.Tekla.Structures.Model.RebarGeometry GetSingleRebar(System.Int32 index, System.Boolean withHooks)
			 => new Dynamic.Tekla.Structures.Model.RebarGeometry(reinforcement.GetSingleRebar(index, withHooks));

		public Dynamic.Tekla.Structures.Model.RebarGeometry GetSingleRebarWithoutClash(System.Int32 index, System.Boolean withHooks)
			 => new Dynamic.Tekla.Structures.Model.RebarGeometry(reinforcement.GetSingleRebarWithoutClash(index, withHooks));

		public Dynamic.Tekla.Structures.Model.Solid GetSolid()
			 => new Dynamic.Tekla.Structures.Model.Solid(reinforcement.GetSolid());

		public Dynamic.Tekla.Structures.Model.PourObject GetFatherPour()
			 => new Dynamic.Tekla.Structures.Model.PourObject(reinforcement.GetFatherPour());

		public Dynamic.Tekla.Structures.Model.PourUnit GetFatherPourUnit()
			 => new Dynamic.Tekla.Structures.Model.PourUnit(reinforcement.GetFatherPourUnit());

		public System.Boolean Insert()
			 => reinforcement.Insert();

		public System.Boolean Select()
			 => reinforcement.Select();

		public System.Boolean Modify()
			 => reinforcement.Modify();

		public System.Boolean Delete()
			 => reinforcement.Delete();

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(reinforcement.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => new Dynamic.Tekla.Structures.Model.BaseComponent(reinforcement.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(reinforcement.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(System.Collections.Hashtable values)
			 => reinforcement.GetAllUserProperties(values);

		public System.Boolean GetIntegerUserProperties(System.Collections.Hashtable values)
			 => reinforcement.GetIntegerUserProperties(values);

		public System.Boolean GetDoubleUserProperties(System.Collections.Hashtable values)
			 => reinforcement.GetDoubleUserProperties(values);

		public System.Boolean GetStringUserProperties(System.Collections.Hashtable values)
			 => reinforcement.GetStringUserProperties(values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, System.Collections.Hashtable values)
			 => reinforcement.GetAllReportProperties(stringNames, doubleNames, integerNames, values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => reinforcement.GetIntegerReportProperties(names, values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => reinforcement.GetDoubleReportProperties(names, values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => reinforcement.GetStringReportProperties(names, values);

		public System.Boolean GetUserProperty(System.String name, System.String value)
			 => reinforcement.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.String value)
			 => reinforcement.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Double value)
			 => reinforcement.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Double value)
			 => reinforcement.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Int32 value)
			 => reinforcement.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Int32 value)
			 => reinforcement.GetReportProperty(name, value);

		public System.Boolean GetDynamicStringProperty(System.String name, System.String value)
			 => reinforcement.GetDynamicStringProperty(name, value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => reinforcement.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => reinforcement.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => reinforcement.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => reinforcement.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(reinforcement.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => reinforcement.SetPhase(phase.GetTSObject());

		public System.Boolean GetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => reinforcement.GetPhase(phase.GetTSObject());

		public System.Boolean SetLabel(System.String label)
			 => reinforcement.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => reinforcement.CompareTo(obj);




    public struct RebarGeometryOptionEnum
    {
       
    }

    internal static class RebarGeometryOptionEnum_
    {
        public static dynamic GetTSObject(RebarGeometryOptionEnum dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.RebarGeometryOptionEnum");

            return tsType;
        }
    
        public static RebarGeometryOptionEnum FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new RebarGeometryOptionEnum();
 
            return dynStruct;
        }
    }


    public struct RebarOffsetTypeEnum
    {
       
    }

    internal static class RebarOffsetTypeEnum_
    {
        public static dynamic GetTSObject(RebarOffsetTypeEnum dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.RebarOffsetTypeEnum");

            return tsType;
        }
    
        public static RebarOffsetTypeEnum FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new RebarOffsetTypeEnum();
 
            return dynStruct;
        }
    }



    }

}
    
