//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class Solid 
    {

		public Dynamic.Tekla.Structures.Geometry3d.Point MinimumPoint
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Point(solid.MinimumPoint);
			set { solid.MinimumPoint = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Point MaximumPoint
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Point(solid.MaximumPoint);
			set { solid.MaximumPoint = value.GetTSObject(); }
		}

        

        dynamic solid;
        
        public Solid()
        {
            this.solid =  TSActivator.CreateInstance("Tekla.Structures.Model.Solid");
        }

        public Solid(dynamic tsObject)
        {
            this.solid = tsObject;
        }

        internal dynamic GetTSObject() => solid;

		public System.Collections.ArrayList Intersect(Dynamic.Tekla.Structures.Geometry3d.LineSegment line)
			 => solid.Intersect(line.GetTSObject());

		public System.Collections.ArrayList Intersect(Dynamic.Tekla.Structures.Geometry3d.Point point1, Dynamic.Tekla.Structures.Geometry3d.Point point2)
			 => solid.Intersect(point1.GetTSObject(), point2.GetTSObject());

		public System.Collections.ArrayList Intersect(Dynamic.Tekla.Structures.Geometry3d.Point point1, Dynamic.Tekla.Structures.Geometry3d.Point point2, Dynamic.Tekla.Structures.Geometry3d.Point point3)
			 => solid.Intersect(point1.GetTSObject(), point2.GetTSObject(), point3.GetTSObject());

		public Dynamic.Tekla.Structures.Solid.FaceEnumerator GetFaceEnumerator()
			 => new Dynamic.Tekla.Structures.Solid.FaceEnumerator(solid.GetFaceEnumerator());

		public Dynamic.Tekla.Structures.Solid.EdgeEnumerator GetEdgeEnumerator()
			 => new Dynamic.Tekla.Structures.Solid.EdgeEnumerator(solid.GetEdgeEnumerator());

		public Dynamic.Tekla.Structures.Solid.ShellEnumerator GetCutPart(Dynamic.Tekla.Structures.Model.Solid CuttingPart)
			 => new Dynamic.Tekla.Structures.Solid.ShellEnumerator(solid.GetCutPart(CuttingPart.GetTSObject()));




    public struct SolidCreationTypeEnum
    {
       
    }

    internal static class SolidCreationTypeEnum_
    {
        public static dynamic GetTSObject(SolidCreationTypeEnum dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.SolidCreationTypeEnum");

            return tsType;
        }
    
        public static SolidCreationTypeEnum FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new SolidCreationTypeEnum();
 
            return dynStruct;
        }
    }



    }

}
    
