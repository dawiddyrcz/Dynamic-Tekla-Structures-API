//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public  class SpiralBeamDataException 
    {

		public Dynamic.Tekla.Structures.Model.SpiralBeam.ErrorStatus ErrorStatus
		{
			get => Dynamic.Tekla.Structures.Model.SpiralBeam.ErrorStatus_.FromTSObject(teklaObject.ErrorStatus);
			set { teklaObject.ErrorStatus = Dynamic.Tekla.Structures.Model.SpiralBeam.ErrorStatus_.GetTSObject(value); }
		}

        

        internal dynamic teklaObject;

		public SpiralBeamDataException() {}
		public SpiralBeamDataException(Dynamic.Tekla.Structures.Model.SpiralBeam.ErrorStatus status, System.String message)
		{
			var args = new object[2];
			args[0] = Dynamic.Tekla.Structures.Model.SpiralBeam.ErrorStatus_.GetTSObject(status);
			args[1] = message;
			this.teklaObject = TSActivator.CreateInstance("Tekla.Structures.Model.SpiralBeamDataException", args);
		}





    }

    internal static class SpiralBeamDataException_
    {
        public static dynamic GetTSObject(SpiralBeamDataException dynObject)
        {
            return dynObject.teklaObject;
        }

        public static SpiralBeamDataException FromTSObject(dynamic tsObject)
        {
            var typeName = "Dynamic." + tsObject.GetType().FullName;
            var type = System.Reflection.Assembly.GetExecutingAssembly().GetType(typeName);
            var dynObject = (Tekla.Structures.Model.SpiralBeamDataException)System.Activator.CreateInstance(type);
            dynObject.teklaObject = tsObject;
            return dynObject;
        }
    }


}
    
