//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class SurfaceTreatment 
    {

		public Dynamic.Tekla.Structures.Model.SurfaceTreatment.SurfaceTypeEnum Type
		{
			get => Dynamic.Tekla.Structures.Model.SurfaceTreatment.SurfaceTypeEnum_.FromTSObject(surfacetreatment.Type);
			set { surfacetreatment.Type = Dynamic.Tekla.Structures.Model.SurfaceTreatment.SurfaceTypeEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.SurfaceTreatment.SurfaceColorEnum Color
		{
			get => Dynamic.Tekla.Structures.Model.SurfaceTreatment.SurfaceColorEnum_.FromTSObject(surfacetreatment.Color);
			set { surfacetreatment.Color = Dynamic.Tekla.Structures.Model.SurfaceTreatment.SurfaceColorEnum_.FromTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Model.Material Material
		{
			get => new Dynamic.Tekla.Structures.Model.Material(surfacetreatment.Material);
			set { surfacetreatment.Material = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.Position Position
		{
			get => new Dynamic.Tekla.Structures.Model.Position(surfacetreatment.Position);
			set { surfacetreatment.Position = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.Contour Polygon
		{
			get => new Dynamic.Tekla.Structures.Model.Contour(surfacetreatment.Polygon);
			set { surfacetreatment.Polygon = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Point StartPoint
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Point(surfacetreatment.StartPoint);
			set { surfacetreatment.StartPoint = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Point EndPoint
		{
			get => new Dynamic.Tekla.Structures.Geometry3d.Point(surfacetreatment.EndPoint);
			set { surfacetreatment.EndPoint = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.Part Father
		{
			get => new Dynamic.Tekla.Structures.Model.Part(surfacetreatment.Father);
			set { surfacetreatment.Father = value.GetTSObject(); }
		}

		public System.Double Thickness
		{
			get => surfacetreatment.Thickness;
			set { surfacetreatment.Thickness = value; }
		}

		public System.String Name
		{
			get => surfacetreatment.Name;
			set { surfacetreatment.Name = value; }
		}

		public System.String Class
		{
			get => surfacetreatment.Class;
			set { surfacetreatment.Class = value; }
		}

		public System.Boolean CutByFatherBooleans
		{
			get => surfacetreatment.CutByFatherBooleans;
			set { surfacetreatment.CutByFatherBooleans = value; }
		}

		public System.String TypeName
		{
			get => surfacetreatment.TypeName;
			set { surfacetreatment.TypeName = value; }
		}

		public System.DateTime ModificationTime
		{
			get => surfacetreatment.ModificationTime;
			set { surfacetreatment.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => surfacetreatment.IsUpToDate;
			set { surfacetreatment.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => new Dynamic.Tekla.Structures.Identifier(surfacetreatment.Identifier);
			set { surfacetreatment.Identifier = value.GetTSObject(); }
		}

        

        dynamic surfacetreatment;
        
        public SurfaceTreatment()
        {
            this.surfacetreatment =  TSActivator.CreateInstance("Tekla.Structures.Model.SurfaceTreatment");
        }

        public SurfaceTreatment(dynamic tsObject)
        {
            this.surfacetreatment = tsObject;
        }

        internal dynamic GetTSObject() => surfacetreatment;

		public System.Boolean Insert()
			 => surfacetreatment.Insert();

		public System.Boolean Select()
			 => surfacetreatment.Select();

		public System.Boolean Modify()
			 => surfacetreatment.Modify();

		public System.Boolean Delete()
			 => surfacetreatment.Delete();

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(surfacetreatment.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => new Dynamic.Tekla.Structures.Model.BaseComponent(surfacetreatment.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(surfacetreatment.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(System.Collections.Hashtable values)
			 => surfacetreatment.GetAllUserProperties(values);

		public System.Boolean GetIntegerUserProperties(System.Collections.Hashtable values)
			 => surfacetreatment.GetIntegerUserProperties(values);

		public System.Boolean GetDoubleUserProperties(System.Collections.Hashtable values)
			 => surfacetreatment.GetDoubleUserProperties(values);

		public System.Boolean GetStringUserProperties(System.Collections.Hashtable values)
			 => surfacetreatment.GetStringUserProperties(values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, System.Collections.Hashtable values)
			 => surfacetreatment.GetAllReportProperties(stringNames, doubleNames, integerNames, values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => surfacetreatment.GetIntegerReportProperties(names, values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => surfacetreatment.GetDoubleReportProperties(names, values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => surfacetreatment.GetStringReportProperties(names, values);

		public System.Boolean GetUserProperty(System.String name, System.String value)
			 => surfacetreatment.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.String value)
			 => surfacetreatment.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Double value)
			 => surfacetreatment.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Double value)
			 => surfacetreatment.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Int32 value)
			 => surfacetreatment.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Int32 value)
			 => surfacetreatment.GetReportProperty(name, value);

		public System.Boolean GetDynamicStringProperty(System.String name, System.String value)
			 => surfacetreatment.GetDynamicStringProperty(name, value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => surfacetreatment.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => surfacetreatment.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => surfacetreatment.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => surfacetreatment.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(surfacetreatment.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => surfacetreatment.SetPhase(phase.GetTSObject());

		public System.Boolean GetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => surfacetreatment.GetPhase(phase.GetTSObject());

		public System.Boolean SetLabel(System.String label)
			 => surfacetreatment.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => surfacetreatment.CompareTo(obj);




    public struct SurfaceTypeEnum
    {
       
    }

    internal static class SurfaceTypeEnum_
    {
        public static dynamic GetTSObject(SurfaceTypeEnum dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.SurfaceTypeEnum");

            return tsType;
        }
    
        public static SurfaceTypeEnum FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new SurfaceTypeEnum();
 
            return dynStruct;
        }
    }


    public struct SurfaceColorEnum
    {
       
    }

    internal static class SurfaceColorEnum_
    {
        public static dynamic GetTSObject(SurfaceColorEnum dynStruct)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.SurfaceColorEnum");

            return tsType;
        }
    
        public static SurfaceColorEnum FromTSObject(dynamic tsStruct)
        {
            var dynStruct = new SurfaceColorEnum();
 
            return dynStruct;
        }
    }



    }

}
    
