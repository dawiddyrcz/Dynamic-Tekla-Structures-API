//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class Task 
    {

		public System.String Name
		{
			get => task.Name;
			set { task.Name = value; }
		}

		public System.Int32 Completeness
		{
			get => task.Completeness;
			set { task.Completeness = value; }
		}

		public System.Boolean Critical
		{
			get => task.Critical;
			set { task.Critical = value; }
		}

		public System.Boolean Local
		{
			get => task.Local;
			set { task.Local = value; }
		}

		public Dynamic.Tekla.Structures.Model.HierarchicObject Scenario
		{
			get => Dynamic.Tekla.Structures.Model.HierarchicObject_.FromTSObject(task.Scenario);
			set { task.Scenario = Dynamic.Tekla.Structures.Model.HierarchicObject_.GetTSObject(value); }
		}

		public System.String Description
		{
			get => task.Description;
			set { task.Description = value; }
		}

		public System.String Url
		{
			get => task.Url;
			set { task.Url = value; }
		}

		public System.DateTime PlannedStartDate
		{
			get => task.PlannedStartDate;
			set { task.PlannedStartDate = value; }
		}

		public System.DateTime PlannedEndDate
		{
			get => task.PlannedEndDate;
			set { task.PlannedEndDate = value; }
		}

		public System.Double PlannedWorkAmount
		{
			get => task.PlannedWorkAmount;
			set { task.PlannedWorkAmount = value; }
		}

		public System.DateTime ActualStartDate
		{
			get => task.ActualStartDate;
			set { task.ActualStartDate = value; }
		}

		public System.DateTime ActualEndDate
		{
			get => task.ActualEndDate;
			set { task.ActualEndDate = value; }
		}

		public System.Double ActualWorkAmount
		{
			get => task.ActualWorkAmount;
			set { task.ActualWorkAmount = value; }
		}

		public System.DateTime ModificationTime
		{
			get => task.ModificationTime;
			set { task.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => task.IsUpToDate;
			set { task.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => Dynamic.Tekla.Structures.Identifier_.FromTSObject(task.Identifier);
			set { task.Identifier = Dynamic.Tekla.Structures.Identifier_.GetTSObject(value); }
		}

        

        internal dynamic task;
        
        public Task()
        {
            this.task =  TSActivator.CreateInstance("Tekla.Structures.Model.Task");
        }

        internal Task(dynamic tsObject)
        {
            this.task = tsObject;
        }
		public Task(Dynamic.Tekla.Structures.Identifier ID)
		{
			var args = new object[1];
			args[0] = Dynamic.Tekla.Structures.Identifier_.GetTSObject(ID);
			this.task = TSActivator.CreateInstance("Tekla.Structures.Model.Task", args);
		}

		public System.Boolean Insert()
			 => task.Insert();

		public System.Boolean Select()
			 => task.Select();

		public System.Boolean Modify()
			 => task.Modify();

		public System.Boolean Delete()
			 => task.Delete();

		public System.Boolean AddObjectsToTask(System.Collections.ArrayList ModelObjects)
			 => task.AddObjectsToTask(ModelObjects);

		public System.Boolean RemoveObjectsFromTask(System.Collections.ArrayList ModelObjects)
			 => task.RemoveObjectsFromTask(ModelObjects);

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetFathers()
			 => Dynamic.Tekla.Structures.Model.ModelObjectEnumerator_.FromTSObject(task.GetFathers());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetDependencies()
			 => Dynamic.Tekla.Structures.Model.ModelObjectEnumerator_.FromTSObject(task.GetDependencies());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetAllTasksOfSelectedObjects()
			 => Dynamic.Tekla.Structures.Model.ModelObjectEnumerator_.FromTSObject(task.GetAllTasksOfSelectedObjects());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => Dynamic.Tekla.Structures.Model.ModelObjectEnumerator_.FromTSObject(task.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => Dynamic.Tekla.Structures.Model.BaseComponent_.FromTSObject(task.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => Dynamic.Tekla.Structures.Model.ModelObjectEnumerator_.FromTSObject(task.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(System.Collections.Hashtable values)
			 => task.GetAllUserProperties(values);

		public System.Boolean GetIntegerUserProperties(System.Collections.Hashtable values)
			 => task.GetIntegerUserProperties(values);

		public System.Boolean GetDoubleUserProperties(System.Collections.Hashtable values)
			 => task.GetDoubleUserProperties(values);

		public System.Boolean GetStringUserProperties(System.Collections.Hashtable values)
			 => task.GetStringUserProperties(values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, System.Collections.Hashtable values)
			 => task.GetAllReportProperties(stringNames, doubleNames, integerNames, values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => task.GetIntegerReportProperties(names, values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => task.GetDoubleReportProperties(names, values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => task.GetStringReportProperties(names, values);

		public System.Boolean GetUserProperty(System.String name, System.String value)
			 => task.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.String value)
			 => task.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Double value)
			 => task.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Double value)
			 => task.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Int32 value)
			 => task.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Int32 value)
			 => task.GetReportProperty(name, value);

		public System.Boolean GetDynamicStringProperty(System.String name, System.String value)
			 => task.GetDynamicStringProperty(name, value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => task.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => task.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => task.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => task.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem_.FromTSObject(task.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => task.SetPhase(Dynamic.Tekla.Structures.Model.Phase_.GetTSObject(phase));

		public System.Boolean GetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => task.GetPhase(Dynamic.Tekla.Structures.Model.Phase_.GetTSObject(phase));

		public System.Boolean SetLabel(System.String label)
			 => task.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => task.CompareTo(obj);





    }

    internal static class Task_
    {
        public static dynamic GetTSObject(Task dynObject)
        {
            return dynObject.task;
        }

        public static Task FromTSObject(dynamic tsObject)
        {
            return new Task(tsObject);
        }
    }


}
    
