//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class TaskDependency 
    {

		public System.Int32 Lag
		{
			get => taskdependency.Lag;
			set { taskdependency.Lag = value; }
		}

		public System.Boolean Local
		{
			get => taskdependency.Local;
			set { taskdependency.Local = value; }
		}

		public Dynamic.Tekla.Structures.Model.Task Primary
		{
			get => new Dynamic.Tekla.Structures.Model.Task(taskdependency.Primary);
			set { taskdependency.Primary = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.Task Secondary
		{
			get => new Dynamic.Tekla.Structures.Model.Task(taskdependency.Secondary);
			set { taskdependency.Secondary = value.GetTSObject(); }
		}

		public Dynamic.Tekla.Structures.Model.TaskDependency.DependencyTypeEnum DependencyType
		{
			get => Dynamic.Tekla.Structures.Model.TaskDependency.DependencyTypeEnum_.FromTSObject(taskdependency.DependencyType);
			set { taskdependency.DependencyType = Dynamic.Tekla.Structures.Model.TaskDependency.DependencyTypeEnum_.FromTSObject(value); }
		}

		public System.DateTime ModificationTime
		{
			get => taskdependency.ModificationTime;
			set { taskdependency.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => taskdependency.IsUpToDate;
			set { taskdependency.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => new Dynamic.Tekla.Structures.Identifier(taskdependency.Identifier);
			set { taskdependency.Identifier = value.GetTSObject(); }
		}

        

        dynamic taskdependency;
        
        public TaskDependency()
        {
            this.taskdependency =  TSActivator.CreateInstance("Tekla.Structures.Model.TaskDependency");
        }

        public TaskDependency(dynamic tsObject)
        {
            this.taskdependency = tsObject;
        }

        internal dynamic GetTSObject() => taskdependency;

		public System.Boolean Insert()
			 => taskdependency.Insert();

		public System.Boolean Select()
			 => taskdependency.Select();

		public System.Boolean Modify()
			 => taskdependency.Modify();

		public System.Boolean Delete()
			 => taskdependency.Delete();

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(taskdependency.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => new Dynamic.Tekla.Structures.Model.BaseComponent(taskdependency.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(taskdependency.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(System.Collections.Hashtable values)
			 => taskdependency.GetAllUserProperties(values);

		public System.Boolean GetIntegerUserProperties(System.Collections.Hashtable values)
			 => taskdependency.GetIntegerUserProperties(values);

		public System.Boolean GetDoubleUserProperties(System.Collections.Hashtable values)
			 => taskdependency.GetDoubleUserProperties(values);

		public System.Boolean GetStringUserProperties(System.Collections.Hashtable values)
			 => taskdependency.GetStringUserProperties(values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, System.Collections.Hashtable values)
			 => taskdependency.GetAllReportProperties(stringNames, doubleNames, integerNames, values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => taskdependency.GetIntegerReportProperties(names, values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => taskdependency.GetDoubleReportProperties(names, values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => taskdependency.GetStringReportProperties(names, values);

		public System.Boolean GetUserProperty(System.String name, System.String value)
			 => taskdependency.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.String value)
			 => taskdependency.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Double value)
			 => taskdependency.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Double value)
			 => taskdependency.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Int32 value)
			 => taskdependency.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Int32 value)
			 => taskdependency.GetReportProperty(name, value);

		public System.Boolean GetDynamicStringProperty(System.String name, System.String value)
			 => taskdependency.GetDynamicStringProperty(name, value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => taskdependency.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => taskdependency.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => taskdependency.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => taskdependency.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(taskdependency.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => taskdependency.SetPhase(phase.GetTSObject());

		public System.Boolean GetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => taskdependency.GetPhase(phase.GetTSObject());

		public System.Boolean SetLabel(System.String label)
			 => taskdependency.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => taskdependency.CompareTo(obj);




    public enum DependencyTypeEnum
    {
			FINISH_TO_FINISH,
			FINISH_TO_START,
			START_TO_FINISH,
			START_TO_START        
    }

    public static class DependencyTypeEnum_
    {
        public static dynamic GetTSObject(DependencyTypeEnum dynEnum)
        {
            var tsType = TSActivator.CreateInstance("Tekla.Structures.Model.DependencyTypeEnum");

            switch (dynEnum)
            {
				case DependencyTypeEnum.FINISH_TO_FINISH:
					return System.Enum.Parse(tsType, "FINISH_TO_FINISH");
				case DependencyTypeEnum.FINISH_TO_START:
					return System.Enum.Parse(tsType, "FINISH_TO_START");
				case DependencyTypeEnum.START_TO_FINISH:
					return System.Enum.Parse(tsType, "START_TO_FINISH");
				case DependencyTypeEnum.START_TO_START:
					return System.Enum.Parse(tsType, "START_TO_START");

                default:
                    throw new System.NotImplementedException(dynEnum.ToString() + "- enum value is not implemented");
            }
        }
    
        public static DependencyTypeEnum FromTSObject(dynamic tsEnum)
        {
            string tsEnumValue = tsEnum.ToString("G", System.Globalization.CultureInfo.InvariantCulture);
            
			if (tsEnumValue.Equals("FINISH_TO_FINISH", System.StringComparison.InvariantCulture))
				return DependencyTypeEnum.FINISH_TO_FINISH;
			else if (tsEnumValue.Equals("FINISH_TO_START", System.StringComparison.InvariantCulture))
				return DependencyTypeEnum.FINISH_TO_START;
			else if (tsEnumValue.Equals("START_TO_FINISH", System.StringComparison.InvariantCulture))
				return DependencyTypeEnum.START_TO_FINISH;
			else if (tsEnumValue.Equals("START_TO_START", System.StringComparison.InvariantCulture))
				return DependencyTypeEnum.START_TO_START;

            else 
                throw new System.NotImplementedException(tsEnumValue + "- enum value is not implemented");
            
        }
    }



    }

}
    
