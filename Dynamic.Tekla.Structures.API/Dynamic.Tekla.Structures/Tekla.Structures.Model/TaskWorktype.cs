//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class TaskWorktype 
    {

		public System.String Name
		{
			get => taskworktype.Name;
			set { taskworktype.Name = value; }
		}

		public System.DateTime ModificationTime
		{
			get => taskworktype.ModificationTime;
			set { taskworktype.ModificationTime = value; }
		}

		public System.Boolean IsUpToDate
		{
			get => taskworktype.IsUpToDate;
			set { taskworktype.IsUpToDate = value; }
		}

		public Dynamic.Tekla.Structures.Identifier Identifier
		{
			get => new Dynamic.Tekla.Structures.Identifier(taskworktype.Identifier);
			set { taskworktype.Identifier = value.GetTSObject(); }
		}

        

        dynamic taskworktype;
        
        public TaskWorktype()
        {
            this.taskworktype =  TSActivator.CreateInstance("Tekla.Structures.Model.TaskWorktype");
        }

        public TaskWorktype(dynamic tsObject)
        {
            this.taskworktype = tsObject;
        }

        internal dynamic GetTSObject() => taskworktype;

		public System.Boolean Insert()
			 => taskworktype.Insert();

		public System.Boolean Select()
			 => taskworktype.Select();

		public System.Boolean Modify()
			 => taskworktype.Modify();

		public System.Boolean Delete()
			 => taskworktype.Delete();

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetChildren()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(taskworktype.GetChildren());

		public Dynamic.Tekla.Structures.Model.BaseComponent GetFatherComponent()
			 => new Dynamic.Tekla.Structures.Model.BaseComponent(taskworktype.GetFatherComponent());

		public Dynamic.Tekla.Structures.Model.ModelObjectEnumerator GetHierarchicObjects()
			 => new Dynamic.Tekla.Structures.Model.ModelObjectEnumerator(taskworktype.GetHierarchicObjects());

		public System.Boolean GetAllUserProperties(System.Collections.Hashtable values)
			 => taskworktype.GetAllUserProperties(values);

		public System.Boolean GetIntegerUserProperties(System.Collections.Hashtable values)
			 => taskworktype.GetIntegerUserProperties(values);

		public System.Boolean GetDoubleUserProperties(System.Collections.Hashtable values)
			 => taskworktype.GetDoubleUserProperties(values);

		public System.Boolean GetStringUserProperties(System.Collections.Hashtable values)
			 => taskworktype.GetStringUserProperties(values);

		public System.Boolean GetAllReportProperties(System.Collections.ArrayList stringNames, System.Collections.ArrayList doubleNames, System.Collections.ArrayList integerNames, System.Collections.Hashtable values)
			 => taskworktype.GetAllReportProperties(stringNames, doubleNames, integerNames, values);

		public System.Boolean GetIntegerReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => taskworktype.GetIntegerReportProperties(names, values);

		public System.Boolean GetDoubleReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => taskworktype.GetDoubleReportProperties(names, values);

		public System.Boolean GetStringReportProperties(System.Collections.ArrayList names, System.Collections.Hashtable values)
			 => taskworktype.GetStringReportProperties(names, values);

		public System.Boolean GetUserProperty(System.String name, System.String value)
			 => taskworktype.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.String value)
			 => taskworktype.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Double value)
			 => taskworktype.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Double value)
			 => taskworktype.GetReportProperty(name, value);

		public System.Boolean GetUserProperty(System.String name, System.Int32 value)
			 => taskworktype.GetUserProperty(name, value);

		public System.Boolean GetReportProperty(System.String name, System.Int32 value)
			 => taskworktype.GetReportProperty(name, value);

		public System.Boolean GetDynamicStringProperty(System.String name, System.String value)
			 => taskworktype.GetDynamicStringProperty(name, value);

		public System.Boolean SetDynamicStringProperty(System.String name, System.String value)
			 => taskworktype.SetDynamicStringProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.String value)
			 => taskworktype.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Double value)
			 => taskworktype.SetUserProperty(name, value);

		public System.Boolean SetUserProperty(System.String name, System.Int32 value)
			 => taskworktype.SetUserProperty(name, value);

		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem GetCoordinateSystem()
			 => new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(taskworktype.GetCoordinateSystem());

		public System.Boolean SetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => taskworktype.SetPhase(phase.GetTSObject());

		public System.Boolean GetPhase(Dynamic.Tekla.Structures.Model.Phase phase)
			 => taskworktype.GetPhase(phase.GetTSObject());

		public System.Boolean SetLabel(System.String label)
			 => taskworktype.SetLabel(label);

		public System.Int32 CompareTo(System.Object obj)
			 => taskworktype.CompareTo(obj);





    }

}
    
