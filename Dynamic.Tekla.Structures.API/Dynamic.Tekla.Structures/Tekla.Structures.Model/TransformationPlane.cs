//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class TransformationPlane 
    {

		public Dynamic.Tekla.Structures.Geometry3d.Matrix TransformationMatrixToGlobal
		{
			get => Dynamic.Tekla.Structures.Geometry3d.Matrix_.FromTSObject(transformationplane.TransformationMatrixToGlobal);
			set { transformationplane.TransformationMatrixToGlobal = Dynamic.Tekla.Structures.Geometry3d.Matrix_.GetTSObject(value); }
		}

		public Dynamic.Tekla.Structures.Geometry3d.Matrix TransformationMatrixToLocal
		{
			get => Dynamic.Tekla.Structures.Geometry3d.Matrix_.FromTSObject(transformationplane.TransformationMatrixToLocal);
			set { transformationplane.TransformationMatrixToLocal = Dynamic.Tekla.Structures.Geometry3d.Matrix_.GetTSObject(value); }
		}

        

        internal dynamic transformationplane;
        
        public TransformationPlane()
        {
            this.transformationplane =  TSActivator.CreateInstance("Tekla.Structures.Model.TransformationPlane");
        }

        internal TransformationPlane(dynamic tsObject)
        {
            this.transformationplane = tsObject;
        }





    }

    internal static class TransformationPlane_
    {
        public static dynamic GetTSObject(TransformationPlane dynObject)
        {
            return dynObject.transformationplane;
        }

        public static TransformationPlane FromTSObject(dynamic tsObject)
        {
            return new TransformationPlane(tsObject);
        }
    }


}
    
