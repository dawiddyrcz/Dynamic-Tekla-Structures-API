//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class UndefinedCurveDirectionException 
    {

		public System.String Message
		{
			get => undefinedcurvedirectionexception.Message;
			set { undefinedcurvedirectionexception.Message = value; }
		}

		public System.Collections.IDictionary Data
		{
			get => undefinedcurvedirectionexception.Data;
			set { undefinedcurvedirectionexception.Data = value; }
		}

		public System.Exception InnerException
		{
			get => undefinedcurvedirectionexception.InnerException;
			set { undefinedcurvedirectionexception.InnerException = value; }
		}

		public System.Reflection.MethodBase TargetSite
		{
			get => undefinedcurvedirectionexception.TargetSite;
			set { undefinedcurvedirectionexception.TargetSite = value; }
		}

		public System.String StackTrace
		{
			get => undefinedcurvedirectionexception.StackTrace;
			set { undefinedcurvedirectionexception.StackTrace = value; }
		}

		public System.String HelpLink
		{
			get => undefinedcurvedirectionexception.HelpLink;
			set { undefinedcurvedirectionexception.HelpLink = value; }
		}

		public System.String Source
		{
			get => undefinedcurvedirectionexception.Source;
			set { undefinedcurvedirectionexception.Source = value; }
		}

		public System.Int32 HResult
		{
			get => undefinedcurvedirectionexception.HResult;
			set { undefinedcurvedirectionexception.HResult = value; }
		}

		public Dynamic.Tekla.Structures.Model.BentPlateGeometrySolver.OperationStatus OperationStatus
		{
			get => Dynamic.Tekla.Structures.Model.BentPlateGeometrySolver.OperationStatus_.FromTSObject(undefinedcurvedirectionexception.OperationStatus);
			set { undefinedcurvedirectionexception.OperationStatus = Dynamic.Tekla.Structures.Model.BentPlateGeometrySolver.OperationStatus_.GetTSObject(value); }
		}

        

        internal dynamic undefinedcurvedirectionexception;
        
        public UndefinedCurveDirectionException()
        {
            this.undefinedcurvedirectionexception =  TSActivator.CreateInstance("Tekla.Structures.Model.UndefinedCurveDirectionException");
        }

        internal UndefinedCurveDirectionException(dynamic tsObject)
        {
            this.undefinedcurvedirectionexception = tsObject;
        }

		public System.Exception GetBaseException()
			 => undefinedcurvedirectionexception.GetBaseException();

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => undefinedcurvedirectionexception.GetObjectData(info, context);





    }

    internal static class UndefinedCurveDirectionException_
    {
        public static dynamic GetTSObject(UndefinedCurveDirectionException dynObject)
        {
            return dynObject.undefinedcurvedirectionexception;
        }

        public static UndefinedCurveDirectionException FromTSObject(dynamic tsObject)
        {
            return new UndefinedCurveDirectionException(tsObject);
        }
    }


}
    
