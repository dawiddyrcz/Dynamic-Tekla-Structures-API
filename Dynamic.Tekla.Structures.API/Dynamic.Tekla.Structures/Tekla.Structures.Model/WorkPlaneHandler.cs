//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class WorkPlaneHandler 
    {

        

        internal dynamic workplanehandler;
        
        public WorkPlaneHandler()
        {
            this.workplanehandler =  TSActivator.CreateInstance("Tekla.Structures.Model.WorkPlaneHandler");
        }

        internal WorkPlaneHandler(dynamic tsObject)
        {
            this.workplanehandler = tsObject;
        }

		public Dynamic.Tekla.Structures.Model.TransformationPlane GetCurrentTransformationPlane()
			 => Dynamic.Tekla.Structures.Model.TransformationPlane_.FromTSObject(workplanehandler.GetCurrentTransformationPlane());

		public System.Boolean SetCurrentTransformationPlane(Dynamic.Tekla.Structures.Model.TransformationPlane TransformationPlane)
			 => workplanehandler.SetCurrentTransformationPlane(Dynamic.Tekla.Structures.Model.TransformationPlane_.GetTSObject(TransformationPlane));





    }

    internal static class WorkPlaneHandler_
    {
        public static dynamic GetTSObject(WorkPlaneHandler dynObject)
        {
            return dynObject.workplanehandler;
        }

        public static WorkPlaneHandler FromTSObject(dynamic tsObject)
        {
            return new WorkPlaneHandler(tsObject);
        }
    }


}
    
