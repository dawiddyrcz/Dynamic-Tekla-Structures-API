//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures
{

    public sealed class Identifier 
    {

		public System.Int32 ID
		{
			get => identifier.ID;
			set { identifier.ID = value; }
		}

		public System.Int32 ID2
		{
			get => identifier.ID2;
			set { identifier.ID2 = value; }
		}

		public System.Guid GUID
		{
			get => identifier.GUID;
			set { identifier.GUID = value; }
		}

        

        internal dynamic identifier;
        
        public Identifier()
        {
            this.identifier =  TSActivator.CreateInstance("Tekla.Structures.Identifier");
        }

        internal Identifier(dynamic tsObject)
        {
            this.identifier = tsObject;
        }
		public Identifier(System.Int32 id)
		{
			var args = new object[1];
			args[0] = id;
			this.identifier = TSActivator.CreateInstance("Tekla.Structures.Identifier", args);
		}
		public Identifier(System.Guid guid)
		{
			var args = new object[1];
			args[0] = guid;
			this.identifier = TSActivator.CreateInstance("Tekla.Structures.Identifier", args);
		}
		public Identifier(System.String guid)
		{
			var args = new object[1];
			args[0] = guid;
			this.identifier = TSActivator.CreateInstance("Tekla.Structures.Identifier", args);
		}

		public System.Boolean IsValid()
			 => identifier.IsValid();





    }

    internal static class Identifier_
    {
        public static dynamic GetTSObject(Identifier dynObject)
        {
            return dynObject.identifier;
        }

        public static Identifier FromTSObject(dynamic tsObject)
        {
            return new Identifier(tsObject);
        }
    }


}
    
