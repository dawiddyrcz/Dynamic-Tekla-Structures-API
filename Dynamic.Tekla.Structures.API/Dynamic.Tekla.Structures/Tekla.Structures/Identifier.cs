//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures
{

    public  class Identifier 
    {

		public System.Int32 ID
		{
			get => teklaObject.ID;
			set { teklaObject.ID = value; }
		}

		public System.Int32 ID2
		{
			get => teklaObject.ID2;
			set { teklaObject.ID2 = value; }
		}

		public System.Guid GUID
		{
			get => teklaObject.GUID;
			set { teklaObject.GUID = value; }
		}

        

        internal dynamic teklaObject;

		public Identifier()
		{
			this.teklaObject = TSActivator.CreateInstance("Tekla.Structures.Identifier");
		}
		public Identifier(System.Int32 id)
		{
			var args = new object[1];
			args[0] = id;
			this.teklaObject = TSActivator.CreateInstance("Tekla.Structures.Identifier", args);
		}
		public Identifier(System.Guid guid)
		{
			var args = new object[1];
			args[0] = guid;
			this.teklaObject = TSActivator.CreateInstance("Tekla.Structures.Identifier", args);
		}
		public Identifier(System.String guid)
		{
			var args = new object[1];
			args[0] = guid;
			this.teklaObject = TSActivator.CreateInstance("Tekla.Structures.Identifier", args);
		}

		public System.Boolean IsValid()
			 => teklaObject.IsValid();





    }

    internal static class Identifier_
    {
        public static dynamic GetTSObject(Identifier dynObject)
        {
            return dynObject.teklaObject;
        }

        public static Identifier FromTSObject(dynamic tsObject)
        {
            var typeName = "Dynamic." + tsObject.GetType().FullName;
            var type = System.Reflection.Assembly.GetExecutingAssembly().GetType(typeName);
            var dynObject = (Tekla.Structures.Identifier)System.Activator.CreateInstance(type);
            dynObject.teklaObject = tsObject;
            return dynObject;
        }
    }


}
    
