/*Copyright (C) Dawid Dyrcz 2020
* This program is free software. You may use, distribute and modify 
* this code under the terms of the LGPL3 license. This program is distributed 
* in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
* without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
* For more details see GNU LESSER GENERAL PUBLIC LICENSE Version 3, 29 June 2007
* 
* This library connects with the Tekla Structures Software which is protected by copyright.
* To use this library you have to obtain commercial license for Tekla Structures Software. 
*/
//This file is generated by CodeGenerator

namespace Dynamic.Tekla.Structures
{

    public abstract class TeklaStructures 
    {


        public static Dynamic.Tekla.Structures.ICommonTasks CommonTasks
        {
            get
            {
                var value = PropertyInvoker.GetStaticPropertyOrFieldValue("Tekla.Structures.TeklaStructures", "CommonTasks");
                var value_ = Dynamic.Tekla.Structures.ICommonTasks_.FromTSObject(value);
	return (Dynamic.Tekla.Structures.ICommonTasks) value_;
            }
            
        }
        public static Dynamic.Tekla.Structures.Configuration Configuration
        {
            get
            {
                var value = PropertyInvoker.GetStaticPropertyOrFieldValue("Tekla.Structures.TeklaStructures", "Configuration");
                var value_ = Dynamic.Tekla.Structures.Configuration_.FromTSObject(value);
	return (Dynamic.Tekla.Structures.Configuration) value_;
            }
            
        }
        public static Dynamic.Tekla.Structures.IConnection Connection
        {
            get
            {
                var value = PropertyInvoker.GetStaticPropertyOrFieldValue("Tekla.Structures.TeklaStructures", "Connection");
                var value_ = Dynamic.Tekla.Structures.IConnection_.FromTSObject(value);
	return (Dynamic.Tekla.Structures.IConnection) value_;
            }
            
        }
        public static Dynamic.Tekla.Structures.IDrawing Drawing
        {
            get
            {
                var value = PropertyInvoker.GetStaticPropertyOrFieldValue("Tekla.Structures.TeklaStructures", "Drawing");
                var value_ = Dynamic.Tekla.Structures.IDrawing_.FromTSObject(value);
	return (Dynamic.Tekla.Structures.IDrawing) value_;
            }
            
        }
        public static Dynamic.Tekla.Structures.IEnvironment Environment
        {
            get
            {
                var value = PropertyInvoker.GetStaticPropertyOrFieldValue("Tekla.Structures.TeklaStructures", "Environment");
                var value_ = Dynamic.Tekla.Structures.IEnvironment_.FromTSObject(value);
	return (Dynamic.Tekla.Structures.IEnvironment) value_;
            }
            
        }
        public static System.Boolean IsRunning
        {
            get
            {
                var value = PropertyInvoker.GetStaticPropertyOrFieldValue("Tekla.Structures.TeklaStructures", "IsRunning");
                return (System.Boolean) value;
            }
            
        }
        public static Dynamic.Tekla.Structures.IMainWindow MainWindow
        {
            get
            {
                var value = PropertyInvoker.GetStaticPropertyOrFieldValue("Tekla.Structures.TeklaStructures", "MainWindow");
                var value_ = Dynamic.Tekla.Structures.IMainWindow_.FromTSObject(value);
	return (Dynamic.Tekla.Structures.IMainWindow) value_;
            }
            
        }
        public static Dynamic.Tekla.Structures.IModel Model
        {
            get
            {
                var value = PropertyInvoker.GetStaticPropertyOrFieldValue("Tekla.Structures.TeklaStructures", "Model");
                var value_ = Dynamic.Tekla.Structures.IModel_.FromTSObject(value);
	return (Dynamic.Tekla.Structures.IModel) value_;
            }
            
        }
        public static Dynamic.Tekla.Structures.IRegistry Registry
        {
            get
            {
                var value = PropertyInvoker.GetStaticPropertyOrFieldValue("Tekla.Structures.TeklaStructures", "Registry");
                var value_ = Dynamic.Tekla.Structures.IRegistry_.FromTSObject(value);
	return (Dynamic.Tekla.Structures.IRegistry) value_;
            }
            
        }
        public static System.String Version
        {
            get
            {
                var value = PropertyInvoker.GetStaticPropertyOrFieldValue("Tekla.Structures.TeklaStructures", "Version");
                return (System.String) value;
            }
            
        }        

        internal dynamic teklaObject;



        public static System.Boolean Connect()
        {
            var result = (System.Boolean) MethodInvoker.InvokeStaticMethod("Tekla.Structures.TeklaStructures", "Connect");
            return result;
        }



        public static void Disconnect()
        {
            MethodInvoker.InvokeStaticMethod("Tekla.Structures.TeklaStructures", "Disconnect");
            
        }



        public static void ExecuteScript(
			System.String script)
        {
            MethodInvoker.InvokeStaticMethod("Tekla.Structures.TeklaStructures", "ExecuteScript", script);
            
        }






    }

    internal static class TeklaStructures_
    {
        public static dynamic GetTSObject(TeklaStructures dynObject)
        {
            if (dynObject is null) return null;
            return dynObject.teklaObject;
        }

        public static TeklaStructures FromTSObject(dynamic tsObject)
        {
            if (tsObject is null) return null;
            var typeName = "Dynamic." + tsObject.GetType().FullName;
            var type = System.Reflection.Assembly.GetExecutingAssembly().GetType(typeName);
            
            var parameters = new object[2];
            parameters[0] = tsObject;
            parameters[1] = new System.DateTime();

            var dynObject = (Dynamic.Tekla.Structures.TeklaStructures)System.Activator.CreateInstance(type, parameters);
            dynObject.teklaObject = tsObject;
            return dynObject;
        }
    }

    internal static class TeklaStructuresArray_
    {
        public static dynamic GetTSObject(TeklaStructures[] dynArray)
        {
            if (dynArray is null) return null;
            var list = new System.Collections.Generic.List<dynamic>();
            foreach(var dynItem in dynArray)
            {
                list.Add(TeklaStructures_.GetTSObject(dynItem));
            }
            return list.ToArray();
        }

        public static TeklaStructures[] FromTSObject(dynamic[] tsArray)
        {
            if (tsArray is null) return null;
            var list = new System.Collections.Generic.List<TeklaStructures>();
            foreach(var tsItem in tsArray)
            {
                list.Add(TeklaStructures_.FromTSObject(tsItem));
            }
            return list.ToArray();
        }
    }


}
    
