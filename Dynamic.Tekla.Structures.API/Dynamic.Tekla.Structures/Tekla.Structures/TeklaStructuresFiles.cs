//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures
{

    public sealed class TeklaStructuresFiles 
    {

		public System.Collections.Generic.List<System.String> PropertyFileDirectories
		{
			get => teklastructuresfiles.PropertyFileDirectories;
			set { teklastructuresfiles.PropertyFileDirectories = value; }
		}

        

        internal dynamic teklastructuresfiles;
        
        public TeklaStructuresFiles()
        {
            this.teklastructuresfiles =  TSActivator.CreateInstance("Tekla.Structures.TeklaStructuresFiles");
        }

        internal TeklaStructuresFiles(dynamic tsObject)
        {
            this.teklastructuresfiles = tsObject;
        }
		public TeklaStructuresFiles(System.String modelpath)
		{
			var args = new object[1];
			args[0] = modelpath;
			this.teklastructuresfiles = TSActivator.CreateInstance("Tekla.Structures.TeklaStructuresFiles", args);
		}

		public System.Collections.Generic.List<System.String> GetMultiDirectoryFileList(System.String fileExtension, System.Boolean fullpath)
			 => teklastructuresfiles.GetMultiDirectoryFileList(fileExtension, fullpath);

		public System.IO.FileInfo GetAttributeFile(System.String fileName)
			 => teklastructuresfiles.GetAttributeFile(fileName);

		public System.IO.FileInfo GetAttributeFile(System.Collections.Generic.List<System.String> searchDirectories, System.String fileName)
			 => teklastructuresfiles.GetAttributeFile(searchDirectories, fileName);





    }

    internal static class TeklaStructuresFiles_
    {
        public static dynamic GetTSObject(TeklaStructuresFiles dynObject)
        {
            return dynObject.teklastructuresfiles;
        }

        public static TeklaStructuresFiles FromTSObject(dynamic tsObject)
        {
            return new TeklaStructuresFiles(tsObject);
        }
    }


}
    
