//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures
{

    public  class TeklaStructuresFiles 
    {

		public System.Collections.Generic.List<System.String> PropertyFileDirectories
		{
			get => teklaObject.PropertyFileDirectories;
			set { teklaObject.PropertyFileDirectories = value; }
		}

        

        internal dynamic teklaObject;

		public TeklaStructuresFiles() {}
		public TeklaStructuresFiles(System.String modelpath)
		{
			var args = new object[1];
			args[0] = modelpath;
			this.teklaObject = TSActivator.CreateInstance("Tekla.Structures.TeklaStructuresFiles", args);
		}

		public System.Collections.Generic.List<System.String> GetMultiDirectoryFileList(System.String fileExtension, System.Boolean fullpath)
			 => teklaObject.GetMultiDirectoryFileList(fileExtension, fullpath);

		public System.IO.FileInfo GetAttributeFile(System.String fileName)
			 => teklaObject.GetAttributeFile(fileName);

		public System.IO.FileInfo GetAttributeFile(System.Collections.Generic.List<System.String> searchDirectories, System.String fileName)
			 => teklaObject.GetAttributeFile(searchDirectories, fileName);





    }

    internal static class TeklaStructuresFiles_
    {
        public static dynamic GetTSObject(TeklaStructuresFiles dynObject)
        {
            return dynObject.teklaObject;
        }

        public static TeklaStructuresFiles FromTSObject(dynamic tsObject)
        {
            var typeName = "Dynamic." + tsObject.GetType().FullName;
            var type = System.Reflection.Assembly.GetExecutingAssembly().GetType(typeName);
            var dynObject = (Tekla.Structures.TeklaStructuresFiles)System.Activator.CreateInstance(type);
            dynObject.teklaObject = tsObject;
            return dynObject;
        }
    }


}
    
