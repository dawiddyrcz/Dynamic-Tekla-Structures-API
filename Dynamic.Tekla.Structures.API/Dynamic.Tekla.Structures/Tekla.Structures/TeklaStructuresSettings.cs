//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures
{

    public  class TeklaStructuresSettings 
    {

        

        internal dynamic teklaObject;

		public TeklaStructuresSettings()
		{
			this.teklaObject = TSActivator.CreateInstance("Tekla.Structures.TeklaStructuresSettings");
		}

		public System.Boolean GetAdvancedOption(System.String VariableName, System.Boolean Value)
			 => teklaObject.GetAdvancedOption(VariableName, Value);

		public System.Boolean GetAdvancedOption(System.String VariableName, System.Int32 Value)
			 => teklaObject.GetAdvancedOption(VariableName, Value);

		public System.Boolean GetAdvancedOption(System.String VariableName, System.String Value)
			 => teklaObject.GetAdvancedOption(VariableName, Value);

		public System.Boolean GetAdvancedOption(System.String VariableName, System.Double Value)
			 => teklaObject.GetAdvancedOption(VariableName, Value);

		public System.Boolean GetOptions(Dynamic.Tekla.Structures.ClashCheckOptions Options)
			 => teklaObject.GetOptions(Dynamic.Tekla.Structures.ClashCheckOptions_.GetTSObject(Options));

		public System.Boolean SetOptions(Dynamic.Tekla.Structures.ClashCheckOptions Options)
			 => teklaObject.SetOptions(Dynamic.Tekla.Structures.ClashCheckOptions_.GetTSObject(Options));

		public System.Boolean GetOptions(Dynamic.Tekla.Structures.ComponentOptions Options)
			 => teklaObject.GetOptions(Dynamic.Tekla.Structures.ComponentOptions_.GetTSObject(Options));

		public System.Boolean SetOptions(Dynamic.Tekla.Structures.ComponentOptions Options)
			 => teklaObject.SetOptions(Dynamic.Tekla.Structures.ComponentOptions_.GetTSObject(Options));

		public System.Boolean IsToolOptionOn(System.String toolOptionName)
			 => teklaObject.IsToolOptionOn(toolOptionName);

		public System.Boolean IsPourEnabled()
			 => teklaObject.IsPourEnabled();




    public  class InvalidPathCallback 
    {

		public System.Reflection.MethodInfo Method
		{
			get => teklaObject.Method;
			set { teklaObject.Method = value; }
		}

		public System.Object Target
		{
			get => teklaObject.Target;
			set { teklaObject.Target = value; }
		}

        

        internal dynamic teklaObject;

		public InvalidPathCallback() {}
		public InvalidPathCallback(System.Object @object, System.IntPtr method)
		{
			var args = new object[2];
			args[0] = @object;
			args[1] = method;
			this.teklaObject = TSActivator.CreateInstance("Tekla.Structures.TeklaStructuresSettings.InvalidPathCallback", args);
		}

		public void Invoke(System.String advancedOption, System.String invalidString, System.String exceptionMessage)
			 => teklaObject.Invoke(advancedOption, invalidString, exceptionMessage);

		public void EndInvoke(System.IAsyncResult result)
			 => teklaObject.EndInvoke(result);

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => teklaObject.GetObjectData(info, context);

		public System.Delegate GetInvocationList()
			 => teklaObject.GetInvocationList();

		public System.Object DynamicInvoke(System.Object args)
			 => teklaObject.DynamicInvoke(args);

		public System.Object Clone()
			 => teklaObject.Clone();





    }

    internal static class InvalidPathCallback_
    {
        public static dynamic GetTSObject(InvalidPathCallback dynObject)
        {
            return dynObject.teklaObject;
        }

        public static InvalidPathCallback FromTSObject(dynamic tsObject)
        {
            var typeName = "Dynamic." + tsObject.GetType().FullName;
            var type = System.Reflection.Assembly.GetExecutingAssembly().GetType(typeName);
            var dynObject = (Tekla.Structures.TeklaStructuresSettings.InvalidPathCallback)System.Activator.CreateInstance(type);
            dynObject.teklaObject = tsObject;
            return dynObject;
        }
    }



    public abstract class ToolOptionNames 
    {

        

        internal dynamic teklaObject;






    }

    internal static class ToolOptionNames_
    {
        public static dynamic GetTSObject(ToolOptionNames dynObject)
        {
            return dynObject.teklaObject;
        }

        public static ToolOptionNames FromTSObject(dynamic tsObject)
        {
            var typeName = "Dynamic." + tsObject.GetType().FullName;
            var type = System.Reflection.Assembly.GetExecutingAssembly().GetType(typeName);
            var dynObject = (Tekla.Structures.TeklaStructuresSettings.ToolOptionNames)System.Activator.CreateInstance(type);
            dynObject.teklaObject = tsObject;
            return dynObject;
        }
    }




    }

    internal static class TeklaStructuresSettings_
    {
        public static dynamic GetTSObject(TeklaStructuresSettings dynObject)
        {
            return dynObject.teklaObject;
        }

        public static TeklaStructuresSettings FromTSObject(dynamic tsObject)
        {
            var typeName = "Dynamic." + tsObject.GetType().FullName;
            var type = System.Reflection.Assembly.GetExecutingAssembly().GetType(typeName);
            var dynObject = (Tekla.Structures.TeklaStructuresSettings)System.Activator.CreateInstance(type);
            dynObject.teklaObject = tsObject;
            return dynObject;
        }
    }


}
    
