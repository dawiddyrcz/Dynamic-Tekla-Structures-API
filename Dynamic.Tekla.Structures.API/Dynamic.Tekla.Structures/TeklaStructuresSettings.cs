//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures
{

    public sealed class TeklaStructuresSettings 
    {

        

        dynamic teklastructuressettings;
        
        public TeklaStructuresSettings()
        {
            this.teklastructuressettings =  new Tekla.Structures.TeklaStructuresSettings();
        }

        public TeklaStructuresSettings(dynamic tsObject)
        {
            this.teklastructuressettings = tsObject;

        }


        public dynamic GetTSObject() => teklastructuressettings;

		public System.Boolean GetAdvancedOption(System.String VariableName, ref System.Boolean Value)
			 => teklastructuressettings.GetAdvancedOption(VariableName, ref Value);

		public System.Boolean GetAdvancedOption(System.String VariableName, ref System.Int32 Value)
			 => teklastructuressettings.GetAdvancedOption(VariableName, ref Value);

		public System.Boolean GetAdvancedOption(System.String VariableName, ref System.String Value)
			 => teklastructuressettings.GetAdvancedOption(VariableName, ref Value);

		public System.Boolean GetAdvancedOption(System.String VariableName, ref System.Double Value)
			 => teklastructuressettings.GetAdvancedOption(VariableName, ref Value);

		public System.Boolean GetOptions(ref Dynamic.Tekla.Structures.ClashCheckOptions Options)
			 => teklastructuressettings.GetOptions(ref Options.GetTSObject());

		public System.Boolean SetOptions(Dynamic.Tekla.Structures.ClashCheckOptions Options)
			 => teklastructuressettings.SetOptions(Options.GetTSObject());

		public System.Boolean GetOptions(ref Dynamic.Tekla.Structures.ComponentOptions Options)
			 => teklastructuressettings.GetOptions(ref Options.GetTSObject());

		public System.Boolean SetOptions(Dynamic.Tekla.Structures.ComponentOptions Options)
			 => teklastructuressettings.SetOptions(Options.GetTSObject());

		public System.Boolean IsToolOptionOn(System.String toolOptionName)
			 => teklastructuressettings.IsToolOptionOn(toolOptionName);

		public System.Boolean IsPourEnabled()
			 => teklastructuressettings.IsPourEnabled();




    public sealed class InvalidPathCallback 
    {

		public System.Reflection.MethodInfo Method
		{
			get => invalidpathcallback.Method;
			set { invalidpathcallback.Method = value; }
		}

		public System.Object Target
		{
			get => invalidpathcallback.Target;
			set { invalidpathcallback.Target = value; }
		}

        

        dynamic invalidpathcallback;
        
        public InvalidPathCallback()
        {
            this.invalidpathcallback =  new Tekla.Structures.InvalidPathCallback();
        }

        public InvalidPathCallback(dynamic tsObject)
        {
            this.invalidpathcallback = tsObject;
			this.Method = invalidpathcallback.Method;
			this.Target = invalidpathcallback.Target;

        }


        public dynamic GetTSObject() => invalidpathcallback;

		public void Invoke(System.String advancedOption, System.String invalidString, System.String exceptionMessage)
			 => invalidpathcallback.Invoke(advancedOption, invalidString, exceptionMessage);

		public System.IAsyncResult BeginInvoke(System.String advancedOption, System.String invalidString, System.String exceptionMessage, System.AsyncCallback callback, System.Object @object)
			 => invalidpathcallback.BeginInvoke(advancedOption, invalidString, exceptionMessage, callback, @object);

		public void EndInvoke(System.IAsyncResult result)
			 => invalidpathcallback.EndInvoke(result);

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => invalidpathcallback.GetObjectData(info, context);

		public System.Delegate GetInvocationList()
			 => invalidpathcallback.GetInvocationList();

		public System.Object DynamicInvoke(System.Object args)
			 => invalidpathcallback.DynamicInvoke(args);

		public System.Object Clone()
			 => invalidpathcallback.Clone();





    }


    public sealed class ToolOptionNames 
    {

        

        dynamic tooloptionnames;
        
        public ToolOptionNames()
        {
            this.tooloptionnames =  new Tekla.Structures.ToolOptionNames();
        }

        public ToolOptionNames(dynamic tsObject)
        {
            this.tooloptionnames = tsObject;

        }


        public dynamic GetTSObject() => tooloptionnames;





    }



    }

}
    
