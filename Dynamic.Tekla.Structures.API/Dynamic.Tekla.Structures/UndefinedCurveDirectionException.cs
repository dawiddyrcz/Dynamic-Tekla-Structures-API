//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class UndefinedCurveDirectionException 
    {

		public System.String Message
		{
			get => undefinedcurvedirectionexception.Message;
			set { undefinedcurvedirectionexception.Message = value; }
		}

		public System.Collections.IDictionary Data
		{
			get => undefinedcurvedirectionexception.Data;
			set { undefinedcurvedirectionexception.Data = value; }
		}

		public System.Exception InnerException
		{
			get => undefinedcurvedirectionexception.InnerException;
			set { undefinedcurvedirectionexception.InnerException = value; }
		}

		public System.Reflection.MethodBase TargetSite
		{
			get => undefinedcurvedirectionexception.TargetSite;
			set { undefinedcurvedirectionexception.TargetSite = value; }
		}

		public System.String StackTrace
		{
			get => undefinedcurvedirectionexception.StackTrace;
			set { undefinedcurvedirectionexception.StackTrace = value; }
		}

		public System.String HelpLink
		{
			get => undefinedcurvedirectionexception.HelpLink;
			set { undefinedcurvedirectionexception.HelpLink = value; }
		}

		public System.String Source
		{
			get => undefinedcurvedirectionexception.Source;
			set { undefinedcurvedirectionexception.Source = value; }
		}

		public System.Int32 HResult
		{
			get => undefinedcurvedirectionexception.HResult;
			set { undefinedcurvedirectionexception.HResult = value; }
		}

        

        dynamic undefinedcurvedirectionexception;
        
        public UndefinedCurveDirectionException()
        {
            this.undefinedcurvedirectionexception =  new Tekla.Structures.Model.UndefinedCurveDirectionException();
        }

        public UndefinedCurveDirectionException(dynamic tsObject)
        {
            this.undefinedcurvedirectionexception = tsObject;
			this.Message = undefinedcurvedirectionexception.Message;
			this.Data = undefinedcurvedirectionexception.Data;
			this.InnerException = undefinedcurvedirectionexception.InnerException;
			this.TargetSite = undefinedcurvedirectionexception.TargetSite;
			this.StackTrace = undefinedcurvedirectionexception.StackTrace;
			this.HelpLink = undefinedcurvedirectionexception.HelpLink;
			this.Source = undefinedcurvedirectionexception.Source;
			this.HResult = undefinedcurvedirectionexception.HResult;

        }


        public dynamic GetTSObject() => undefinedcurvedirectionexception;

		public System.Exception GetBaseException()
			 => undefinedcurvedirectionexception.GetBaseException();

		public System.String ToString()
			 => undefinedcurvedirectionexception.ToString();

		public System.Type GetType()
			 => undefinedcurvedirectionexception.GetType();

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => undefinedcurvedirectionexception.GetObjectData(info, context);

		public System.Boolean Equals(System.Object obj)
			 => undefinedcurvedirectionexception.Equals(obj);

		public System.Int32 GetHashCode()
			 => undefinedcurvedirectionexception.GetHashCode();

		public System.Type GetType()
			 => undefinedcurvedirectionexception.GetType();





    }

}
    
