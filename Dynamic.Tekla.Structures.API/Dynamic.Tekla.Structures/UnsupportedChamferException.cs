//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Model
{

    public sealed class UnsupportedChamferException 
    {

		public System.String Message
		{
			get => unsupportedchamferexception.Message;
			set { unsupportedchamferexception.Message = value; }
		}

		public System.Collections.IDictionary Data
		{
			get => unsupportedchamferexception.Data;
			set { unsupportedchamferexception.Data = value; }
		}

		public System.Exception InnerException
		{
			get => unsupportedchamferexception.InnerException;
			set { unsupportedchamferexception.InnerException = value; }
		}

		public System.Reflection.MethodBase TargetSite
		{
			get => unsupportedchamferexception.TargetSite;
			set { unsupportedchamferexception.TargetSite = value; }
		}

		public System.String StackTrace
		{
			get => unsupportedchamferexception.StackTrace;
			set { unsupportedchamferexception.StackTrace = value; }
		}

		public System.String HelpLink
		{
			get => unsupportedchamferexception.HelpLink;
			set { unsupportedchamferexception.HelpLink = value; }
		}

		public System.String Source
		{
			get => unsupportedchamferexception.Source;
			set { unsupportedchamferexception.Source = value; }
		}

		public System.Int32 HResult
		{
			get => unsupportedchamferexception.HResult;
			set { unsupportedchamferexception.HResult = value; }
		}

        

        dynamic unsupportedchamferexception;
        
        public UnsupportedChamferException()
        {
            this.unsupportedchamferexception =  new Tekla.Structures.Model.UnsupportedChamferException();
        }

        public UnsupportedChamferException(dynamic tsObject)
        {
            this.unsupportedchamferexception = tsObject;
			this.Message = unsupportedchamferexception.Message;
			this.Data = unsupportedchamferexception.Data;
			this.InnerException = unsupportedchamferexception.InnerException;
			this.TargetSite = unsupportedchamferexception.TargetSite;
			this.StackTrace = unsupportedchamferexception.StackTrace;
			this.HelpLink = unsupportedchamferexception.HelpLink;
			this.Source = unsupportedchamferexception.Source;
			this.HResult = unsupportedchamferexception.HResult;

        }


        public dynamic GetTSObject() => unsupportedchamferexception;

		public System.Exception GetBaseException()
			 => unsupportedchamferexception.GetBaseException();

		public System.String ToString()
			 => unsupportedchamferexception.ToString();

		public System.Type GetType()
			 => unsupportedchamferexception.GetType();

		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			 => unsupportedchamferexception.GetObjectData(info, context);

		public System.Boolean Equals(System.Object obj)
			 => unsupportedchamferexception.Equals(obj);

		public System.Int32 GetHashCode()
			 => unsupportedchamferexception.GetHashCode();

		public System.Type GetType()
			 => unsupportedchamferexception.GetType();





    }

}
    
