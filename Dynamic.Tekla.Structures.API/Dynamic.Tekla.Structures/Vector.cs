//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file

namespace Dynamic.Tekla.Structures.Geometry3d
{

    public sealed class Vector 
    {

        

        dynamic vector;
        
        public Vector()
        {
            this.vector =  new Tekla.Structures.Geometry3d.Vector();
        }

        public Vector(dynamic tsObject)
        {
            this.vector = tsObject;

        }


        public dynamic GetTSObject() => vector;

		public System.Double Normalize()
			 => vector.Normalize();

		public System.Double Normalize(System.Double NewLength)
			 => vector.Normalize(NewLength);

		public System.Double GetLength()
			 => vector.GetLength();

		public System.Double GetAngleBetween(Dynamic.Tekla.Structures.Geometry3d.Vector Vector)
			 => vector.GetAngleBetween(Vector.GetTSObject());

		public Dynamic.Tekla.Structures.Geometry3d.Vector GetNormal()
			 => new Dynamic.Tekla.Structures.Geometry3d.Vector(vector.GetNormal());

		public System.Double Dot(Dynamic.Tekla.Structures.Geometry3d.Vector Vector)
			 => vector.Dot(Vector.GetTSObject());

		public System.Double Dot(Dynamic.Tekla.Structures.Geometry3d.Vector Vector1, Dynamic.Tekla.Structures.Geometry3d.Vector Vector2)
			 => vector.Dot(Vector1.GetTSObject(), Vector2.GetTSObject());

		public Dynamic.Tekla.Structures.Geometry3d.Vector Cross(Dynamic.Tekla.Structures.Geometry3d.Vector Vector)
			 => new Dynamic.Tekla.Structures.Geometry3d.Vector(vector.Cross(Vector.GetTSObject()));

		public Dynamic.Tekla.Structures.Geometry3d.Vector Cross(Dynamic.Tekla.Structures.Geometry3d.Vector Vector1, Dynamic.Tekla.Structures.Geometry3d.Vector Vector2)
			 => new Dynamic.Tekla.Structures.Geometry3d.Vector(vector.Cross(Vector1.GetTSObject(), Vector2.GetTSObject()));

		public Dynamic.Tekla.Structures.Geometry3d.Vector op_Multiply(Dynamic.Tekla.Structures.Geometry3d.Vector Vector, System.Double Multiplier)
			 => new Dynamic.Tekla.Structures.Geometry3d.Vector(vector.op_Multiply(Vector.GetTSObject(), Multiplier));

		public Dynamic.Tekla.Structures.Geometry3d.Vector op_Multiply(System.Double Multiplier, Dynamic.Tekla.Structures.Geometry3d.Vector Vector)
			 => new Dynamic.Tekla.Structures.Geometry3d.Vector(vector.op_Multiply(Multiplier, Vector.GetTSObject()));

		public void Zero()
			 => vector.Zero();

		public void Translate(System.Double X, System.Double Y, System.Double Z)
			 => vector.Translate(X, Y, Z);

		public System.Int32 CompareTo(System.Object obj)
			 => vector.CompareTo(obj);





    }

}
    
