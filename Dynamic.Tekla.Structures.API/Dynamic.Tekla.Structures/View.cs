
//Generated by script in project CodeGenerator
//Copyright Dawid Dyrcz 2020 see license file



namespace Dynamic.Tekla.Structures.Model.UI
{
    public sealed class View 
    {

		public System.String CurrentRepresentation {get; set; }
		public Dynamic.Tekla.Structures.Identifier Identifier {get; set; }
		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem ViewCoordinateSystem {get; set; }
		public Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem DisplayCoordinateSystem {get; set; }
		public System.String Name {get; set; }
		public Dynamic.Tekla.Structures.Geometry3d.AABB WorkArea {get; set; }
		public System.Double ViewDepthUp {get; set; }
		public System.Double ViewDepthDown {get; set; }
		public Dynamic.Tekla.Structures.Model.UI.ViewProjectionType ViewProjection {get; set; }
		public Dynamic.Tekla.Structures.Model.UI.DisplayOrientationType DisplayType {get; set; }
		public Dynamic.Tekla.Structures.Model.UI.ViewRenderingType ViewRendering {get; set; }
		public System.String ViewFilter {get; set; }
		public System.Boolean SharedView {get; set; }
		public Dynamic.Tekla.Structures.Model.UI.ViewVisibilitySettings VisibilitySettings {get; set; }
        

        dynamic view;
        
        public View()
        {
            this.view =  new Tekla.Structures.Model.UI.View();
        }

        public View(dynamic tsObject)
        {
            this.view = tsObject;
			this.CurrentRepresentation = view.CurrentRepresentation;
			this.Identifier = new Dynamic.Tekla.Structures.Identifier(view.Identifier);
			this.ViewCoordinateSystem = new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(view.ViewCoordinateSystem);
			this.DisplayCoordinateSystem = new Dynamic.Tekla.Structures.Geometry3d.CoordinateSystem(view.DisplayCoordinateSystem);
			this.Name = view.Name;
			this.WorkArea = new Dynamic.Tekla.Structures.Geometry3d.AABB(view.WorkArea);
			this.ViewDepthUp = view.ViewDepthUp;
			this.ViewDepthDown = view.ViewDepthDown;
			this.ViewProjection = Dynamic.Tekla.Structures.Model.UI.ViewProjectionType_.FromTSObject(view.ViewProjection);
			this.DisplayType = Dynamic.Tekla.Structures.Model.UI.DisplayOrientationType_.FromTSObject(view.DisplayType);
			this.ViewRendering = Dynamic.Tekla.Structures.Model.UI.ViewRenderingType_.FromTSObject(view.ViewRendering);
			this.ViewFilter = view.ViewFilter;
			this.SharedView = view.SharedView;
			this.VisibilitySettings = new Dynamic.Tekla.Structures.Model.UI.ViewVisibilitySettings(view.VisibilitySettings);

        }


        public dynamic GetTSObject() => view;

		public System.Boolean Insert()
			 => view.Insert();

		public System.Boolean Modify()
			 => view.Modify();

		public System.Boolean Select()
			 => view.Select();

		public System.Boolean Delete()
			 => view.Delete();

		public System.Boolean IsPerspectiveViewProjection()
			 => view.IsPerspectiveViewProjection();

		public System.Boolean IsVisible()
			 => view.IsVisible();

		public Dynamic.Tekla.Structures.Model.UI.ClipPlaneCollection GetClipPlanes()
			 => new Dynamic.Tekla.Structures.Model.UI.ClipPlaneCollection(view.GetClipPlanes());

		public System.Boolean Equals(System.Object obj)
			 => view.Equals(obj);

		public System.Int32 GetHashCode()
			 => view.GetHashCode();

		public System.Type GetType()
			 => view.GetType();

		public System.String ToString()
			 => view.ToString();



    }
}

            